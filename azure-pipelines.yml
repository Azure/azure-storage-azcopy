variables:
  AZCOPY_GOLANG_VERSION: '1.20.2'

trigger:
  branches:
    include:
      - dev
      - main

pr:
  branches:
    include:
      - dev
      - main

jobs:

  - job: Build
    timeoutInMinutes: 360
    strategy:
      matrix:
        Ubuntu-20:
          imageName: 'ubuntu-20.04'
          type: 'linux'
        MacOS:
          imageName: 'macos-11'
          type: 'mac-os'
    pool:
      vmImage: $(imageName)
    steps:
      - task: GoTool@0
        env:
          GO111MODULE: 'on'
        inputs:
          version: $(AZCOPY_GOLANG_VERSION)

      - script: |
          echo 'Running GO Vet'
          go vet 
        displayName: 'Golang Vet - Linux'
        workingDirectory: $(System.DefaultWorkingDirectory)

      - script: |
          GOARCH=amd64 GOOS=linux go build -o "$(Build.ArtifactStagingDirectory)/azcopy_linux_amd64"
        displayName: 'Generate Linux AMD64'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=amd64 GOOS=linux go build -tags "se_integration" -o "$(Build.ArtifactStagingDirectory)/azcopy_linux_se_amd64"
        displayName: 'Generate Linux AMD64 SE Integration'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=arm64 GOOS=linux go build -o "$(Build.ArtifactStagingDirectory)/azcopy_linux_arm64"
        displayName: 'Generate Linux ARM64'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=amd64 GOOS=windows go build -o "$(Build.ArtifactStagingDirectory)/azcopy_windows_amd64.exe"
        displayName: 'Generate Windows AMD64'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=386 GOOS=windows go build -o "$(Build.ArtifactStagingDirectory)/azcopy_windows_386.exe"
        displayName: 'Generate Windows i386'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=arm GOARM=7 GOOS=windows go build -o "$(Build.ArtifactStagingDirectory)/azcopy_windows_v7_arm.exe"
        displayName: 'Generate Windows ARM'
        condition: eq(variables.type, 'linux')

      - script: |
          cp NOTICE.txt $(Build.ArtifactStagingDirectory)
        displayName: 'Copy NOTICE.txt'
        condition: eq(variables.type, 'linux')

      - script: |
          go build -o "$(Build.ArtifactStagingDirectory)/azcopy_darwin_amd64"
        displayName: 'Generate MacOS Build with AMD64'
        condition: eq(variables.type, 'mac-os')

      - script: |
          GOARCH=arm64 CGO_ENABLED=1 go build -o "$(Build.ArtifactStagingDirectory)/azcopy_darwin_arm64"
        displayName: 'Generate MacOS Build with ARM64'
        condition: eq(variables.type, 'mac-os')

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        condition: succeededOrFailed()
        
      - task: ComponentGovernanceComponentDetection@0
        inputs:
          scanType: 'Register'
          verbosity: 'Verbose'
          alertWarningLevel: 'High'

  - job: E2E_Test
    timeoutInMinutes: 360
    # Creating strategies for GOOS: Windows Server 2019 /macOS X Mojave 10.15/Ubuntu 20.04
    strategy:
      matrix:
        Ubuntu-20:
          imageName: 'ubuntu-20.04'
          build_name: 'azcopy_linux_amd64'
          display_name: "Linux"
          go_path: '$(go env GOPATH)/bin/'
          suffix: ''
        Windows:
          imageName: 'windows-2019'
          build_name: 'azcopy_windows_amd64.exe'
          display_name: "Windows"
          go_path: 'C:\Users\VssAdministrator\go\bin\'
          suffix: '.exe'
        MacOS:
          imageName: 'macos-11'
          build_name: 'azcopy_darwin_amd64'
          display_name: "MacOS"
          go_path: '$(go env GOPATH)/bin/'
          suffix: ''
    pool:
      vmImage: $(imageName)

    steps:
      - task: GoTool@0
        inputs:
          version: $(AZCOPY_GOLANG_VERSION)

      # Running E2E Tests on AMD64
      - script: |
          go install github.com/jstemmer/go-junit-report@v0.9.1
          go install github.com/axw/gocov/gocov@v1.1.0
          go install github.com/AlekSi/gocov-xml@v1.0.0
          go install github.com/matm/gocov-html@v0.0.0-20200509184451-71874e2e203b
          mkdir coverage
          echo 'Building executable'
          go build -cover -o $(build_name)
          echo 'Running tests'
          go test -timeout=1h -v ./e2etest 2>&1 | $(go_path)go-junit-report$(suffix) > report.xml
          echo 'Formatting coverage directory to legacy txt format'
          go tool covdata textfmt -i=coverage -o coverage.txt
          echo 'Formatting coverage to json format'
          $(go_path)gocov$(suffix) convert coverage.txt > coverage.json
          echo 'Formatting coverage to xml format'
          $(go_path)gocov-xml$(suffix) < coverage.json > coverage.xml
        env:
          AZCOPY_E2E_ACCOUNT_KEY: $(AZCOPY_E2E_ACCOUNT_KEY)
          AZCOPY_E2E_ACCOUNT_NAME: $(AZCOPY_E2E_ACCOUNT_NAME)
          AZCOPY_E2E_ACCOUNT_KEY_HNS: $(AZCOPY_E2E_ACCOUNT_KEY_HNS)
          AZCOPY_E2E_ACCOUNT_NAME_HNS: $(AZCOPY_E2E_ACCOUNT_NAME_HNS)
          AZCOPY_E2E_TENANT_ID: $(OAUTH_TENANT_ID)
          AZCOPY_E2E_APPLICATION_ID: $(ACTIVE_DIRECTORY_APPLICATION_ID)
          AZCOPY_E2E_CLIENT_SECRET: $(AZCOPY_SPA_CLIENT_SECRET)
          AZCOPY_E2E_CLASSIC_ACCOUNT_NAME: $(AZCOPY_E2E_CLASSIC_ACCOUNT_NAME)
          AZCOPY_E2E_CLASSIC_ACCOUNT_KEY: $(AZCOPY_E2E_CLASSIC_ACCOUNT_KEY)
          AZCOPY_E2E_LOG_OUTPUT: '$(System.DefaultWorkingDirectory)/logs'
          AZCOPY_E2E_OAUTH_MANAGED_DISK_CONFIG: $(AZCOPY_E2E_OAUTH_MANAGED_DISK_CONFIG)
          AZCOPY_E2E_STD_MANAGED_DISK_CONFIG: $(AZCOPY_E2E_STD_MANAGED_DISK_CONFIG)
          CPK_ENCRYPTION_KEY: $(CPK_ENCRYPTION_KEY)
          CPK_ENCRYPTION_KEY_SHA256: $(CPK_ENCRYPTION_KEY_SHA256)
          AZCOPY_E2E_EXECUTABLE_PATH: $(System.DefaultWorkingDirectory)/$(build_name)
          GOCOVERDIR: '$(System.DefaultWorkingDirectory)/coverage'
        displayName: 'E2E Test $(display_name) - AMD64'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish logs'
        condition: succeededOrFailed()
        inputs:
          pathToPublish: '$(System.DefaultWorkingDirectory)/logs'
          artifactName: logs

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
          testRunTitle: 'Go on $(display_name)'

      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
          additionalCodeCoverageFiles: $(System.DefaultWorkingDirectory)/**/coverage.html

  - job: Test_On_Ubuntu
    variables:
      isMutexSet: 'false'
    # allow maximum build time, in case we have build congestion
    timeoutInMinutes: 360
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
      - task: UsePythonVersion@0
        name: 'Set_up_Python'
        inputs:
          versionSpec: '3.7'
      - task: GoTool@0
        name: 'Set_up_Golang'
        inputs:
          version: $(AZCOPY_GOLANG_VERSION)
      - task: DownloadSecureFile@1
        name: ciGCSServiceAccountKey
        displayName: 'Download GCS Service Account Key'
        inputs:
          secureFile: 'ci-gcs-dev.json'
      - script: |
          go install github.com/jstemmer/go-junit-report@v0.9.1
          go install github.com/axw/gocov/gocov@v1.1.0
          go install github.com/AlekSi/gocov-xml@v1.0.0
          go install github.com/matm/gocov-html@v0.0.0-20200509184451-71874e2e203b
        name: 'Install_dependencies'
      - script: |
          pip install azure-storage-blob==12.12.0
          # set the variable to indicate that the mutex is being acquired
          # note: we set it before acquiring the mutex to ensure we release the mutex.
          # setting this after can result in an un-broken mutex if someone cancels the pipeline after we acquire the
          # mutex but before we set this variable.
          # setting this before will always work since it is valid to break an un-acquired mutex.
          echo '##vso[task.setvariable variable=isMutexSet]true'
          # acquire the mutex before running live tests to avoid conflicts
          python ./tool_distributed_mutex.py lock "$(MUTEX_URL)"
        name: 'Acquire_the_distributed_mutex'
      - script: |
          set -e
          set -o pipefail
          echo "azbfs tests"
          go test -timeout=1h -v -coverprofile=azbfs_coverage.txt ./azbfs | tee azbfs.txt
          exit_code=$?
          echo "exit code: $exit_code"
          cat azbfs.txt | $(go env GOPATH)/bin/go-junit-report > azbfs_report.xml
          $(go env GOPATH)/bin/gocov convert azbfs_coverage.txt > azbfs_coverage.json
          $(go env GOPATH)/bin/gocov-xml < azbfs_coverage.json > azbfs_coverage.xml
          exit "$exit_code"
        name: 'Run_azbfs_tests'
        env:
          ACCOUNT_NAME: $(ACCOUNT_NAME)
          ACCOUNT_KEY: $(ACCOUNT_KEY)

      - script: |
          set -e
          set -o pipefail
          echo "cmd tests"
          go test -timeout=1h -v -coverprofile=cmd_coverage.txt ./cmd | tee cmd.txt
          exit_code=$?
          echo "exit code: $exit_code"
          cat cmd.txt | $(go env GOPATH)/bin/go-junit-report > cmd_report.xml
          $(go env GOPATH)/bin/gocov convert cmd_coverage.txt > cmd_coverage.json
          $(go env GOPATH)/bin/gocov-xml < cmd_coverage.json > cmd_coverage.xml
          exit "$exit_code"
        name: 'Run_cmd_tests'
        env:
          ACCOUNT_NAME: $(ACCOUNT_NAME)
          ACCOUNT_KEY: $(ACCOUNT_KEY)
          AZCOPY_E2E_ACCOUNT_KEY: $(AZCOPY_E2E_ACCOUNT_KEY)
          AZCOPY_E2E_ACCOUNT_NAME: $(AZCOPY_E2E_ACCOUNT_NAME)
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          GOOGLE_APPLICATION_CREDENTIALS: $(ciGCSServiceAccountKey.secureFilePath)
          GOOGLE_CLOUD_PROJECT: $(GOOGLE_CLOUD_PROJECT)
      - script: |        
          echo "common tests"
          go test -timeout=1h -v -coverprofile=common_coverage.txt ./common 2>&1 | $(go env GOPATH)/bin/go-junit-report > common_report.xml
          $(go env GOPATH)/bin/gocov convert common_coverage.txt > common_coverage.json
          $(go env GOPATH)/bin/gocov-xml < common_coverage.json > common_coverage.xml

          echo "common/parallel tests"
          go test -timeout=1h -v -coverprofile=parallel_coverage.txt ./common/parallel 2>&1 | $(go env GOPATH)/bin/go-junit-report > parallel_report.xml
          $(go env GOPATH)/bin/gocov convert parallel_coverage.txt > parallel_coverage.json
          $(go env GOPATH)/bin/gocov-xml < parallel_coverage.json > parallel_coverage.xml

          echo "ste tests"
          go test -timeout=1h -short -v -coverprofile=ste_coverage.txt ./ste 2>&1 | $(go env GOPATH)/bin/go-junit-report > ste_report.xml
          $(go env GOPATH)/bin/gocov convert ste_coverage.txt > ste_coverage.json
          $(go env GOPATH)/bin/gocov-xml < ste_coverage.json > ste_coverage.xml

          echo "sddl tests"
          go test -timeout=1h -v -coverprofile=sddl_coverage.txt ./sddl 2>&1 | $(go env GOPATH)/bin/go-junit-report > sddl_report.xml
          $(go env GOPATH)/bin/gocov convert sddl_coverage.txt > sddl_coverage.json
          $(go env GOPATH)/bin/gocov-xml < sddl_coverage.json > sddl_coverage.xml
        name: 'Run_unit_tests'
        env:
          ACCOUNT_NAME: $(ACCOUNT_NAME)
          ACCOUNT_KEY: $(ACCOUNT_KEY)
          AZCOPY_E2E_ACCOUNT_KEY: $(AZCOPY_E2E_ACCOUNT_KEY)
          AZCOPY_E2E_ACCOUNT_NAME: $(AZCOPY_E2E_ACCOUNT_NAME)
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          GOOGLE_APPLICATION_CREDENTIALS: $(ciGCSServiceAccountKey.secureFilePath)
          GOOGLE_CLOUD_PROJECT: $(GOOGLE_CLOUD_PROJECT)
      - script: |
          GOARCH=amd64 GOOS=linux go build -cover -o azcopy_linux_amd64
          go build -o test-validator ./testSuite/
          mkdir test-temp
          mkdir coverage
          export AZCOPY_EXECUTABLE_PATH=$(pwd)/azcopy_linux_amd64
          export TEST_SUITE_EXECUTABLE_LOCATION=$(pwd)/test-validator
          export TEST_DIRECTORY_PATH=$(pwd)/test-temp

          keyctl session test python ./testSuite/scripts/run.py

          echo 'Formatting coverage directory to legacy txt format'
          go tool covdata textfmt -i=coverage -o smoke_coverage.txt
          echo 'Formatting coverage to json format'
          $(go env GOPATH)/bin/gocov convert smoke_coverage.txt > smoke_coverage.json
          echo 'Formatting coverage to xml format'
          $(go env GOPATH)/bin/gocov-xml < smoke_coverage.json > smoke_coverage.xml
        name: 'Run_smoke_tests'
        env:
          ACCOUNT_NAME: $(ACCOUNT_NAME)
          ACCOUNT_KEY: $(ACCOUNT_KEY)
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          GOOGLE_CLOUD_PROJECT: $(GOOGLE_CLOUD_PROJECT)
          GOOGLE_APPLICATION_CREDENTIALS: $(ciGCSServiceAccountKey.secureFilePath)
          ACTIVE_DIRECTORY_APPLICATION_ID: $(ACTIVE_DIRECTORY_APPLICATION_ID)
          AZCOPY_SPA_CLIENT_SECRET: $(AZCOPY_SPA_CLIENT_SECRET)
          CONTAINER_OAUTH_URL: $(CONTAINER_OAUTH_URL)
          CONTAINER_OAUTH_VALIDATE_SAS_URL: $(CONTAINER_OAUTH_VALIDATE_SAS_URL)
          CONTAINER_SAS_URL: $(CONTAINER_SAS_URL)
          FILESYSTEM_SAS_URL: $(FILESYSTEM_SAS_URL)
          FILESYSTEM_URL: $(FILESYSTEM_URL)
          OAUTH_AAD_ENDPOINT: $(OAUTH_AAD_ENDPOINT)
          OAUTH_TENANT_ID: $(OAUTH_TENANT_ID)
          PREMIUM_CONTAINER_SAS_URL: $(PREMIUM_CONTAINER_SAS_URL)
          S2S_DST_BLOB_ACCOUNT_SAS_URL: $(S2S_DST_BLOB_ACCOUNT_SAS_URL)
          S2S_SRC_BLOB_ACCOUNT_SAS_URL: $(S2S_SRC_BLOB_ACCOUNT_SAS_URL)
          S2S_SRC_FILE_ACCOUNT_SAS_URL: $(S2S_SRC_FILE_ACCOUNT_SAS_URL)
          S2S_SRC_S3_SERVICE_URL: $(S2S_SRC_S3_SERVICE_URL)
          S2S_SRC_GCP_SERVICE_URL: $(S2S_SRC_GCP_SERVICE_URL)
          SHARE_SAS_URL: $(SHARE_SAS_URL)
          GOCOVERDIR: '$(System.DefaultWorkingDirectory)/coverage'
      - script: |
          pip install azure-storage-blob==12.12.0
          python ./tool_distributed_mutex.py unlock "$(MUTEX_URL)"
        name: 'Release_the_distributed_mutex'
        # this runs even if the job was canceled (only if the mutex was acquired by this job)
        condition: and(always(), eq(variables['isMutexSet'], 'true'))
      # Unit and Smoke Tests Publishing
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/azbfs_report.xml
          testRunTitle: 'Azbfs Tests'
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/azbfs_coverage.xml
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/cmd_report.xml
          testRunTitle: 'Cmd Tests'
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/cmd_coverage.xml
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/common_report.xml
          testRunTitle: 'Common Tests'
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/common_coverage.xml
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/parallel_report.xml
          testRunTitle: 'Parallel Tests'
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/parallel_coverage.xml
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/sddl_report.xml
          testRunTitle: 'Sddl Tests'
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/sddl_coverage.xml
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/ste_report.xml
          testRunTitle: 'Ste Tests'
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/ste_coverage.xml
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/smoke_coverage.xml
