trigger:
  branches:
    include:
      - dev
      - main

pr:
  branches:
    include:
      - dev
      - main

jobs:
  - job: Build
    timeoutInMinutes: 360
    strategy:
      matrix:
        Ubuntu-20:
          imageName: 'ubuntu-20.04'
          type: 'linux'
        MacOS:
          imageName: 'macOS-10.15'
          type: 'mac-os'
    pool:
      vmImage: $(imageName)
    steps:
      - task: GoTool@0
        inputs:
          version: '1.16'
      - script: |
          GOARCH=amd64 GOOS=linux go build -o "$(Build.ArtifactStagingDirectory)/azcopy_linux_amd64"
          GOARCH=amd64 GOOS=linux go build -tags "se_integration" -o "$(Build.ArtifactStagingDirectory)/azcopy_linux_se_amd64"
          GOARCH=arm64 GOOS=linux go build -o "$(Build.ArtifactStagingDirectory)/azcopy_linux_arm64"

          GOARCH=amd64 GOOS=windows go build -o "$(Build.ArtifactStagingDirectory)/azcopy_windows_amd64.exe"
          GOARCH=386 GOOS=windows go build -o "$(Build.ArtifactStagingDirectory)/azcopy_windows_386.exe"
          GOARCH=arm GOARM=7 GOOS=windows go build -o "$(Build.ArtifactStagingDirectory)/azcopy_windows_v7_arm.exe"

          cp NOTICE.txt $(Build.ArtifactStagingDirectory)
        displayName: 'Generate Linux And Windows Build'
        condition: eq(variables.type, 'linux')

      - script: |
          go build -o "$(Build.ArtifactStagingDirectory)/azcopy_darwin_amd64"
        displayName: 'Generate MacOS Build'
        condition: eq(variables.type, 'mac-os')

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        condition: succeededOrFailed()

  - job: E2E_Test
    timeoutInMinutes: 360
    # Creating strategies for GOOS: Windows Server 2019 /macOS X Mojave 10.15/Ubuntu 20.04
    strategy:
      matrix:
        Ubuntu-20:
          imageName: 'ubuntu-20.04'
          type: 'linux'
        Windows:
          imageName: 'windows-2019'
          type: 'windows'
        MacOS:
          imageName: 'macOS-10.15'
          type: 'mac-os'
    pool:
      vmImage: $(imageName)

    steps:
      - task: GoTool@0
        inputs:
          version: '1.16'

      # Running E2E Tests on Linux - ARM64
      - script: |
          set -e
          sudo apt-get update
          sudo apt-get install qemu binfmt-support qemu-user-static
          update-binfmts --display
          GOARCH=arm64 GOOS=linux go build -o azcopy_linux_arm64
          export AZCOPY_E2E_EXECUTABLE_PATH=$(pwd)/azcopy_linux_arm64
          GOARCH=arm64 go test -c -o test.arm64 -timeout 20m -cover ./e2etest
          qemu-aarch64 test.arm64
        env:
          AZCOPY_E2E_ACCOUNT_KEY: $(AZCOPY_E2E_ACCOUNT_KEY)
          AZCOPY_E2E_ACCOUNT_NAME: $(AZCOPY_E2E_ACCOUNT_NAME)
          AZCOPY_E2E_ACCOUNT_KEY_HNS: $(AZCOPY_E2E_ACCOUNT_KEY_HNS)
          AZCOPY_E2E_ACCOUNT_NAME_HNS: $(AZCOPY_E2E_ACCOUNT_NAME_HNS)
          CPK_ENCRYPTION_KEY: $(CPK_ENCRYPTION_KEY)
          CPK_ENCRYPTION_KEY_SHA256: $(CPK_ENCRYPTION_KEY_SHA256)
        displayName: 'E2E Test Linux - ARM64'
        condition: eq(variables.type, 'linux')

      # Running E2E Tests on Windows - AMD64
      - script: |
          go build -o $(System.DefaultWorkingDirectory)/azcopy_windows_amd64.exe
          go build -o $(System.DefaultWorkingDirectory)/azcopy_windows_386.exe
          echo 'starting E2E tests on windows'
          go test -timeout 30m -race -cover -v ./e2etest
        env:
          AZCOPY_E2E_ACCOUNT_KEY: $(AZCOPY_E2E_ACCOUNT_KEY)
          AZCOPY_E2E_ACCOUNT_NAME: $(AZCOPY_E2E_ACCOUNT_NAME)
          AZCOPY_E2E_ACCOUNT_KEY_HNS: $(AZCOPY_E2E_ACCOUNT_KEY_HNS)
          AZCOPY_E2E_ACCOUNT_NAME_HNS: $(AZCOPY_E2E_ACCOUNT_NAME_HNS)
          CPK_ENCRYPTION_KEY: $(CPK_ENCRYPTION_KEY)
          CPK_ENCRYPTION_KEY_SHA256: $(CPK_ENCRYPTION_KEY_SHA256)
          AZCOPY_E2E_EXECUTABLE_PATH: $(System.DefaultWorkingDirectory)/azcopy_windows_amd64.exe
        displayName: 'E2E Test Windows - AMD64'
        condition: eq(variables.type, 'windows')

      # Running E2E Tests on Mac
      - script: |
          set -e
          go build -o azcopy_darwin_amd64
          echo 'starting E2E tests on mac-os'
          export AZCOPY_E2E_EXECUTABLE_PATH=$(pwd)/azcopy_darwin_amd64
          go test -timeout 30m -race -cover -v ./e2etest
        env:
          AZCOPY_E2E_ACCOUNT_KEY: $(AZCOPY_E2E_ACCOUNT_KEY)
          AZCOPY_E2E_ACCOUNT_NAME: $(AZCOPY_E2E_ACCOUNT_NAME)
          AZCOPY_E2E_ACCOUNT_KEY_HNS: $(AZCOPY_E2E_ACCOUNT_KEY_HNS)
          AZCOPY_E2E_ACCOUNT_NAME_HNS: $(AZCOPY_E2E_ACCOUNT_NAME_HNS)
          CPK_ENCRYPTION_KEY: $(CPK_ENCRYPTION_KEY)
          CPK_ENCRYPTION_KEY_SHA256: $(CPK_ENCRYPTION_KEY_SHA256)
        displayName: 'E2E Test MacOs'
        condition: eq(variables.type, 'mac-os')

