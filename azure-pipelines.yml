variables:
  AZCOPY_GOLANG_VERSION: '1.20.2'

trigger:
  branches:
    include:
      - dev
      - main

pr:
  branches:
    include:
      - dev
      - main

jobs:

  - job: Build
    timeoutInMinutes: 360
    strategy:
      matrix:
        Ubuntu-20:
          imageName: 'ubuntu-20.04'
          type: 'linux'
        MacOS:
          imageName: 'macos-11'
          type: 'mac-os'
    pool:
      vmImage: $(imageName)
    steps:
      - task: GoTool@0
        env:
          GO111MODULE: 'on'
        inputs:
          version: $(AZCOPY_GOLANG_VERSION)

      - script: |
          echo 'Running GO Vet'
          go vet 
        displayName: 'Golang Vet - Linux'
        workingDirectory: $(System.DefaultWorkingDirectory)

      - script: |
          GOARCH=amd64 GOOS=linux go build -o "$(Build.ArtifactStagingDirectory)/azcopy_linux_amd64"
        displayName: 'Generate Linux AMD64'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=amd64 GOOS=linux go build -tags "se_integration" -o "$(Build.ArtifactStagingDirectory)/azcopy_linux_se_amd64"
        displayName: 'Generate Linux AMD64 SE Integration'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=arm64 GOOS=linux go build -o "$(Build.ArtifactStagingDirectory)/azcopy_linux_arm64"
        displayName: 'Generate Linux ARM64'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=amd64 GOOS=windows go build -o "$(Build.ArtifactStagingDirectory)/azcopy_windows_amd64.exe"
        displayName: 'Generate Windows AMD64'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=386 GOOS=windows go build -o "$(Build.ArtifactStagingDirectory)/azcopy_windows_386.exe"
        displayName: 'Generate Windows i386'
        condition: eq(variables.type, 'linux')

      - script: |
          GOARCH=arm GOARM=7 GOOS=windows go build -o "$(Build.ArtifactStagingDirectory)/azcopy_windows_v7_arm.exe"
        displayName: 'Generate Windows ARM'
        condition: eq(variables.type, 'linux')

      - script: |
          cp NOTICE.txt $(Build.ArtifactStagingDirectory)
        displayName: 'Copy NOTICE.txt'
        condition: eq(variables.type, 'linux')

      - script: |
          go build -o "$(Build.ArtifactStagingDirectory)/azcopy_darwin_amd64"
        displayName: 'Generate MacOS Build with AMD64'
        condition: eq(variables.type, 'mac-os')

      - script: |
          GOARCH=arm64 CGO_ENABLED=1 go build -o "$(Build.ArtifactStagingDirectory)/azcopy_darwin_arm64"
        displayName: 'Generate MacOS Build with ARM64'
        condition: eq(variables.type, 'mac-os')

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        condition: succeededOrFailed()
        
      - task: ComponentGovernanceComponentDetection@0
        inputs:
          scanType: 'Register'
          verbosity: 'Verbose'
          alertWarningLevel: 'High'

  - job: E2E_Test
    timeoutInMinutes: 360
    # Creating strategies for GOOS: Windows Server 2019 /macOS X Mojave 10.15/Ubuntu 20.04
    strategy:
      matrix:
        Ubuntu-20:
          imageName: 'ubuntu-20.04'
          build_name: 'azcopy_linux_amd64'
          display_name: "Linux"
          go_path: '$(go env GOPATH)/bin'
        Windows:
          imageName: 'windows-2019'
          build_name: 'azcopy_windows_amd64.exe'
          display_name: "Windows"
          go_path: '$(go env GOPATH)/bin'
        MacOS:
          imageName: 'macos-11'
          build_name: 'azcopy_darwin_amd64'
          display_name: "MacOS"
          go_path: '$(go env GOPATH)/bin'
    pool:
      vmImage: $(imageName)

    steps:
      - task: GoTool@0
        inputs:
          version: $(AZCOPY_GOLANG_VERSION)

      # Running E2E Tests on AMD64
      # go build -cover -o $(build_name)
      # go test -timeout=1h -v ./e2etest
      # go tool covdata textfmt -i="C:\Users\gapra\temp_staging\coverage" -o C:\Users\gapra\temp_staging\coverage.txt
      # Do go-junit-report like normal since that is to see which tests passed and failed
      # gocov convert is correct
      # gocov-xml is correct too

      - script: |
          go install github.com/jstemmer/go-junit-report@v0.9.1
          go install github.com/axw/gocov/gocov@v1.1.0
          go install github.com/AlekSi/gocov-xml@v1.0.0
          go install github.com/matm/gocov-html@v0.0.0-20200509184451-71874e2e203b
          mkdir $(System.DefaultWorkingDirectory)/coverage
          go build -cover -o $(build_name)
          echo 'starting E2E tests'
          go test -timeout=1h -v ./e2etest -covermode count ./e2etest 2>&1 | $(go env GOPATH)/bin/go-junit-report > report.xml
          go tool covdata textfmt -i=$(System.DefaultWorkingDirectory)/coverage -o coverage.txt
          $(go env GOPATH)/bin/gocov convert coverage.txt > coverage.json
          $(go env GOPATH)/bin/gocov-xml < coverage.json > coverage.xml
        env:
          AZCOPY_E2E_ACCOUNT_KEY: $(AZCOPY_E2E_ACCOUNT_KEY)
          AZCOPY_E2E_ACCOUNT_NAME: $(AZCOPY_E2E_ACCOUNT_NAME)
          AZCOPY_E2E_ACCOUNT_KEY_HNS: $(AZCOPY_E2E_ACCOUNT_KEY_HNS)
          AZCOPY_E2E_ACCOUNT_NAME_HNS: $(AZCOPY_E2E_ACCOUNT_NAME_HNS)
          AZCOPY_E2E_TENANT_ID: $(OAUTH_TENANT_ID)
          AZCOPY_E2E_APPLICATION_ID: $(ACTIVE_DIRECTORY_APPLICATION_ID)
          AZCOPY_E2E_CLIENT_SECRET: $(AZCOPY_SPA_CLIENT_SECRET)
          AZCOPY_E2E_CLASSIC_ACCOUNT_NAME: $(AZCOPY_E2E_CLASSIC_ACCOUNT_NAME)
          AZCOPY_E2E_CLASSIC_ACCOUNT_KEY: $(AZCOPY_E2E_CLASSIC_ACCOUNT_KEY)
          AZCOPY_E2E_LOG_OUTPUT: '$(System.DefaultWorkingDirectory)/logs'
          AZCOPY_E2E_OAUTH_MANAGED_DISK_CONFIG: $(AZCOPY_E2E_OAUTH_MANAGED_DISK_CONFIG)
          AZCOPY_E2E_STD_MANAGED_DISK_CONFIG: $(AZCOPY_E2E_STD_MANAGED_DISK_CONFIG)
          CPK_ENCRYPTION_KEY: $(CPK_ENCRYPTION_KEY)
          CPK_ENCRYPTION_KEY_SHA256: $(CPK_ENCRYPTION_KEY_SHA256)
          AZCOPY_E2E_EXECUTABLE_PATH: $(System.DefaultWorkingDirectory)/$(build_name)
          GOCOVERDIR: $(System.DefaultWorkingDirectory)/coverage
        displayName: 'E2E Test $(display_name) - AMD64'

      - script: |
          ls
          ls coverage
          go tool covdata textfmt -i=coverage -o coverage.txt
          $(go env GOPATH)/bin/gocov convert coverage.txt > coverage.json
          $(go env GOPATH)/bin/gocov-xml < coverage.json > coverage.xml
        displayName: 'Coverage Conversion $(display_name) - AMD64'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish logs'
        condition: succeededOrFailed()
        inputs:
          pathToPublish: '$(System.DefaultWorkingDirectory)/logs'
          artifactName: logs

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
          testRunTitle: 'Go on $(display_name)'

      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
          additionalCodeCoverageFiles: $(System.DefaultWorkingDirectory)/**/coverage.html

#  - job: Test_On_Ubuntu
#    variables:
#      isMutexSet: 'false'
#    # allow maximum build time, in case we have build congestion
#    timeoutInMinutes: 360
#    pool:
#      vmImage: 'ubuntu-20.04'
#    steps:
#      - task: UsePythonVersion@0
#        name: 'Set_up_Python'
#        inputs:
#          versionSpec: '3.7'
#      - task: GoTool@0
#        name: 'Set_up_Golang'
#        inputs:
#          version: $(AZCOPY_GOLANG_VERSION)
#      - task: DownloadSecureFile@1
#        name: ciGCSServiceAccountKey
#        displayName: 'Download GCS Service Account Key'
#        inputs:
#          secureFile: 'ci-gcs-dev.json'
#      - script: |
#          pip install azure-storage-blob==12.12.0
#          # set the variable to indicate that the mutex is being acquired
#          # note: we set it before acquiring the mutex to ensure we release the mutex.
#          # setting this after can result in an un-broken mutex if someone cancels the pipeline after we acquire the
#          # mutex but before we set this variable.
#          # setting this before will always work since it is valid to break an un-acquired mutex.
#          echo '##vso[task.setvariable variable=isMutexSet]true'
#          # acquire the mutex before running live tests to avoid conflicts
#          python ./tool_distributed_mutex.py lock "$(MUTEX_URL)"
#        name: 'Acquire_the_distributed_mutex'
#      - script: |
#          # run unit test and build executable
#          # the set -e line is needed so that the unit tests failure would cause the job to fail properly
#          # "-check.v" (must be after package list) outputs timings
#          set -e
#          go test -timeout 60m -race -short -cover ./cmd ./common ./common/parallel ./ste ./azbfs ./sddl "-check.v"
#          GOARCH=amd64 GOOS=linux go build -o azcopy_linux_amd64
#        name: 'Run_unit_tests'
#        env:
#          ACCOUNT_NAME: $(ACCOUNT_NAME)
#          ACCOUNT_KEY: $(ACCOUNT_KEY)
#          AZCOPY_E2E_ACCOUNT_KEY: $(AZCOPY_E2E_ACCOUNT_KEY)
#          AZCOPY_E2E_ACCOUNT_NAME: $(AZCOPY_E2E_ACCOUNT_NAME)
#          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
#          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
#          GOOGLE_APPLICATION_CREDENTIALS: $(ciGCSServiceAccountKey.secureFilePath)
#          GOOGLE_CLOUD_PROJECT: $(GOOGLE_CLOUD_PROJECT)
#      - script: |
#          go build -o test-validator ./testSuite/
#          mkdir test-temp
#          export AZCOPY_EXECUTABLE_PATH=$(pwd)/azcopy_linux_amd64
#          export TEST_SUITE_EXECUTABLE_LOCATION=$(pwd)/test-validator
#          export TEST_DIRECTORY_PATH=$(pwd)/test-temp
#
#          keyctl session test python ./testSuite/scripts/run.py
#        name: 'Run_smoke_tests'
#        env:
#          ACCOUNT_NAME: $(ACCOUNT_NAME)
#          ACCOUNT_KEY: $(ACCOUNT_KEY)
#          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
#          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
#          GOOGLE_CLOUD_PROJECT: $(GOOGLE_CLOUD_PROJECT)
#          GOOGLE_APPLICATION_CREDENTIALS: $(ciGCSServiceAccountKey.secureFilePath)
#          ACTIVE_DIRECTORY_APPLICATION_ID: $(ACTIVE_DIRECTORY_APPLICATION_ID)
#          AZCOPY_SPA_CLIENT_SECRET: $(AZCOPY_SPA_CLIENT_SECRET)
#          CONTAINER_OAUTH_URL: $(CONTAINER_OAUTH_URL)
#          CONTAINER_OAUTH_VALIDATE_SAS_URL: $(CONTAINER_OAUTH_VALIDATE_SAS_URL)
#          CONTAINER_SAS_URL: $(CONTAINER_SAS_URL)
#          FILESYSTEM_SAS_URL: $(FILESYSTEM_SAS_URL)
#          FILESYSTEM_URL: $(FILESYSTEM_URL)
#          OAUTH_AAD_ENDPOINT: $(OAUTH_AAD_ENDPOINT)
#          OAUTH_TENANT_ID: $(OAUTH_TENANT_ID)
#          PREMIUM_CONTAINER_SAS_URL: $(PREMIUM_CONTAINER_SAS_URL)
#          S2S_DST_BLOB_ACCOUNT_SAS_URL: $(S2S_DST_BLOB_ACCOUNT_SAS_URL)
#          S2S_SRC_BLOB_ACCOUNT_SAS_URL: $(S2S_SRC_BLOB_ACCOUNT_SAS_URL)
#          S2S_SRC_FILE_ACCOUNT_SAS_URL: $(S2S_SRC_FILE_ACCOUNT_SAS_URL)
#          S2S_SRC_S3_SERVICE_URL: $(S2S_SRC_S3_SERVICE_URL)
#          S2S_SRC_GCP_SERVICE_URL: $(S2S_SRC_GCP_SERVICE_URL)
#          SHARE_SAS_URL: $(SHARE_SAS_URL)
#      - script: |
#          pip install azure-storage-blob==12.12.0
#          python ./tool_distributed_mutex.py unlock "$(MUTEX_URL)"
#        name: 'Release_the_distributed_mutex'
#        # this runs even if the job was canceled (only if the mutex was acquired by this job)
#        condition: and(always(), eq(variables['isMutexSet'], 'true'))
