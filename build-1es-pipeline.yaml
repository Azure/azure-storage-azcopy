variables:
  AZCOPY_GOLANG_VERSION: '1.21.8'

parameters:
  - name: publish_to_container
    displayName: 'Publish To Container'
    type: boolean
    default: false

  - name: publish_to_m1_container
    displayName: 'Publish To M1 Container'
    type: boolean
    default: false

# Do not trigger this pipeline automatically
trigger: none
pr: none

resources:
  repositories:
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      sourceAnalysisPool:
        name: azcopy-pool
        image: windows2022-1espt
        os: windows
    stages:
      - stage: AzCopyVersion
        jobs:
          - job: GetAzCopyVersion
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux
            steps:
              - checkout: self
                displayName: 'Checkout repository'

              - task: GoTool@0
                env:
                  GO111MODULE: 'on'
                inputs:
                  version: $(AZCOPY_GOLANG_VERSION)

              - script: |
                  go build -tags "netgo" -o azcopy
                displayName: 'Build AzCopy'

              - script: |
                  # Run azcopy --version and capture the output
                  azcopyOutput=$(./azcopy --version)

                  # Extract the version part
                  if echo "$azcopyOutput" | grep -q "azcopy version"; then
                    version=$(echo "$azcopyOutput" | sed -n 's/^azcopy version \([0-9]*\.[0-9]*\.[0-9]*[^ ]*\).*/\1/p')
                    if [[ -n "$version" ]]; then
                      echo "Extracted version: $version"
                      echo "##vso[task.setvariable variable=azcopy_version;isOutput=true]$version"
                    else
                      echo "Unable to extract version from azcopy output"
                      exit 1
                    fi
                  else
                    echo "azcopy version string not found in output"
                    exit 1
                  fi
                displayName: 'Verify and extract the generated build version'
                name: SetAzCopyVersion

      - stage: BuildArtifacts
        dependsOn: AzCopyVersion
        jobs:
          - job: Linux_Amd64
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/unsigned
                  artifactName: 'azcopy-linux-amd64-unsigned'
                  displayName: 'Upload Linux Amd64 Unsigned'
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  artifactName: 'azcopy-binaries-linux-amd64'
                  displayName: 'Upload Linux Amd64 Binaries'

            variables:
              - name: archives
                value: $(System.DefaultWorkingDirectory)/archives
              - name: unsigned
                value: $(System.DefaultWorkingDirectory)/unsigned
              - name: binaries
                value: $(System.DefaultWorkingDirectory)/binaries
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - template: azurePipelineTemplates/build1es/build_linux.yml@self
                parameters:
                  host_architecture: 'amd64'
                  host_suffix: 'x86_64'

          - job: Linux_Arm64
            timeoutInMinutes: 120
            pool:
              name: azcopy-arm-pool
              image: ubuntu22arm-custom1espt
              os: linux
              hostArchitecture: Arm64
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/unsigned
                  artifactName: 'azcopy-linux-arm64-unsigned'
                  displayName: 'Upload Linux Arm64 Unsigned'
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  artifactName: 'azcopy-binaries-linux-arm64'
                  displayName: 'Upload Linux Arm64 Binaries'

            variables:
              - name: archives
                value: $(System.DefaultWorkingDirectory)/archives
              - name: unsigned
                value: $(System.DefaultWorkingDirectory)/unsigned
              - name: binaries
                value: $(System.DefaultWorkingDirectory)/binaries
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - template: azurePipelineTemplates/build1es/build_linux.yml@self
                parameters:
                  host_architecture: 'arm64'
                  host_suffix: 'arm64'

          - job: Windows
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: windows2022-1espt
              os: windows
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)\binaries
                  artifactName: 'azcopy-windows-unsigned'
                  displayName: 'Upload Windows Unsigned'
            variables:
              - name: binaries
                value: '$(System.DefaultWorkingDirectory)\binaries'
            steps:
              - task: GoTool@0
                env:
                  GO111MODULE: 'on'
                inputs:
                  version: $(AZCOPY_GOLANG_VERSION)

              - script: |
                  go vet
                displayName: 'Golang Vet - Windows'

              - script: |
                  mkdir -p $(binaries)
                displayName: 'Create output path'

              - script: |
                  go build -o "$(binaries)\azcopy_windows_amd64.exe"
                displayName: 'Generate Windows AMD64'
                env:
                  GOARCH: amd64
                  GOOS: windows
                  CGO_ENABLED: 0

              - script: |
                  go build -o "$(binaries)\azcopy_windows_386.exe"
                displayName: 'Generate Windows i386'
                env:
                  GOARCH: 386
                  GOOS: windows
                  CGO_ENABLED: 0

              - script: |
                  go build -o "$(binaries)\azcopy_windows_v7_arm.exe"
                displayName: 'Generate Windows ARM'
                env:
                  GOARCH: arm
                  GOARM: 7
                  GOOS: windows
                  CGO_ENABLED: 0

              - script: |
                  go build -o "$(binaries)\azcopy_windows_arm64.exe"
                displayName: 'Generate Windows ARM'
                env:
                  GOARCH: arm64
                  GOOS: windows
                  CGO_ENABLED: 0

          - job: MacOS
            timeoutInMinutes: 360
            pool:
              name: Azure Pipelines
              image: macos-latest
              os: macOS
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/unsigned
                  artifactName: 'azcopy-mac-unsigned'
                  displayName: 'Upload Mac Unsigned'

            variables:
              - name: unsigned
                value: $(System.DefaultWorkingDirectory)/unsigned
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - task: GoTool@0
                env:
                  GO111MODULE: 'on'
                inputs:
                  version: $(AZCOPY_GOLANG_VERSION)

              - script: |
                  go vet
                displayName: 'Golang Vet - Mac'

              - script: |
                  CGO_ENABLED=1 go build -o "$(System.DefaultWorkingDirectory)/azcopy_darwin_amd64"
                displayName: 'Generate MacOS Build with AMD64'

              - script: |
                  GOARCH=arm64 CGO_ENABLED=1 go build -o "$(System.DefaultWorkingDirectory)/azcopy_darwin_arm64"
                displayName: 'Test Cross-compiled MacOS Build with ARM64'

              - script: |
                  darwin_amd_dir="$(System.DefaultWorkingDirectory)/azcopy_darwin_amd64_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=darwin_amd_dir]$darwin_amd_dir"

                  darwin_arm_dir="$(System.DefaultWorkingDirectory)/azcopy_darwin_arm64_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=darwin_arm_dir]$darwin_arm_dir"

                  mkdir -p $darwin_amd_dir
                  mkdir -p $darwin_arm_dir
                  mkdir -p $(unsigned)
                displayName: 'Create archive directories'

              - script: |
                  mv $(System.DefaultWorkingDirectory)/azcopy_darwin_amd64  $(darwin_amd_dir)/azcopy
                  cp NOTICE.txt $(darwin_amd_dir)

                  mv $(System.DefaultWorkingDirectory)/azcopy_darwin_arm64  $(darwin_arm_dir)/azcopy
                  cp NOTICE.txt $(darwin_arm_dir)
                displayName: 'Copy required files for packaging'

              - task: ArchiveFiles@2
                displayName: 'Archive MacOS AMD64 Build (must happen before signing/notarization)'
                inputs:
                  rootFolderOrFile: '$(darwin_amd_dir)'
                  archiveFile: '$(unsigned)/azcopy_darwin_amd64_$(azcopy_version).zip'

              - task: ArchiveFiles@2
                displayName: 'Archive MacOS ARM64 Build (must happen before signing/notarization)'
                inputs:
                  rootFolderOrFile: '$(darwin_arm_dir)'
                  archiveFile: '$(unsigned)/azcopy_darwin_arm64_$(azcopy_version).zip'

          - job: MacOS_M1
            timeoutInMinutes: 360
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/unsigned
                  artifactName: 'azcopy-mac-m1-unsigned'
                  displayName: 'Upload Mac M1 Unsigned'

            variables:
              - group: AZCOPY_TESTS_VAR
              - name: unsigned
                value: $(System.DefaultWorkingDirectory)/unsigned
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - task: GoTool@0
                env:
                  GO111MODULE: 'on'
                inputs:
                  version: $(AZCOPY_GOLANG_VERSION)

              - script: |
                  sudo apt-get clean
                  sudo apt-get update --fix-missing
                  sudo apt-get install -y zip unzip
                displayName: "Installing Dependencies"

              - script: |
                  go vet
                displayName: 'Golang Vet'

              - template: setup/trigger_m1_build.yml@self
                parameters:
                  download_path: '$(System.DefaultWorkingDirectory)'

              - script: |
                  mkdir -p $(unsigned)
                  darwin_arm64_m1_dir="$(System.DefaultWorkingDirectory)/azcopy_darwin_m1_arm64_$(azcopy_version)"

                  echo "##vso[task.setvariable variable=darwin_arm64_m1_dir]$darwin_arm64_m1_dir"
                  mkdir -p $darwin_arm64_m1_dir

                  cp $(System.DefaultWorkingDirectory)/azcopy  $darwin_arm64_m1_dir
                  cp NOTICE.txt $darwin_arm64_m1_dir
                displayName: 'Copy required files for packaging'

              - task: ArchiveFiles@2
                displayName: 'Archive MacOS M1_ARM64 Build (must happen before signing/notarization)'
                inputs:
                  rootFolderOrFile: '$(darwin_arm64_m1_dir)'
                  archiveFile: '$(unsigned)/azcopy_darwin_m1_arm64_$(azcopy_version).zip'

        # BuildArtifacts end here

      - stage: SignArtifacts
        dependsOn: BuildArtifacts
        condition: succeeded('BuildArtifacts')
        jobs:
          - job: Linux
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux

            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-linux-amd64-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/amd64
                  displayName: 'Download Linux Amd64 Unsigned'
                - input: pipelineArtifact
                  artifactName: azcopy-linux-arm64-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/arm64
                  displayName: 'Download Linux Arm64 Unsigned'
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  artifactName: 'azcopy-linux-signed'
                  displayName: 'Upload Linux Signed'

            variables:
              - group: AZCOPY_SECRET_VAULT
              - name: amd64
                value: $(System.DefaultWorkingDirectory)/amd64
              - name: arm64
                value: $(System.DefaultWorkingDirectory)/arm64
              - name: mariner
                value: $(System.DefaultWorkingDirectory)/mariner
              - name: signed
                value: $(System.DefaultWorkingDirectory)/signed

            steps:
              - checkout: none

              - script: |
                  sudo apt-get clean
                  sudo apt-get update
                  sudo apt-get upgrade -y
                  sudo apt-get install -f --fix-missing
                  wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
                  sudo dpkg -i packages-microsoft-prod.deb
                  sudo apt install apt-transport-https -y
                  sudo apt install dotnet-sdk-6.0 -y
                displayName: "Update dependencies"

              - script: |
                  mkdir -p $(mariner)
                  chmod 755 $(mariner)
                  cp $(amd64)/*x86_64.rpm $(mariner)
                  cp $(arm64)/*arm64.rpm $(mariner)
                displayName: 'Copy artifacts for Mariner'

              - template: setup/esrp_sign_linux.yml@self
                parameters:
                  FolderPath: $(amd64)
                  ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_KEY_CODE)
                  Pattern: '*.rpm, *.deb'
                  DisplayName: 'ESRP CodeSigning azcopy linux amd64'

              - template: setup/esrp_sign_linux.yml@self
                parameters:
                  FolderPath: $(arm64)
                  ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_KEY_CODE)
                  Pattern: '*.rpm, *.deb'
                  DisplayName: 'ESRP CodeSigning azcopy linux arm64'

              - template: setup/esrp_sign_linux.yml@self
                parameters:
                  FolderPath: $(mariner)
                  ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_MARINER_KEY_CODE)
                  Pattern: '*.rpm, *.deb'
                  DisplayName: 'ESRP CodeSigning azcopy mariner'

              - script: |
                  mkdir -p $(signed)
                  mkdir -p $(signed)/mariner
                  
                  chmod 755 $(amd64)/*
                  rm -rf $(amd64)/*.md 
                  mv $(amd64)/* $(signed)
                  
                  chmod 755 $(arm64)/*
                  rm -rf $(arm64)/*.md
                  mv $(arm64)/* $(signed)
                  
                  chmod 755 $(mariner)/*
                  rm -rf $(mariner)/*.md
                  mv $(mariner)/* $(signed)/mariner
                displayName: 'Make Artifacts executable'

          - job: Windows
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux

            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-windows-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/windows
                  displayName: 'Download Windows Unsigned'
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  artifactName: 'azcopy-windows-signed'
                  displayName: 'Upload Windows Signed'
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  artifactName: 'azcopy-binaries-windows'
                  displayName: 'Upload Windows Binaries'

            variables:
              - group: AZCOPY_SECRET_VAULT
              - name: windows
                value: '$(System.DefaultWorkingDirectory)/windows'
              - name: signed
                value: '$(System.DefaultWorkingDirectory)/signed'
              - name: binaries
                value: '$(System.DefaultWorkingDirectory)/binaries'
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - script: |
                  sudo apt-get clean
                  sudo apt-get update
                  sudo apt-get upgrade -y
                  sudo apt-get install -f --fix-missing
                  wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
                  sudo dpkg -i packages-microsoft-prod.deb
                  sudo apt install apt-transport-https -y
                  sudo apt install dotnet-sdk-6.0 -y
                  sudo apt-get install -y zip
                displayName: "Update dependencies"

              - template: setup/esrp_sign_windows.yml@self
                parameters:
                  FolderPath: $(windows)
                  ESRP_AZCOPY_WIN_KEY_CODE: $(ESRP_AZCOPY_WIN_KEY_CODE)
                  Pattern: 'azcopy_windows*'

              - script: |
                  mkdir -p $(binaries)
                  mkdir -p $(signed)
                  
                  chmod 755 $(windows)/*
                  rm -rf $(windows)/*.md
                displayName: 'Make Artifacts executable'

              - script: |
                  windows_amd64="$(System.DefaultWorkingDirectory)/azcopy_windows_amd64_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=windows_amd64]$windows_amd64"

                  windows_arm64="$(System.DefaultWorkingDirectory)/azcopy_windows_arm64_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=windows_arm64]$windows_arm64"

                  windows_386="$(System.DefaultWorkingDirectory)/azcopy_windows_386_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=windows_386]$windows_386"

                  mkdir -p $windows_amd64
                  mkdir -p $windows_arm64
                  mkdir -p $windows_386
                displayName: 'Create required directories'

              - script: |
                  cp $(windows)/* $(System.DefaultWorkingDirectory)/binaries
                  rm -rf $(windows)/azcopy_windows_v7_arm.exe
                  
                  mv $(windows)/azcopy_windows_amd64.exe $(windows_amd64)/azcopy.exe
                  cp NOTICE.txt $(windows_amd64)
                  
                  mv $(windows)/azcopy_windows_arm64.exe $(windows_arm64)/azcopy.exe
                  cp NOTICE.txt $(windows_arm64)
                  
                  mv $(windows)/azcopy_windows_386.exe $(windows_386)/azcopy.exe
                  cp NOTICE.txt $(windows_386)
                displayName: 'Copy required files'

              - task: ArchiveFiles@2
                displayName: 'Archive Windows 64 bit AMD Build'
                inputs:
                  rootFolderOrFile: '$(windows_amd64)'
                  archiveFile: '$(signed)/azcopy_windows_amd64_$(azcopy_version).zip'

              - task: ArchiveFiles@2
                displayName: 'Archive Windows 64 bit ARM Build'
                inputs:
                  rootFolderOrFile: '$(windows_arm64)'
                  archiveFile: '$(signed)/azcopy_windows_arm64_$(azcopy_version).zip'

              - task: ArchiveFiles@2
                displayName: 'Archive Windows 32 bit Build'
                inputs:
                  rootFolderOrFile: '$(windows_386)'
                  archiveFile: '$(signed)/azcopy_windows_386_$(azcopy_version).zip'

          - job: Mac
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux

            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-mac-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/mac
                  displayName: 'Download Mac Unsigned'
                - input: pipelineArtifact
                  artifactName: azcopy-mac-m1-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/mac-m1
                  displayName: 'Download Mac M1 Unsigned'
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  artifactName: 'azcopy-mac-signed'
                  displayName: 'Upload Mac Signed'
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  artifactName: 'azcopy-binaries-mac'
                  displayName: 'Upload Mac Binaries'

            variables:
              - group: AZCOPY_SECRET_VAULT
              - name: mac
                value: '$(System.DefaultWorkingDirectory)/mac'
              - name: mac-m1
                value: '$(System.DefaultWorkingDirectory)/mac-m1'
              - name: signed
                value: '$(System.DefaultWorkingDirectory)/signed'
              - name: binaries
                value: '$(System.DefaultWorkingDirectory)/binaries'

            steps:
              - checkout: none

              - script: |
                  sudo apt-get clean
                  sudo apt-get update
                  sudo apt-get upgrade -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -f --fix-missing
                  wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
                  sudo dpkg -i packages-microsoft-prod.deb
                  sudo apt install apt-transport-https -y
                  sudo apt install dotnet-sdk-6.0 -y
                displayName: "Update dependencies"

              - template: setup/esrp_sign_notarize_macos.yml@self
                parameters:
                  FolderPath: $(mac)
                  ESRP_AZCOPY_MAC_KEY_CODE: $(ESRP_AZCOPY_MAC_KEY_CODE)
                  Pattern: '*.zip'

              - template: setup/esrp_sign_notarize_macos.yml@self
                parameters:
                  FolderPath: $(mac-m1)
                  ESRP_AZCOPY_MAC_KEY_CODE: $(ESRP_AZCOPY_MAC_KEY_CODE)
                  Pattern: '*.zip'

              # Validate signed images have md5sum changed
              - script: |
                  mkdir -p $(binaries)
                  mkdir -p $(signed)
                  
                  chmod 755 $(mac)/*
                  rm -rf $(mac)/*.md
                  
                  chmod 755 $(mac-m1)/*
                  rm -rf $(mac-m1)/*.md
                displayName: 'Make Artifacts executable'

              - script: |
                  mv $(mac)/azcopy* $(signed)/
                  mv $(mac-m1)/azcopy* $(signed)/
                displayName: 'Copy required files'

              - script: |
                  mkdir -p unzipped_amd64
                  unzip -o $(signed)/azcopy*amd64*.zip -d unzipped_amd64
                  # Use find to retrieve the folder name
                  amd64FolderName=$(find unzipped_amd64 -maxdepth 1 -type d -name "azcopy_darwin_amd64*")
                  echo "AMD64 Folder name: $amd64FolderName"
                  # Check if there is exactly one matching directory for amd64
                  if [ $(echo "$amd64FolderName" | wc -l) -eq 1 ]; then
                      echo "Found matching AMD64 directory: $amd64FolderName"
                      mv $amd64FolderName/azcopy $(binaries)/azcopy_darwin_amd64
                  else
                      echo "Error: Expected exactly one matching AMD64 directory, found $(echo "$amd64FolderName" | wc -l)."
                      exit 1
                  fi
                  
                  mkdir -p unzipped_arm64
                  unzip -o $(signed)/azcopy_darwin_arm64*.zip -d unzipped_arm64
                  arm64FolderName=$(find unzipped_arm64 -maxdepth 1 -type d -name "azcopy_darwin_arm64*")
                  echo "ARM64 Folder name: $arm64FolderName"
                  # Check if there is exactly one matching directory for arm64
                  if [ $(echo "$arm64FolderName" | wc -l) -eq 1 ]; then
                      echo "Found matching ARM64 directory: $arm64FolderName"
                      mv $arm64FolderName/azcopy $(binaries)/azcopy_darwin_arm64
                  else
                      echo "Error: Expected exactly one matching ARM64 directory, found $(echo "$arm64FolderName" | wc -l)."
                      exit 1
                  fi

                  mkdir -p unzipped_m1_arm64
                  unzip -o $(signed)/azcopy_darwin_m1_arm64*.zip -d unzipped_m1_arm64
                  m1Arm64FolderName=$(find unzipped_m1_arm64 -maxdepth 1 -type d -name "azcopy_darwin_m1_arm64*")
                  echo "ARM64 M1 Folder name: $m1Arm64FolderName"
                  # Check if there is exactly one matching directory for arm64
                  if [ $(echo "$m1Arm64FolderName" | wc -l) -eq 1 ]; then
                      echo "Found matching ARM64 M1 directory: $m1Arm64FolderName"
                      mv $m1Arm64FolderName/azcopy $(binaries)/azcopy_darwin_m1_arm64
                  else
                      echo "Error: Expected exactly one matching ARM64 M1 directory, found $(echo "$m1Arm64FolderName" | wc -l)."
                      exit 1
                  fi
                displayName:  'Copy signed mac binaries'

      # SignArtifacts end here

      - stage: VerifyArtifacts
        dependsOn: SignArtifacts
        condition: succeeded('SignArtifacts')
        jobs:
          - job: Ubuntu_Amd64
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux

            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-binaries-linux-amd64
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  displayName: 'Download Linux Amd64 Binaries'
                - input: pipelineArtifact
                  artifactName: azcopy-linux-signed
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  displayName: 'Download Linux Signed'
            variables:
              - name: signed
                value: '$(System.DefaultWorkingDirectory)/signed'
              - name: binaries
                value: '$(System.DefaultWorkingDirectory)/binaries'
              - name: extracted
                value: '$(System.DefaultWorkingDirectory)/extracted'
            steps:
              - template: azurePipelineTemplates/build1es/verify_linux.yml@self
                parameters:
                  host_architecture: 'amd64'
                  host_suffix: 'x86_64'

          - job: Ubuntu_Arm64
            timeoutInMinutes: 120
            pool:
              name: azcopy-arm-pool
              image: ubuntu22arm-custom1espt
              os: linux
              hostArchitecture: Arm64
            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-binaries-linux-arm64
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  displayName: 'Download Linux Arm64 Binaries'
                - input: pipelineArtifact
                  artifactName: azcopy-linux-signed
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  displayName: 'Download Linux Signed'
            variables:
              - name: signed
                value: '$(System.DefaultWorkingDirectory)/signed'
              - name: binaries
                value: '$(System.DefaultWorkingDirectory)/binaries'
              - name: extracted
                value: '$(System.DefaultWorkingDirectory)/extracted'
            steps:
              - template: azurePipelineTemplates/build1es/verify_linux.yml@self
                parameters:
                  host_architecture: 'arm64'
                  host_suffix: 'arm64'

          - job: Mariner_Amd64
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: mariner2-1espt
              os: linux
            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-linux-signed
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  item_pattern: 'mariner/azcopy-*x86_64.rpm'
                  displayName: 'Download Linux Signed'
            variables:
              - name: signed
                value: '$(System.DefaultWorkingDirectory)/signed/mariner'
            steps:
              - checkout: none

              - script: |
                  sudo rpm -qip $(signed)/azcopy*x86_64.rpm
                  sudo rpm -i $(signed)/azcopy*x86_64.rpm
                  azcopy --version
                displayName: 'Verify rpm'

          - job: MacOS
            timeoutInMinutes: 120
            pool:
              name: Azure Pipelines
              image: macos-latest
              os: macOS
            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-mac-signed
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  itemPattern: 'azcopy*amd64*.zip'
                  displayName: 'Download Mac Signed'

            variables:
              - name: signed
                value: '$(System.DefaultWorkingDirectory)/signed'
              - name: extracted
                value: '$(System.DefaultWorkingDirectory)/extracted'

            steps:
              - checkout: none

              - script: |
                  mkdir -p $(extracted)
                displayName: 'Create extracted path'

              - task: ExtractFiles@1
                inputs:
                  archiveFilePatterns: '$(signed)/azcopy*amd64*.zip'
                  destinationFolder: $(extracted)

              - script: |
                  $(extracted)/azcopy*amd64*/azcopy --version
                displayName: 'Verify binary in zip'

          - job: Windows_Amd64
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: windows2022-1espt
              os: windows
            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-windows-signed
                  targetPath: $(System.DefaultWorkingDirectory)\signed
                  itemPattern: 'azcopy*amd64*.zip'
                  displayName: 'Download Windows Signed'

            variables:
              - name: signed
                value: '$(System.DefaultWorkingDirectory)\signed'
              - name: extracted
                value: '$(System.DefaultWorkingDirectory)\extracted'

            steps:
              - checkout: none

              - script: |
                  mkdir -p $(extracted)
                displayName: 'Create extracted path'

              - task: ExtractFiles@1
                inputs:
                  archiveFilePatterns: '$(signed)\azcopy*amd64*.zip'
                  destinationFolder: $(extracted)

              - script: |
                  cd $(extracted)\azcopy*amd64*
                  azcopy.exe --version
                displayName: 'Verify exe in zip'

          - job: Windows_Arm64
            timeoutInMinutes: 120
            pool:
              name: azcopy-arm-pool
              image: windows2022arm-1espt
              os: windows
              hostArchitecture: Arm64
            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-windows-signed
                  targetPath: $(System.DefaultWorkingDirectory)\signed
                  itemPattern: 'azcopy*arm64*.zip'
                  displayName: 'Download Windows Signed'

            variables:
              - name: signed
                value: '$(System.DefaultWorkingDirectory)\signed'
              - name: extracted
                value: '$(System.DefaultWorkingDirectory)\extracted'

            steps:
              - checkout: none

              - script: |
                  mkdir -p $(extracted)
                displayName: 'Create extracted path'

              - task: ExtractFiles@1
                inputs:
                  archiveFilePatterns: '$(signed)\azcopy*arm64*.zip'
                  destinationFolder: $(extracted)

              - script: |
                  cd $(extracted)\azcopy*arm64*
                  azcopy.exe --version
                displayName: 'Verify exe in zip'

      - stage: ReleaseToContainer
        jobs:
          - job: ReleaseToContainer
            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-linux-signed
                  targetPath: $(System.DefaultWorkingDirectory)/azcopy-linux-signed
                  displayName: "Download Linux Signed"
                - input: pipelineArtifact
                  artifactName: azcopy-windows-signed
                  targetPath: $(System.DefaultWorkingDirectory)/azcopy-windows-signed
                  displayName: "Download Windows Signed"
                - input: pipelineArtifact
                  artifactName: azcopy-mac-signed
                  targetPath: $(System.DefaultWorkingDirectory)/azcopy-mac-signed
                  displayName: "Download Mac Signed"
                - input: pipelineArtifact
                  artifactName: azcopy-binaries-linux-amd64
                  targetPath: $(System.DefaultWorkingDirectory)/azcopy-binaries-linux-amd64
                  displayName: "Download Linux AMD64 Binaries"
                - input: pipelineArtifact
                  artifactName: azcopy-binaries-linux-arm64
                  targetPath: $(System.DefaultWorkingDirectory)/azcopy-binaries-linux-arm64
                  displayName: "Download Linux ARM64 Binaries"
                - input: pipelineArtifact
                  artifactName: azcopy-binaries-windows
                  targetPath: $(System.DefaultWorkingDirectory)/azcopy-binaries-windows
                  displayName: "Download Windows Binaries"
                - input: pipelineArtifact
                  artifactName: azcopy-binaries-mac
                  targetPath: $(System.DefaultWorkingDirectory)/azcopy-binaries-mac
                  displayName: "Download Mac Binaries"
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux
            variables:
              - name: test_release_account_name
                value: 'azcopyprivatedrops'
              - name: release_account_name
                value: 'azcopyvnextrelease'
              - name: publish_container
                value: ${{ parameters.publish_to_container }}
              - name: publish_m1_container
                value: ${{ parameters.publish_to_m1_container }}
              - name: input_path
                value: $(System.DefaultWorkingDirectory)
              - name: drop
                value: $(System.DefaultWorkingDirectory)/drop
              - name: release
                value: $(System.DefaultWorkingDirectory)/release
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - checkout: self
                displayName: 'Checkout repository'
              - script: |
                  sudo apt-get install build-essential -y
                  rm -rf /usr/local/bin/azcopy
                  rm -rf /usr/bin/azcopy
                  sudo dpkg -i $(input_path)/azcopy-linux-signed/azcopy-*x86_64.deb
                displayName: 'Install azcopy'
              - script : |
                  mkdir -p $(release)
                  rm -rf $(input_path)/azcopy-linux-signed/mariner
                  cp $(input_path)/azcopy-linux-signed/* $(release)
                  cp $(input_path)/azcopy-windows-signed/* $(release)
                  cp $(input_path)/azcopy-mac-signed/* $(release)
                displayName: 'Prepare release folder'
              - script : |
                  mkdir -p $(drop)
                  cp $(input_path)/azcopy-binaries-linux-amd64/* $(drop)
                  cp $(input_path)/azcopy-binaries-linux-arm64/* $(drop)
                  cp $(input_path)/azcopy-binaries-windows/* $(drop)
                  cp $(input_path)/azcopy-binaries-mac/* $(drop)
                  cp $(System.DefaultWorkingDirectory)/NOTICE.txt $(drop)
                displayName: 'Prepare drop.zip folder'

              - task: ArchiveFiles@2
                displayName: 'Archive drop.zip'
                inputs:
                  rootFolderOrFile: '$(drop)'
                  archiveFile: '$(release)/drop.zip'

              - task: AzureCLI@2
                displayName: 'Azure CLI'
                inputs:
                  azureSubscription: 'ESRP KeyVault identity'
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    today=$(date +"%Y%m%d")
                    
                    if [ $(publish_container) = "True" ]; then
                      container_url="https://$(release_account_name).blob.core.windows.net/%24web/releases/release-$(azcopy_version)-$today"
                    else
                      container_url="https://$(test_release_account_name).blob.core.windows.net/%24web/releases/release-$(azcopy_version)-$today"
                    fi
                    echo "Artifacts will be uploaded to: $container_url"
                    
                    # Upload the archived builds
                    AZCOPY_AUTO_LOGIN_TYPE=AzCLI azcopy cp "$(release)/*" "$container_url" --recursive --put-md5=true
                    
                    if [ $(publish_m1_container) = "True" ]; then
                      m1_container_url="https://$(release_account_name).blob.core.windows.net/%24web/azcopy-m1-drops/azcopy-$(azcopy_version)-$today"
                      AZCOPY_AUTO_LOGIN_TYPE=AzCLI azcopy cp "$(input_path)/azcopy-binaries-mac/azcopy_darwin_m1_arm64" "$m1_container_url" --put-md5=true
                    fi