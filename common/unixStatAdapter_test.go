package common

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/stretchr/testify/assert"
	"testing"
	"time"
)

func Test_ReadStatFromMetadata(t *testing.T) {
	a := assert.New(t)

	metadata := make(Metadata)
	metadata["linux_statx_mask"] = to.Ptr("8191")
	metadata["linux_attribute"] = to.Ptr("0")
	metadata["linux_attribute_mask"] = to.Ptr("3160180")
	metadata["linux_btime"] = to.Ptr("1702376209077248285")
	metadata["posix_nlink"] = to.Ptr("1")
	metadata["posix_owner"] = to.Ptr("1000")
	metadata["posix_group"] = to.Ptr("1000")
	metadata["permissions"] = to.Ptr("33257")
	metadata["posix_ino"] = to.Ptr("258058")
	metadata["posix_dev"] = to.Ptr("2049")
	metadata["posix_atime"] = to.Ptr("1702478036104313337")
	metadata["modtime"] = to.Ptr("1702376209109248073")
	metadata["posix_ctime"] = to.Ptr("1702376216773153924")

	statAdapter, err := ReadStatFromMetadata(metadata, 1024)
	a.Nil(err)
	a.NotNil(statAdapter)
	a.True(statAdapter.Extended())
	a.Equal(uint32(8191), statAdapter.StatxMask())
	a.Zero(statAdapter.Attribute())
	a.Equal(uint64(3160180), statAdapter.AttributeMask())
	a.Equal(time.Unix(0, int64(1702376209077248285)), statAdapter.BTime())
	a.Equal(uint64(1), statAdapter.NLink())
	a.Equal(uint32(1000), statAdapter.Owner())
	a.Equal(uint32(1000), statAdapter.Group())
	a.Equal(uint32(33257), statAdapter.FileMode())
	a.Equal(uint64(258058), statAdapter.INode())
	a.Equal(uint64(2049), statAdapter.Device())
	a.Equal(time.Unix(0, int64(1702478036104313337)), statAdapter.ATime())
	a.Equal(time.Unix(0, int64(1702376209109248073)), statAdapter.MTime())
	a.Equal(time.Unix(0, int64(1702376216773153924)), statAdapter.CTime())

	metadata = make(Metadata)
	metadata["Linux_statx_mask"] = to.Ptr("8191")
	metadata["Linux_attribute"] = to.Ptr("0")
	metadata["Linux_attribute_mask"] = to.Ptr("3160180")
	metadata["Linux_btime"] = to.Ptr("1702376209077248285")
	metadata["Posix_nlink"] = to.Ptr("1")
	metadata["Posix_owner"] = to.Ptr("1000")
	metadata["Posix_group"] = to.Ptr("1000")
	metadata["Permissions"] = to.Ptr("33257")
	metadata["Posix_ino"] = to.Ptr("258058")
	metadata["Posix_dev"] = to.Ptr("2049")
	metadata["Posix_atime"] = to.Ptr("1702478036104313337")
	metadata["Modtime"] = to.Ptr("1702376209109248073")
	metadata["Posix_ctime"] = to.Ptr("1702376216773153924")

	statAdapter, err = ReadStatFromMetadata(metadata, 1024)
	a.Nil(err)
	a.NotNil(statAdapter)
	a.True(statAdapter.Extended())
	a.Equal(uint32(8191), statAdapter.StatxMask())
	a.Zero(statAdapter.Attribute())
	a.Equal(uint64(3160180), statAdapter.AttributeMask())
	a.Equal(time.Unix(0, int64(1702376209077248285)), statAdapter.BTime())
	a.Equal(uint64(1), statAdapter.NLink())
	a.Equal(uint32(1000), statAdapter.Owner())
	a.Equal(uint32(1000), statAdapter.Group())
	a.Equal(uint32(33257), statAdapter.FileMode())
	a.Equal(uint64(258058), statAdapter.INode())
	a.Equal(uint64(2049), statAdapter.Device())
	a.Equal(time.Unix(0, int64(1702478036104313337)), statAdapter.ATime())
	a.Equal(time.Unix(0, int64(1702376209109248073)), statAdapter.MTime())
	a.Equal(time.Unix(0, int64(1702376216773153924)), statAdapter.CTime())
}

func Test_AddStatToBlobMetadata(t *testing.T) {
	a := assert.New(t)

	statAdapter := UnixStatContainer{size: uint64(1024)}
	statAdapter.statx = true
	statAdapter.mask = uint32(8191)
	statAdapter.attributes = uint64(0)
	statAdapter.numLinks = uint64(1)
	statAdapter.ownerUID = uint32(1000)
	statAdapter.groupGID = uint32(1000)
	statAdapter.mode = uint32(33257)
	statAdapter.iNode = uint64(258058)
	statAdapter.attributesMask = uint64(3160180)
	statAdapter.accessTime = time.Unix(0, int64(1702478036104313337))
	statAdapter.birthTime = time.Unix(0, int64(1702376209077248285))
	statAdapter.changeTime = time.Unix(0, int64(1702376216773153924))
	statAdapter.modTime = time.Unix(0, int64(1702376209109248073))
	statAdapter.devID = uint64(2049)

	metadata := make(Metadata)
	AddStatToBlobMetadata(statAdapter, metadata)
	a.NotEmpty(metadata)
	a.Contains(metadata, "linux_statx_mask")
	a.Equal("8191", *metadata["linux_statx_mask"])
	a.Contains(metadata, "linux_attribute")
	a.Equal("0", *metadata["linux_attribute"])
	a.Contains(metadata, "linux_attribute_mask")
	a.Equal("3160180", *metadata["linux_attribute_mask"])
	a.Contains(metadata, "linux_btime")
	a.Equal("1702376209077248285", *metadata["linux_btime"])
	a.Contains(metadata, "posix_nlink")
	a.Equal("1", *metadata["posix_nlink"])
	a.Contains(metadata, "posix_owner")
	a.Equal("1000", *metadata["posix_owner"])
	a.Contains(metadata, "posix_group")
	a.Equal("1000", *metadata["posix_group"])
	a.Contains(metadata, "permissions")
	a.Equal("33257", *metadata["permissions"])
	a.Contains(metadata, "posix_ino")
	a.Equal("258058", *metadata["posix_ino"])
	a.Contains(metadata, "posix_dev")
	a.Equal("2049", *metadata["posix_dev"])
	a.Contains(metadata, "posix_atime")
	a.Equal("1702478036104313337", *metadata["posix_atime"])
	a.Contains(metadata, "modtime")
	a.Equal("1702376209109248073", *metadata["modtime"])
	a.Contains(metadata, "posix_ctime")
	a.Equal("1702376216773153924", *metadata["posix_ctime"])

	metadata = make(Metadata)
	metadata["Linux_statx_mask"] = to.Ptr("8191")
	metadata["Linux_attribute"] = to.Ptr("0")
	metadata["Linux_attribute_mask"] = to.Ptr("3160180")
	metadata["Linux_btime"] = to.Ptr("1702376209077248285")
	metadata["Posix_nlink"] = to.Ptr("1")
	metadata["Posix_owner"] = to.Ptr("1000")
	metadata["Posix_group"] = to.Ptr("1000")
	metadata["Permissions"] = to.Ptr("33257")
	metadata["Posix_ino"] = to.Ptr("258058")
	metadata["Posix_dev"] = to.Ptr("2049")
	metadata["Posix_atime"] = to.Ptr("1702478036104313337")
	metadata["Modtime"] = to.Ptr("1702376209109248073")
	metadata["Posix_ctime"] = to.Ptr("1702376216773153924")
	AddStatToBlobMetadata(statAdapter, metadata)
	a.NotEmpty(metadata)
	a.Contains(metadata, "Linux_statx_mask")
	a.Equal("8191", *metadata["Linux_statx_mask"])
	a.Contains(metadata, "Linux_attribute")
	a.Equal("0", *metadata["Linux_attribute"])
	a.Contains(metadata, "Linux_attribute_mask")
	a.Equal("3160180", *metadata["Linux_attribute_mask"])
	a.Contains(metadata, "Linux_btime")
	a.Equal("1702376209077248285", *metadata["Linux_btime"])
	a.Contains(metadata, "Posix_nlink")
	a.Equal("1", *metadata["Posix_nlink"])
	a.Contains(metadata, "Posix_owner")
	a.Equal("1000", *metadata["Posix_owner"])
	a.Contains(metadata, "Posix_group")
	a.Equal("1000", *metadata["Posix_group"])
	a.Contains(metadata, "Permissions")
	a.Equal("33257", *metadata["Permissions"])
	a.Contains(metadata, "Posix_ino")
	a.Equal("258058", *metadata["Posix_ino"])
	a.Contains(metadata, "Posix_dev")
	a.Equal("2049", *metadata["Posix_dev"])
	a.Contains(metadata, "Posix_atime")
	a.Equal("1702478036104313337", *metadata["Posix_atime"])
	a.Contains(metadata, "Modtime")
	a.Equal("1702376209109248073", *metadata["Modtime"])
	a.Contains(metadata, "Posix_ctime")
	a.Equal("1702376216773153924", *metadata["Posix_ctime"])
}

func TestAddReadStatMetadata(t *testing.T) {
	a := assert.New(t)

	statAdapter := UnixStatContainer{size: uint64(1024)}
	statAdapter.statx = true
	statAdapter.mask = uint32(8191)
	statAdapter.attributes = uint64(0)
	statAdapter.numLinks = uint64(1)
	statAdapter.ownerUID = uint32(1000)
	statAdapter.groupGID = uint32(1000)
	statAdapter.mode = uint32(33257)
	statAdapter.iNode = uint64(258058)
	statAdapter.attributesMask = uint64(3160180)
	statAdapter.accessTime = time.Unix(0, int64(1702478036104313337))
	statAdapter.birthTime = time.Unix(0, int64(1702376209077248285))
	statAdapter.changeTime = time.Unix(0, int64(1702376216773153924))
	statAdapter.modTime = time.Unix(0, int64(1702376209109248073))
	statAdapter.devID = uint64(2049)

	metadata := make(Metadata)
	AddStatToBlobMetadata(statAdapter, metadata)

	adapter, err := ReadStatFromMetadata(metadata, 1024)
	a.Nil(err)
	a.NotNil(adapter)
	a.True(adapter.Extended())
	a.Equal(uint32(8191), adapter.StatxMask())
	a.Zero(adapter.Attribute())
	a.Equal(uint64(3160180), adapter.AttributeMask())
	a.Equal(time.Unix(0, int64(1702376209077248285)), adapter.BTime())
	a.Equal(uint64(1), adapter.NLink())
	a.Equal(uint32(1000), adapter.Owner())
	a.Equal(uint32(1000), adapter.Group())
	a.Equal(uint32(33257), adapter.FileMode())
	a.Equal(uint64(258058), adapter.INode())
	a.Equal(uint64(2049), adapter.Device())
	a.Equal(time.Unix(0, int64(1702478036104313337)), adapter.ATime())
	a.Equal(time.Unix(0, int64(1702376209109248073)), adapter.MTime())
	a.Equal(time.Unix(0, int64(1702376216773153924)), adapter.CTime())
}
