variables:
  AZCOPY_GOLANG_VERSION: '1.23.1'

# Do not trigger this pipeline automatically
trigger: none
pr: none

# The `resources` specify the location and version of the 1ES PT.
resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      sourceAnalysisPool:
        name: azcopy-pool  # Name of your hosted pool
        image: windows2022-1espt
        os: windows  # OS of the image. Allowed values: windows, linux, macOS

    stages:
    - stage: BuildArtifacts
      jobs:
      - job: BuildLinux
        pool:
          name: azcopy-pool
          image: ubuntu22-1espt
          os: linux
        # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
        # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(System.DefaultWorkingDirectory)
            artifactName: artifactName
        # Define the steps that the pipeline will run.
        # In most cases, copy and paste the steps from the original pipeline.
        steps:
        - script: |
            echo 'Hello World'
          displayName: 'Hello World'

      - job: BuildWindows
        pool:
          name: azcopy-pool
          image: windows2022-1espt
          os: windows
        # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
        # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(System.DefaultWorkingDirectory)/binaries
            artifactName: 'azCopy-windows-temp'

        variables:
          - name: binaries
            value: '$(System.DefaultWorkingDirectory)/binaries'
        # Define the steps that the pipeline will run.
        # In most cases, copy and paste the steps from the original pipeline.
        steps:
        - task: GoTool@0
          env:
            GO111MODULE: 'on'
          inputs:
            version: $(AZCOPY_GOLANG_VERSION)

        - script: |
            go vet 
          displayName: 'Go Vet'

        - script: |
            mkdir "$(binaries)"
          displayName: 'Create Required Directories for Packaging'

        - script: |
            go build -o "$(binaries)\azcopy_windows_amd64.exe"
          displayName: 'Build AzCopy for Windows AMD64'
          env:
            GOARCH: amd64
            GOOS: windows
            CGO_ENABLED: 0

        - script: |
            go build -o "$(binaries)\azcopy_windows_386.exe"
          displayName: 'Build AzCopy for Windows i386'
          env:
            GOARCH: "386"
            GOOS: windows
            CGO_ENABLED: 0

        - script: |
            go build -o "$(binaries)\azcopy_windows_v7_arm.exe"
          displayName: 'Build AzCopy for Windows ARM v7'
          env:
            GOARCH: arm
            GOARM: 7
            GOOS: windows
            CGO_ENABLED: 0

        - script: |
            go build -o "$(binaries)\azcopy_windows_arm64.exe"
          displayName: 'Build AzCopy for Windows ARM64'
          env:
            GOARCH: arm64
            GOOS: windows
            CGO_ENABLED: 0

      - job: BuildMacOS
        pool:
          name: Azure Pipelines
          image: macos-latest
          os: macOS
        # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
        # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(System.DefaultWorkingDirectory)/archives
            artifactName: 'azCopy-mac-temp'
        # Define the steps that the pipeline will run.
        # In most cases, copy and paste the steps from the original pipeline.
        variables:
          - group: AZCOPY_TESTS_VAR
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'
          - name: archives
            value: $(root_dir)/archives
        steps:
        - task: GoTool@0
          env:
            GO111MODULE: 'on'
          inputs:
            version: $(AZCOPY_GOLANG_VERSION)

        - script: |
            set -ex
            go vet 
            CGO_ENABLED=1 go build -o "$(root_dir)/azcopy_darwin_amd64"
            GOARCH=arm64 CGO_ENABLED=1 go build -o "$(root_dir)/azcopy_darwin_arm64" 
          displayName: 'Build AzCopy for MacOS'

        - task: Bash@3
          displayName: 'Extract AzCopy Version'
          inputs:
            targetType: 'inline'
            script: |
              azcopy_version=$($(root_dir)/azcopy_darwin_amd64 --version | awk '{print $3}')
              echo "##vso[task.setvariable variable=azcopy_version]$azcopy_version"

        - template: setup/trigger_m1_build.yml@self
          
        - script: |
            set -ex
            darwin_amd_dir="$(work_dir)/azcopy_darwin_amd64_$(azcopy_version)"
            echo "##vso[task.setvariable variable=darwin_amd_dir]$darwin_amd_dir"
            darwin_arm_dir="$(work_dir)/azcopy_darwin_arm64_$(azcopy_version)"
            echo "##vso[task.setvariable variable=darwin_arm_dir]$darwin_arm_dir"  
            darwin_arm64_m1_dir="$(work_dir)/azcopy_darwin_m1_arm64_$(azcopy_version)"  
            echo "##vso[task.setvariable variable=darwin_arm64_m1_dir]$darwin_arm64_m1_dir"
            mkdir -p $darwin_amd_dir
            mkdir -p $darwin_arm_dir
            mkdir -p $darwin_arm64_m1_dir
            mkdir -p $(archives)
          displayName: 'Create Required Directories for Packaging'

        - script: |
            set -ex
            ls -lah $(root_dir)
            pwd
            cp NOTICE.txt $(darwin_amd_dir)
            cp NOTICE.txt $(darwin_arm_dir)
            cp NOTICE.txt $(darwin_arm64_m1_dir)
            mv $(root_dir)/azcopy_darwin_amd64  $(darwin_amd_dir)/azcopy
            mv $(root_dir)/azcopy_darwin_arm64  $(darwin_arm_dir)/azcopy
            cp $(Build.ArtifactStagingDirectory)/azcopy  $(darwin_arm64_m1_dir)/azcopy
          displayName: 'Copy Files for Packaging'

        - task: ArchiveFiles@2
          displayName: 'Archive MacOS AMD64 Build (must happen before signing/notarization)'
          inputs:
            rootFolderOrFile: '$(darwin_amd_dir)'
            archiveFile: '$(archives)/azcopy_darwin_amd64_$(azcopy_version).zip'

        - task: ArchiveFiles@2
          displayName: 'Archive MacOS ARM64 Build (must happen before signing/notarization)'
          inputs:
            rootFolderOrFile: '$(darwin_arm_dir)'
            archiveFile: '$(archives)/azcopy_darwin_arm64_$(azcopy_version).zip'
        
        - task: ArchiveFiles@2
          displayName: 'Archive MacOS M1_ARM64 Build (must happen before signing/notarization)'
          inputs:
            rootFolderOrFile: '$(darwin_arm64_m1_dir)'
            archiveFile: '$(archives)/azcopy_darwin_m1_arm64_$(azcopy_version).zip'