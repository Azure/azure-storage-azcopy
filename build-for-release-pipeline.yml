variables:
  AZCOPY_GOLANG_VERSION: '1.21.8'

# Do not trigger this pipeline automatically
trigger: none
pr: none

resources:
  repositories:
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      sourceAnalysisPool:
        name: azcopy-pool  # Name of your hosted pool
        image: windows2022-1espt
        os: windows  # OS of the image. Allowed values: windows, linux, macOS
    stages:
      - stage: AzCopyVersion
        jobs:
          - job: GetAzCopyVersion
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux
            # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
            # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/releasehelper
                  artifactName: 'azcopy-releasehelper'
                  displayName: 'Upload Release Helper Files'
            variables:
              - name: output_path
                value: '$(System.DefaultWorkingDirectory)/releasehelper'
            steps:
              - checkout: self
                displayName: 'Checkout repository'

              - task: GoTool@0
                env:
                  GO111MODULE: 'on'
                inputs:
                  version: $(AZCOPY_GOLANG_VERSION)

              - script: |
                  go build -tags "netgo" -o azcopy
                displayName: 'Build AzCopy'

              - script: |
                  # Run azcopy --version and capture the output
                  azcopyOutput=$(./azcopy --version)

                  # Extract the version part
                  if echo "$azcopyOutput" | grep -q "azcopy version"; then
                    version=$(echo "$azcopyOutput" | sed -n 's/^azcopy version \([0-9]*\.[0-9]*\.[0-9]*[^ ]*\).*/\1/p')
                    if [[ -n "$version" ]]; then
                      echo "Extracted version: $version"
                      echo "##vso[task.setvariable variable=azcopy_version;isOutput=true]$version"
                    else
                      echo "Unable to extract version from azcopy output"
                      exit 1
                    fi
                  else
                    echo "azcopy version string not found in output"
                    exit 1
                  fi
                displayName: 'Verify and extract the generated build version'
                name: SetAzCopyVersion

              - script: |
                  mkdir -p $(output_path)
                  cp docker/Dockerfile* $(output_path)
                  echo $(azcopy_version) > $(output_path)/azcopy_version.txt
                displayName: 'Release Helper Files'

      - stage: BuildArtifacts
        dependsOn: AzCopyVersion
        jobs:
          - job: Linux_Amd64
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/unsigned
                  artifactName: 'azcopy-linux-amd64-unsigned'
                  displayName: 'Upload Linux Amd64 Unsigned'
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  artifactName: 'azcopy-binaries-linux-amd64'
                  displayName: 'Upload Linux Amd64 Binaries'

            variables:
              - name: archives
                value: $(System.DefaultWorkingDirectory)/archives
              - name: unsigned
                value: $(System.DefaultWorkingDirectory)/unsigned
              - name: binaries
                value: $(System.DefaultWorkingDirectory)/binaries
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - template: azurePipelineTemplates/build1es/build_linux.yml@self
                parameters:
                  host_architecture: 'amd64'
                  host_suffix: 'x86_64'

          - job: Linux_Arm64
            timeoutInMinutes: 120
            pool:
              name: azcopy-arm-pool
              image: ubuntu22arm-custom1espt
              os: linux
              hostArchitecture: Arm64
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/unsigned
                  artifactName: 'azcopy-linux-arm64-unsigned'
                  displayName: 'Upload Linux Arm64 Unsigned'
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  artifactName: 'azcopy-binaries-linux-arm64'
                  displayName: 'Upload Linux Arm64 Binaries'

            variables:
              - name: archives
                value: $(System.DefaultWorkingDirectory)/archives
              - name: unsigned
                value: $(System.DefaultWorkingDirectory)/unsigned
              - name: binaries
                value: $(System.DefaultWorkingDirectory)/binaries
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - template: azurePipelineTemplates/build1es/build_linux.yml@self
                parameters:
                  host_architecture: 'arm64'
                  host_suffix: 'arm64'

          - job: Windows
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: windows2022-1espt
              os: windows
            # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
            # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)\binaries
                  artifactName: 'azcopy-windows-unsigned'
                  displayName: 'Upload Windows Unsigned'
            variables:
              - name: binaries
                value: '$(System.DefaultWorkingDirectory)\binaries'
            steps:
              - task: GoTool@0
                env:
                  GO111MODULE: 'on'
                inputs:
                  version: $(AZCOPY_GOLANG_VERSION)

              - script: |
                  go vet
                displayName: 'Golang Vet - Windows'

              - script: |
                  mkdir -p $(binaries)
                displayName: 'Create output path'

              - script: |
                  go build -o "$(binaries)\azcopy_windows_amd64.exe"
                displayName: 'Generate Windows AMD64'
                env:
                  GOARCH: amd64
                  GOOS: windows
                  CGO_ENABLED: 0

              - script: |
                  go build -o "$(binaries)\azcopy_windows_386.exe"
                displayName: 'Generate Windows i386'
                env:
                  GOARCH: 386
                  GOOS: windows
                  CGO_ENABLED: 0

              - script: |
                  go build -o "$(binaries)\azcopy_windows_v7_arm.exe"
                displayName: 'Generate Windows ARM'
                env:
                  GOARCH: arm
                  GOARM: 7
                  GOOS: windows
                  CGO_ENABLED: 0

              - script: |
                  go build -o "$(binaries)\azcopy_windows_arm64.exe"
                displayName: 'Generate Windows ARM'
                env:
                  GOARCH: arm64
                  GOOS: windows
                  CGO_ENABLED: 0

          - job: MacOS
            timeoutInMinutes: 360
            pool:
              name: Azure Pipelines
              image: macos-latest
              os: macOS
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/unsigned
                  artifactName: 'azcopy-mac-unsigned'
                  displayName: 'Upload Mac Unsigned'

            variables:
              - name: unsigned
                value: $(System.DefaultWorkingDirectory)/unsigned
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - task: GoTool@0
                env:
                  GO111MODULE: 'on'
                inputs:
                  version: $(AZCOPY_GOLANG_VERSION)

              - script: |
                  go vet
                displayName: 'Golang Vet - Mac'

              - script: |
                  CGO_ENABLED=1 go build -o "$(System.DefaultWorkingDirectory)/azcopy_darwin_amd64"
                displayName: 'Generate MacOS Build with AMD64'

              - script: |
                  GOARCH=arm64 CGO_ENABLED=1 go build -o "$(System.DefaultWorkingDirectory)/azcopy_darwin_arm64"
                displayName: 'Test Cross-compiled MacOS Build with ARM64'

              - script: |
                  darwin_amd_dir="$(System.DefaultWorkingDirectory)/azcopy_darwin_amd64_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=darwin_amd_dir]$darwin_amd_dir"

                  darwin_arm_dir="$(System.DefaultWorkingDirectory)/azcopy_darwin_arm64_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=darwin_arm_dir]$darwin_arm_dir"

                  mkdir -p $darwin_amd_dir
                  mkdir -p $darwin_arm_dir
                  mkdir -p $(unsigned)
                displayName: 'Create archive directories'

              - script: |
                  mv $(System.DefaultWorkingDirectory)/azcopy_darwin_amd64  $(darwin_amd_dir)/azcopy
                  cp NOTICE.txt $(darwin_amd_dir)

                  mv $(System.DefaultWorkingDirectory)/azcopy_darwin_arm64  $(darwin_arm_dir)/azcopy
                  cp NOTICE.txt $(darwin_arm_dir)
                displayName: 'Copy required files for packaging'

              - task: ArchiveFiles@2
                displayName: 'Archive MacOS AMD64 Build (must happen before signing/notarization)'
                inputs:
                  rootFolderOrFile: '$(darwin_amd_dir)'
                  archiveFile: '$(unsigned)/azcopy_darwin_amd64_$(azcopy_version).zip'

              - task: ArchiveFiles@2
                displayName: 'Archive MacOS ARM64 Build (must happen before signing/notarization)'
                inputs:
                  rootFolderOrFile: '$(darwin_arm_dir)'
                  archiveFile: '$(unsigned)/azcopy_darwin_arm64_$(azcopy_version).zip'

          - job: MacOS_M1
            timeoutInMinutes: 360
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/unsigned
                  artifactName: 'azcopy-mac-m1-unsigned'
                  displayName: 'Upload Mac M1 Unsigned'

            variables:
              - group: AZCOPY_TESTS_VAR
              - name: unsigned
                value: $(System.DefaultWorkingDirectory)/unsigned
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - task: GoTool@0
                env:
                  GO111MODULE: 'on'
                inputs:
                  version: $(AZCOPY_GOLANG_VERSION)

              - script: |
                  sudo apt-get clean
                  sudo apt-get update --fix-missing
                  sudo apt-get install -y zip unzip
                displayName: "Installing Dependencies"

              - script: |
                  go vet
                displayName: 'Golang Vet'

              - template: setup/trigger_m1_build.yml@self
                parameters:
                  download_path: '$(System.DefaultWorkingDirectory)'

              - script: |
                  mkdir -p $(unsigned)
                  darwin_arm64_m1_dir="$(System.DefaultWorkingDirectory)/azcopy_darwin_m1_arm64_$(azcopy_version)"

                  echo "##vso[task.setvariable variable=darwin_arm64_m1_dir]$darwin_arm64_m1_dir"
                  mkdir -p $darwin_arm64_m1_dir

                  cp $(System.DefaultWorkingDirectory)/azcopy  $darwin_arm64_m1_dir
                  cp NOTICE.txt $darwin_arm64_m1_dir
                displayName: 'Copy required files for packaging'

              - task: ArchiveFiles@2
                displayName: 'Archive MacOS M1_ARM64 Build (must happen before signing/notarization)'
                inputs:
                  rootFolderOrFile: '$(darwin_arm64_m1_dir)'
                  archiveFile: '$(unsigned)/azcopy_darwin_m1_arm64_$(azcopy_version).zip'

        # BuildArtifacts end here

      - stage: SignArtifacts
        dependsOn: BuildArtifacts
        condition: succeeded('BuildArtifacts')
        jobs:
          - job: Linux
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux

            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-linux-amd64-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/amd64
                  displayName: 'Download Linux Amd64 Unsigned'
                - input: pipelineArtifact
                  artifactName: azcopy-linux-arm64-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/arm64
                  displayName: 'Download Linux Arm64 Unsigned'
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  artifactName: 'azcopy-linux-signed'
                  displayName: 'Upload Linux Signed'

            variables:
              - group: AZCOPY_SECRET_VAULT
              - name: amd64
                value: $(System.DefaultWorkingDirectory)/amd64
              - name: arm64
                value: $(System.DefaultWorkingDirectory)/arm64
              - name: mariner
                value: $(System.DefaultWorkingDirectory)/mariner
              - name: signed
                value: $(System.DefaultWorkingDirectory)/signed

            steps:
              - checkout: none

              - script: |
                  sudo apt-get clean
                  sudo apt-get update
                  sudo apt-get upgrade -y
                  sudo apt-get install -f --fix-missing
                  wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
                  sudo dpkg -i packages-microsoft-prod.deb
                  sudo apt install apt-transport-https -y
                  sudo apt install dotnet-sdk-6.0 -y
                displayName: "Update dependencies"

              - script: |
                  mkdir -p $(mariner)
                  chmod 755 $(mariner)
                  cp $(amd64)/*x86_64.rpm $(mariner)
                  cp $(arm64)/*arm64.rpm $(mariner)
                displayName: 'Copy artifacts for Mariner'

              - template: setup/esrp_sign_linux.yml@self
                parameters:
                  FolderPath: $(amd64)
                  ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_KEY_CODE)
                  Pattern: '*.rpm, *.deb'
                  DisplayName: 'ESRP CodeSigning azcopy linux amd64'

              - template: setup/esrp_sign_linux.yml@self
                parameters:
                  FolderPath: $(arm64)
                  ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_KEY_CODE)
                  Pattern: '*.rpm, *.deb'
                  DisplayName: 'ESRP CodeSigning azcopy linux arm64'

              - template: setup/esrp_sign_linux.yml@self
                parameters:
                  FolderPath: $(mariner)
                  ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_MARINER_KEY_CODE)
                  Pattern: '*.rpm, *.deb'
                  DisplayName: 'ESRP CodeSigning azcopy mariner'

              - script: |
                  mkdir -p $(signed)
                  mkdir -p $(signed)/mariner
                  
                  chmod 755 $(amd64)/*
                  rm -rf $(amd64)/*.md 
                  mv $(amd64)/* $(signed)
                  
                  chmod 755 $(arm64)/*
                  rm -rf $(amd64)/*.md
                  mv $(arm64)/* $(signed)
                  
                  chmod 755 $(mariner)/*
                  rm -rf $(mariner)/*.md
                  mv $(mariner)/* $(signed)/mariner
                displayName: 'Make Artifacts executable'

          - job: Windows
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux

            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-windows-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/windows
                  displayName: 'Download Windows Unsigned'
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  artifactName: 'azcopy-windows-signed'
                  displayName: 'Upload Windows Signed'
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  artifactName: 'azcopy-binaries-windows'
                  displayName: 'Upload Windows Binaries'

            variables:
              - group: AZCOPY_SECRET_VAULT
              - name: windows
                value: '$(System.DefaultWorkingDirectory)/windows'
              - name: signed
                value: '$(System.DefaultWorkingDirectory)/signed'
              - name: binaries
                value: '$(System.DefaultWorkingDirectory)/binaries'
              - name: azcopy_version
                value: $[ stageDependencies.AzCopyVersion.GetAzCopyVersion.outputs['SetAzCopyVersion.azcopy_version'] ]

            steps:
              - script: |
                  sudo apt-get clean
                  sudo apt-get update
                  sudo apt-get upgrade -y
                  sudo apt-get install -f --fix-missing
                  wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
                  sudo dpkg -i packages-microsoft-prod.deb
                  sudo apt install apt-transport-https -y
                  sudo apt install dotnet-sdk-6.0 -y
                  sudo apt-get install -y zip
                displayName: "Update dependencies"

              - template: setup/esrp_sign_windows.yml@self
                parameters:
                  FolderPath: $(windows)
                  ESRP_AZCOPY_WIN_KEY_CODE: $(ESRP_AZCOPY_WIN_KEY_CODE)
                  Pattern: 'azcopy_windows*'

              - script: |
                  mkdir -p $(binaries)
                  mkdir -p $(signed)
                  
                  chmod 755 $(windows)/*
                  rm -rf $(windows)/*.md
                displayName: 'Make Artifacts executable'

              - script: |
                  windows_amd64="$(System.DefaultWorkingDirectory)/azcopy_windows_amd64_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=windows_amd64]$windows_amd64"

                  windows_arm64="$(System.DefaultWorkingDirectory)/azcopy_windows_arm64_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=windows_arm64]$windows_arm64"

                  windows_386="$(System.DefaultWorkingDirectory)/azcopy_windows_386_$(azcopy_version)"
                  echo "##vso[task.setvariable variable=windows_386]$windows_386"

                  mkdir -p $windows_amd64
                  mkdir -p $windows_arm64
                  mkdir -p $windows_386
                displayName: 'Create required directories'

              - script: |
                  cp $(windows)/* $(System.DefaultWorkingDirectory)/binaries
                  rm -rf $(windows)/azcopy_windows_v7_arm.exe
                  
                  mv $(windows)/azcopy_windows_amd64.exe $(windows_amd64)/azcopy.exe
                  cp NOTICE.txt $(windows_amd64)
                  
                  mv $(windows)/azcopy_windows_arm64.exe $(windows_arm64)/azcopy.exe
                  cp NOTICE.txt $(windows_arm64)
                  
                  mv $(windows)/azcopy_windows_386.exe $(windows_386)/azcopy.exe
                  cp NOTICE.txt $(windows_386)
                displayName: 'Copy required files'

              - task: ArchiveFiles@2
                displayName: 'Archive Windows 64 bit AMD Build'
                inputs:
                  rootFolderOrFile: '$(windows_amd64)'
                  archiveFile: '$(signed)/azcopy_windows_amd64_$(azcopy_version).zip'

              - task: ArchiveFiles@2
                displayName: 'Archive Windows 64 bit ARM Build'
                inputs:
                  rootFolderOrFile: '$(windows_arm64)'
                  archiveFile: '$(signed)/azcopy_windows_arm64_$(azcopy_version).zip'

              - task: ArchiveFiles@2
                displayName: 'Archive Windows 32 bit Build'
                inputs:
                  rootFolderOrFile: '$(windows_386)'
                  archiveFile: '$(signed)/azcopy_windows_386_$(azcopy_version).zip'

          - job: Mac
            timeoutInMinutes: 120
            pool:
              name: azcopy-pool
              image: ubuntu22-1espt
              os: linux

            templateContext:
              inputs:
                - input: pipelineArtifact
                  artifactName: azcopy-mac-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/mac
                  displayName: 'Download Mac Unsigned'
                - input: pipelineArtifact
                  artifactName: azcopy-mac-m1-unsigned
                  targetPath: $(System.DefaultWorkingDirectory)/mac-m1
                  displayName: 'Download Mac M1 Unsigned'
              outputs:
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/signed
                  artifactName: 'azcopy-mac-signed'
                  displayName: 'Upload Mac Signed'
                - output: pipelineArtifact
                  targetPath: $(System.DefaultWorkingDirectory)/binaries
                  artifactName: 'azcopy-binaries-mac'
                  displayName: 'Upload Mac Binaries'

            variables:
              - group: AZCOPY_SECRET_VAULT
              - name: mac
                value: '$(System.DefaultWorkingDirectory)/mac'
              - name: mac-m1
                value: '$(System.DefaultWorkingDirectory)/mac-m1'
              - name: signed
                value: '$(System.DefaultWorkingDirectory)/signed'
              - name: binaries
                value: '$(System.DefaultWorkingDirectory)/binaries'

            steps:
              - checkout: none

              - script: |
                  sudo apt-get clean
                  sudo apt-get update
                  sudo apt-get upgrade -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -f --fix-missing
                  wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
                  sudo dpkg -i packages-microsoft-prod.deb
                  sudo apt install apt-transport-https -y
                  sudo apt install dotnet-sdk-6.0 -y
                displayName: "Update dependencies"

              - template: setup/esrp_sign_notarize_macos.yml@self
                parameters:
                  FolderPath: $(mac)
                  ESRP_AZCOPY_MAC_KEY_CODE: $(ESRP_AZCOPY_MAC_KEY_CODE)
                  Pattern: '*.zip'

              - template: setup/esrp_sign_notarize_macos.yml@self
                parameters:
                  FolderPath: $(mac-m1)
                  ESRP_AZCOPY_MAC_KEY_CODE: $(ESRP_AZCOPY_MAC_KEY_CODE)
                  Pattern: '*.zip'

              # Validate signed images have md5sum changed
              - script: |
                  mkdir -p $(binaries)
                  mkdir -p $(signed)
                  
                  chmod 755 $(mac)/*
                  rm -rf $(mac)/*.md
                  
                  chmod 755 $(mac-m1)/*
                  rm -rf $(mac-m1)/*.md
                displayName: 'Make Artifacts executable'

              - script: |
                  mv $(mac)/* $(signed)/
                  mv $(mac-m1)/* $(signed)/
                displayName: 'Copy required files'

              - script: |
                  mkdir -p unzipped_amd64
                  unzip -o $(signed)/azcopy*amd64*.zip -d unzipped_amd64
                  # Use find to retrieve the folder name
                  amd64FolderName=$(find unzipped_amd64 -maxdepth 1 -type d -name "azcopy_darwin_amd64*")
                  echo "AMD64 Folder name: $amd64FolderName"
                  # Check if there is exactly one matching directory for amd64
                  if [ $(echo "$amd64FolderName" | wc -l) -eq 1 ]; then
                      echo "Found matching AMD64 directory: $amd64FolderName"
                      mv $amd64FolderName/azcopy $(binaries)/azcopy_darwin_amd64
                  else
                      echo "Error: Expected exactly one matching AMD64 directory, found $(echo "$amd64FolderName" | wc -l)."
                      exit 1
                  fi
                  
                  mkdir -p unzipped_arm64
                  unzip -o $(signed)/azcopy_darwin_arm64*.zip -d unzipped_arm64
                  arm64FolderName=$(find unzipped_arm64 -maxdepth 1 -type d -name "azcopy_darwin_arm64*")
                  echo "ARM64 Folder name: $arm64FolderName"
                  # Check if there is exactly one matching directory for arm64
                  if [ $(echo "$arm64FolderName" | wc -l) -eq 1 ]; then
                      echo "Found matching ARM64 directory: $arm64FolderName"
                      mv $arm64FolderName/azcopy $(binaries)/azcopy_darwin_arm64
                  else
                      echo "Error: Expected exactly one matching ARM64 directory, found $(echo "$arm64FolderName" | wc -l)."
                      exit 1
                  fi

                  mkdir -p unzipped_m1_arm64
                  unzip -o $(signed)/azcopy_darwin_m1_arm64*.zip -d unzipped_m1_arm64
                  m1Arm64FolderName=$(find unzipped_m1_arm64 -maxdepth 1 -type d -name "azcopy_darwin_m1_arm64*")
                  echo "ARM64 M1 Folder name: $m1Arm64FolderName"
                  # Check if there is exactly one matching directory for arm64
                  if [ $(echo "$m1Arm64FolderName" | wc -l) -eq 1 ]; then
                      echo "Found matching ARM64 M1 directory: $m1Arm64FolderName"
                      mv $m1Arm64FolderName/azcopy $(binaries)/azcopy_darwin_m1_arm64
                  else
                      echo "Error: Expected exactly one matching ARM64 M1 directory, found $(echo "$m1Arm64FolderName" | wc -l)."
                      exit 1
                  fi
                displayName:  'Copy signed mac binaries'

      # SignArtifacts end here
#
#      - stage: TestArtifacts
#        dependsOn: SignArtifacts
#        condition: succeeded('SignArtifacts')
#        jobs:
#          - job: Set_1
#            timeoutInMinutes: 120
#            pool:
#              name: azcopy-pool
#              image: ubuntu22-1espt
#              os: linux
#            steps:
#              - checkout: none
#
#              - template: setup/test_artifacts.yml@self
#                parameters:
#                  artifact_name: 'azCopy-binaries-linux-amd64'
#                  download_path: '$(System.DefaultWorkingDirectory)/azCopy-binaries'
#                  item_pattern: 'azcopy_linux*amd64'
#
#              - script: |
#                  ls -ltR $(System.DefaultWorkingDirectory)/azCopy-binaries/
#                  chmod 755 $(System.DefaultWorkingDirectory)/azCopy-binaries/*
#                  $(System.DefaultWorkingDirectory)/azCopy-binaries/azcopy_linux_amd64 --version
#                  $(System.DefaultWorkingDirectory)/azCopy-binaries/azcopy_linux_se_amd64 --version
#                  rm -rf /usr/local/bin/azcopy
#                  rm -rf /usr/bin/azcopy
#                displayName: 'Test signed linux binaries'
#
#              - task: DownloadPipelineArtifact@2
#                displayName: 'Download Build Artifacts'
#                inputs:
#                  artifactName: 'azCopy-linux-signed'
#                  downloadPath: '$(System.DefaultWorkingDirectory)/azCopy-linux-signed'
#                  itemPattern: 'azcopy-*x86_64.deb'
#
#              - script: |
#                  sudo dpkg --info azcopy-*x86_64.deb
#                  sudo dpkg -i azcopy-*x86_64.deb
#                  sudo apt-get install build-essential -y
#                displayName: 'Install deb Package'
#                workingDirectory: $(System.DefaultWorkingDirectory)/azCopy-linux-signed
#
#              - script: |
#                  azcopy --version
#                  azcopy --help
#                displayName: 'Check Version and Help'
#
#          - job: Set_2
#            timeoutInMinutes: 120
#            pool:
#              name: azcopy-pool
#              image: ubuntu22-1espt
#              os: linux
#            steps:
#              - checkout: none
#
#              - template: setup/test_artifacts.yml@self
#                parameters:
#                  artifact_name: 'azCopy-linux-signed'
#                  download_path: '$(System.DefaultWorkingDirectory)/azCopy-linux-signed'
#                  item_pattern: 'azcopy_linux_*amd64*.tar.gz'
#
#              - script: |
#                  TAR_GZ_FILE=$(ls azcopy_linux_amd64*.tar.gz)
#                  EXTRACT_DIR="$(Build.ArtifactStagingDirectory)/extracted"
#
#                  # Create extraction directory
#                  mkdir -p "$EXTRACT_DIR"
#
#                  # Extract the .tar.gz file
#                  tar -xzvf "$TAR_GZ_FILE" -C "$EXTRACT_DIR"
#                  if [ $? -ne 0 ]; then
#                      echo "Error: Failed to extract $TAR_GZ_FILE"
#                      exit 1
#                  fi
#
#                  # Find the directory matching the pattern
#                  matching_dirs=("$EXTRACT_DIR"/azcopy_linux_amd64*)
#
#                  # Check if there is exactly one matching directory
#                  if [ ${#matching_dirs[@]} -eq 1 ]; then
#                      echo "Found matching directory: ${matching_dirs[0]}"
#                      cd "${matching_dirs[0]}"
#                  else
#                      echo "Error: Expected exactly one matching directory, found ${#matching_dirs[@]}."
#                      exit 1
#                  fi
#
#                  # Run azcopy commands
#                  ./azcopy --version
#                  ./azcopy --help
#                displayName: 'Check Version and Help'
#                workingDirectory: $(System.DefaultWorkingDirectory)/azCopy-linux-signed
#
#              - script: |
#                  sudo apt-get clean
#                  sudo apt-get update --fix-missing
#                  sudo apt-get install libsecret-1-dev -y
#                displayName: "Installing Dependencies"
#
#              - script: |
#                  TAR_GZ_FILE=$(ls azcopy_linux_se_amd64*.tar.gz)
#                  EXTRACT_DIR="$(Build.ArtifactStagingDirectory)/extracted_se"
#
#                  # Create extraction directory
#                  mkdir -p "$EXTRACT_DIR"
#
#                  # Extract the .tar.gz file
#                  tar -xzvf "$TAR_GZ_FILE" -C "$EXTRACT_DIR"
#                  if [ $? -ne 0 ]; then
#                      echo "Error: Failed to extract $TAR_GZ_FILE"
#                      exit 1
#                  fi
#
#                  # Find the directory matching the pattern
#                  matching_dirs=("$EXTRACT_DIR"/azcopy_linux_se_amd64*)
#
#                  # Check if there is exactly one matching directory
#                  if [ ${#matching_dirs[@]} -eq 1 ]; then
#                      echo "Found matching directory: ${matching_dirs[0]}"
#                      cd "${matching_dirs[0]}"
#                  else
#                      echo "Error: Expected exactly one matching directory, found ${#matching_dirs[@]}."
#                      exit 1
#                  fi
#
#                  # Run azcopy commands
#                  ./azcopy --version
#                  ./azcopy --help
#                displayName: 'Check Version and Help'
#                workingDirectory: $(System.DefaultWorkingDirectory)/azCopy-linux-signed
#
#          - job: Set_3
#            timeoutInMinutes: 120
#            pool:
#              name: azcopy-arm-pool
#              image: ubuntu22arm-custom1espt
#              os: linux
#              hostArchitecture: Arm64
#            steps:
#              - checkout: none
#
#              - script: |
#                  sudo apt update
#                  sudo apt-get install libsecret-1-dev -y
#                  sudo apt --fix-broken install
#                  ldd --version
#                displayName: "Libsecret Install"
#
#              - template: setup/test_artifacts.yml@self
#                parameters:
#                  artifact_name: 'azCopy-linux-signed'
#                  download_path: '$(System.DefaultWorkingDirectory)/azCopy-linux-signed'
#                  item_pattern: 'azcopy_linux_*arm64*.tar.gz'
#
#              - script: |
#                  TAR_GZ_FILE=$(ls azcopy_linux_arm64*.tar.gz)
#                  EXTRACT_DIR="$(Build.ArtifactStagingDirectory)/extracted"
#
#                  # Create extraction directory
#                  mkdir -p "$EXTRACT_DIR"
#
#                  # Extract the .tar.gz file
#                  tar -xzvf "$TAR_GZ_FILE" -C "$EXTRACT_DIR"
#                  if [ $? -ne 0 ]; then
#                      echo "Error: Failed to extract $TAR_GZ_FILE"
#                      exit 1
#                  fi
#
#                  # Find the directory matching the pattern
#                  matching_dirs=("$EXTRACT_DIR"/azcopy_linux_arm64*)
#
#                  # Check if there is exactly one matching directory
#                  if [ ${#matching_dirs[@]} -eq 1 ]; then
#                      echo "Found matching directory: ${matching_dirs[0]}"
#                      cd "${matching_dirs[0]}"
#                  else
#                      echo "Error: Expected exactly one matching directory, found ${#matching_dirs[@]}."
#                      exit 1
#                  fi
#
#                  # Run azcopy commands
#                  ./azcopy --version
#                  ./azcopy --help
#
#                displayName: 'Check Version and Help for arm64 tar.gz'
#                workingDirectory: $(System.DefaultWorkingDirectory)/azCopy-linux-signed
#
#              - script: |
#                  TAR_GZ_FILE=$(ls azcopy_linux_se_arm64*.tar.gz)
#                  EXTRACT_DIR="$(Build.ArtifactStagingDirectory)/extracted_se"
#
#                  # Create extraction directory
#                  mkdir -p "$EXTRACT_DIR"
#
#                  # Extract the .tar.gz file
#                  tar -xzvf "$TAR_GZ_FILE" -C "$EXTRACT_DIR"
#                  if [ $? -ne 0 ]; then
#                      echo "Error: Failed to extract $TAR_GZ_FILE"
#                      exit 1
#                  fi
#
#                  # Find the directory matching the pattern
#                  matching_dirs=("$EXTRACT_DIR"/azcopy_linux_se_arm64*)
#
#                  # Check if there is exactly one matching directory
#                  if [ ${#matching_dirs[@]} -eq 1 ]; then
#                      echo "Found matching directory: ${matching_dirs[0]}"
#                      cd "${matching_dirs[0]}"
#                  else
#                      echo "Error: Expected exactly one matching directory, found ${#matching_dirs[@]}."
#                      exit 1
#                  fi
#
#                  # Run azcopy commands
#                  ./azcopy --version
#                  ./azcopy --help
#
#                displayName: 'Check Version and Help for SE arm64 tar.gz'
#                workingDirectory: $(System.DefaultWorkingDirectory)/azCopy-linux-signed
#
#          - job: Set_4
#            timeoutInMinutes: 120
#            pool:
#              name: azcopy-arm-pool
#              image: ubuntu22arm-custom1espt
#              os: linux
#              hostArchitecture: Arm64
#
#            steps:
#              - checkout: none
#
#              - script: |
#                  sudo apt update
#                  sudo apt-get install libsecret-1-dev -y
#                  sudo apt --fix-broken install
#                  ldd --version
#                displayName: "Libsecret Install"
#
#              - template: setup/test_artifacts.yml@self
#                parameters:
#                  artifact_name: 'azCopy-binaries-linux-arm64'
#                  download_path: '$(System.DefaultWorkingDirectory)/azCopy-binaries'
#                  item_pattern: 'azcopy_linux*arm64'
#
#              - script: |
#                  ls -ltR $(System.DefaultWorkingDirectory)/azCopy-binaries
#                  chmod 755 $(System.DefaultWorkingDirectory)/azCopy-binaries/*
#                  $(System.DefaultWorkingDirectory)/azCopy-binaries/azcopy_linux_arm64 --version
#                  $(System.DefaultWorkingDirectory)/azCopy-binaries/azcopy_linux_se_arm64 --version
#                displayName: 'Test signed linux binaries'
#
#              - task: DownloadPipelineArtifact@2
#                displayName: 'Download Build Artifacts'
#                inputs:
#                  artifactName: 'azCopy-linux-signed'
#                  downloadPath: '$(System.DefaultWorkingDirectory)/azCopy-linux-signed'
#                  itemPattern: 'azcopy-*arm64.deb'
#
#              - script: |
#                  rm -rf /usr/bin/azcopy
#                  rm -rf /usr/local/bin/azcopy
#                  sudo dpkg --info azcopy-*arm64.deb
#                  sudo dpkg -i azcopy-*arm64.deb
#                displayName: 'Install Package'
#                workingDirectory: $(System.DefaultWorkingDirectory)/azCopy-linux-signed
#
#              - script: |
#                  azcopy --version
#                  azcopy --help
#                displayName: 'Check Version and Help'
#
#          - job: Set_5
#            timeoutInMinutes: 120
#            pool:
#              name: azcopy-pool
#              image: mariner2-1espt
#              os: linux
#            steps:
#              - checkout: none
#
#              - template: setup/test_artifacts.yml@self
#                parameters:
#                  artifact_name: 'azCopy-linux-signed'
#                  download_path: '$(System.DefaultWorkingDirectory)/azCopy-linux-signed'
#                  item_pattern: 'mariner/azcopy-*x86_64.rpm'
#
#              - script: |
#                  sudo rpm -qip azcopy*x86_64.rpm
#                  sudo rpm -i azcopy*x86_64.rpm
#                displayName: 'Install Package'
#                workingDirectory: $(System.DefaultWorkingDirectory)/azCopy-linux-signed/mariner
#
#              - script: |
#                  azcopy --version
#                  azcopy --help
#                displayName: 'Check Version and Help command'
#
#          - job: Set_6
#            timeoutInMinutes: 360
#            pool:
#              name: Azure Pipelines
#              image: macos-latest
#              os: macOS
#
#            variables:
#              - name: root_dir
#                value: '$(System.DefaultWorkingDirectory)'
#              - name: work_dir
#                value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'
#
#            steps:
#              - task: DownloadPipelineArtifact@2
#                displayName: 'Download Build Artifacts'
#                inputs:
#                  artifactName: 'azCopy-mac-signed'
#                  downloadPath: $(Build.ArtifactStagingDirectory)/azCopy-mac-signed
#                  itemPattern: 'azcopy*amd64*.zip'
#
#              - script: |
#                  # Install Homebrew if not already installed
#                  if ! command -v brew &> /dev/null
#                  then
#                    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#                    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/$(whoami)/.zprofile
#                    eval "$(/opt/homebrew/bin/brew shellenv)"
#                  fi
#
#                  # Define variables
#                  ZIP_FILE_PATH=$(ls $(Build.ArtifactStagingDirectory)/azCopy-mac-signed/azcopy*amd64*.zip)
#                  EXTRACT_DIR="$(Build.ArtifactStagingDirectory)/extracted"
#
#                  # Create extraction directory
#                  mkdir -p $EXTRACT_DIR
#
#                  # Extract the zip file
#                  unzip $ZIP_FILE_PATH -d $EXTRACT_DIR
#
#                  # Find the directory matching the pattern
#                  matching_dirs=($EXTRACT_DIR/azcopy_darwin_amd64*)
#
#                  # Check if there is exactly one matching directory
#                  if [ ${#matching_dirs[@]} -eq 1 ]; then
#                      cd "${matching_dirs[0]}"
#                  else
#                      echo "Error: Expected exactly one matching directory, found ${#matching_dirs[@]}."
#                      exit 1
#                  fi
#
#                  # Run the azcopy version command
#                  ./azcopy --version
#                  ./azcopy --help
#                displayName: 'Install Zip, Extract Files, and Run Version and Help Command'
#
#          - job: Set_7
#            timeoutInMinutes: 120
#            pool:
#              name: azcopy-pool
#              image: windows2022-1espt
#              os: windows
#
#            variables:
#              - name: root_dir
#                value: '$(System.DefaultWorkingDirectory)'
#
#            steps:
#              - task: DownloadPipelineArtifact@2
#                displayName: 'Download Build Artifacts'
#                inputs:
#                  artifactName: 'azCopy-windows-signed'
#                  downloadPath: $(Build.ArtifactStagingDirectory)/azCopy-windows-signed
#                  itemPattern: 'azcopy*amd64*.zip'
#
#              - task: PowerShell@2
#                inputs:
#                  targetType: 'inline'
#                  script: |
#                    $artifactDir = "$(Build.ArtifactStagingDirectory)\azCopy-windows-signed"
#                    $extractDir = "$(Build.ArtifactStagingDirectory)\extracted"
#
#                    # Find the zip file matching the pattern
#                    $zipFile = Get-ChildItem -Path $artifactDir -Filter "azcopy*amd64*.zip" | Select-Object -First 1
#
#                    if ($null -eq $zipFile) {
#                      Write-Error "No zip file found matching pattern 'azcopy*amd64*.zip' in directory: $artifactDir"
#                      exit 1
#                    }
#
#                    $zipFilePath = $zipFile.FullName
#
#                    # Create extraction directory
#                    New-Item -ItemType Directory -Path $extractDir -Force | Out-Null
#
#                    # Extract the zip file
#                    try {
#                      Add-Type -AssemblyName System.IO.Compression.FileSystem
#                      [System.IO.Compression.ZipFile]::ExtractToDirectory($zipFilePath, $extractDir)
#                    } catch {
#                      Write-Error "Failed to extract zip file: $_"
#                      exit 1
#                    }
#
#                    # Change to the directory containing azcopy
#                    Set-Location -Path $extractDir
#
#                    # Find directories matching the pattern
#                    $matchingDirs = Get-ChildItem -Directory -Path .\azcopy_windows_amd64* | Select-Object -First 1
#
#                    # Check if there is exactly one matching directory
#                    if ($matchingDirs.Count -eq 0) {
#                        Write-Error "No directories found matching the pattern: .\azcopy_windows_amd64*"
#                        exit 1
#                    } elseif ($matchingDirs.Count -gt 1) {
#                        Write-Error "Multiple directories found matching the pattern: .\azcopy_windows_amd64*"
#                        exit 1
#                    }
#
#                    # Check if the azcopy executable exists in the matching directory
#                    $azcopyPath = Join-Path -Path $matchingDirs.FullName -ChildPath "azcopy.exe"
#                    if (-Not (Test-Path -Path $azcopyPath)) {
#                        Write-Error "azcopy not found in extraction directory: $($matchingDirs.FullName)"
#                        exit 1
#                    } else {
#                        Write-Output "azcopy found in extraction directory: $($matchingDirs.FullName)"
#                        # Ensure the azcopy executable has the correct permissions
#                        icacls $azcopyPath
#
#                        # Run azcopy --version and capture output
#                        try {
#                            $versionOutput = & $azcopyPath --version 2>&1
#                            Write-Output "azcopy version output: $versionOutput"
#                        } catch {
#                            Write-Error "Failed to run azcopy --version: $_"
#                        }
#
#                        # Run azcopy --help and capture output
#                        try {
#                            $helpOutput = & $azcopyPath --help 2>&1
#                            Write-Output "azcopy help output: $helpOutput"
#                        } catch {
#                            Write-Error "Failed to run azcopy --help: $_"
#                        }
#                    }
#                displayName: 'Extract Files and Run Version and Help Command on Windows'
#
#          - job: Set_8
#            timeoutInMinutes: 120
#            pool:
#              name: azcopy-arm-pool
#              image: windows2022arm-1espt
#              os: windows
#              hostArchitecture: Arm64
#
#            variables:
#              - name: root_dir
#                value: '$(System.DefaultWorkingDirectory)'
#
#            steps:
#              - task: DownloadPipelineArtifact@2
#                displayName: 'Download Build Artifacts'
#                inputs:
#                  artifactName: 'azCopy-windows-signed'
#                  downloadPath: $(Build.ArtifactStagingDirectory)/azCopy-windows-signed
#                  itemPattern: 'azcopy_windows_se_arm64*.zip'
#
#              - task: PowerShell@2
#                inputs:
#                  targetType: 'inline'
#                  script: |
#                    $artifactDir = "$(Build.ArtifactStagingDirectory)\azCopy-windows-signed"
#                    $extractDir = "$(Build.ArtifactStagingDirectory)\extracted"
#
#                    # Find the zip file matching the pattern
#                    $zipFile = Get-ChildItem -Path $artifactDir -Filter "azcopy*se_arm64*.zip" | Select-Object -First 1
#
#                    if ($null -eq $zipFile) {
#                      Write-Error "No zip file found matching pattern 'azcopy*se_arm64*.zip' in directory: $artifactDir"
#                      exit 1
#                    }
#
#                    $zipFilePath = $zipFile.FullName
#
#                    # Create extraction directory
#                    New-Item -ItemType Directory -Path $extractDir -Force | Out-Null
#
#                    # Extract the zip file
#                    try {
#                      Add-Type -AssemblyName System.IO.Compression.FileSystem
#                      [System.IO.Compression.ZipFile]::ExtractToDirectory($zipFilePath, $extractDir)
#                    } catch {
#                      Write-Error "Failed to extract zip file: $_"
#                      exit 1
#                    }
#
#                    # Change to the directory containing azcopy
#                    Set-Location -Path $extractDir
#
#                    # Find directories matching the pattern
#                    $matchingDirs = Get-ChildItem -Directory -Path .\azcopy_windows_se_arm64* | Select-Object -First 1
#
#                    # Check if there is exactly one matching directory
#                    if ($matchingDirs.Count -eq 0) {
#                        Write-Error "No directories found matching the pattern: .\azcopy_windows_se_arm64*"
#                        exit 1
#                    } elseif ($matchingDirs.Count -gt 1) {
#                        Write-Error "Multiple directories found matching the pattern: .\azcopy_windows_se_arm64*"
#                        exit 1
#                    }
#
#                    # Check if the azcopy executable exists in the matching directory
#                    $azcopyPath = Join-Path -Path $matchingDirs.FullName -ChildPath "azcopy.exe"
#                    if (-Not (Test-Path -Path $azcopyPath)) {
#                        Write-Error "azcopy not found in extraction directory: $($matchingDirs.FullName)"
#                        exit 1
#                    } else {
#                        Write-Output "azcopy found in extraction directory: $($matchingDirs.FullName)"
#                        # Ensure the azcopy executable has the correct permissions
#                        icacls $azcopyPath
#
#                        # Run azcopy --version and capture output
#                        try {
#                            $versionOutput = & $azcopyPath --version 2>&1
#                            Write-Output "azcopy version output: $versionOutput"
#                        } catch {
#                            Write-Error "Failed to run azcopy --version: $_"
#                        }
#
#                        # Run azcopy --help and capture output
#                        try {
#                            $helpOutput = & $azcopyPath --help 2>&1
#                            Write-Output "azcopy help output: $helpOutput"
#                        } catch {
#                            Write-Error "Failed to run azcopy --help: $_"
#                        }
#                    }
#                displayName: 'Extract Files and Run Version and Help Command on Windows Arm64'

      # TestArtifacts ends here
#      - stage: BuildDockerImage
#        dependsOn: TestArtifacts
#        condition: succeeded('TestArtifacts')
#        jobs:
#          - job: Set_1_Ubuntu_Mariner_AMD64
#            pool:
#              name: azcopy-pool
#              image: ubuntu22-1espt
#              os: linux
#
#            templateContext:
#              authenticatedContainerRegistries:
#              - serviceConnection: AzCopyContainers_ACR
#              outputs:
#                - output: containerImage
#                  image: azcopycontainers.azurecr.io/azure-azcopy-ubuntu-x86_64:${{ parameters.azcopy_version }}
#                  remoteImage:
#                    - azcopycontainers.azurecr.io/azure-azcopy-ubuntu-x86_64:latest
#                    - azcopycontainers.azurecr.io/azure-azcopy-ubuntu-x86_64:${{ parameters.azcopy_version }}
#
#            variables:
#              - group: AZCOPY_SECRET_VAULT
#              - name: root_dir
#                value: '$(System.DefaultWorkingDirectory)'
#              - name: work_dir
#                value: '$(Build.SourcesDirectory)'
#
#            steps:
#              - checkout: self
#                displayName: 'Checkout repository'
#
#              - task: DownloadPipelineArtifact@2
#                displayName: 'Download Pipeline Artifacts'
#                inputs:
#                  artifactName: 'azCopy-binaries-linux-amd64'
#                  targetPath: '$(Build.SourcesDirectory)'
#                  itemPattern: 'azcopy_linux_amd64'
#
#              - script: |
#                  mv azcopy_linux_amd64 azcopy
#                displayName: 'Set up azcopy in expected location'
#                workingDirectory: '$(Build.SourcesDirectory)'
#
#              - task: 1ES.BuildContainerImage@1
#                inputs:
#                  image: azcopycontainers.azurecr.io/azure-azcopy-ubuntu-x86_64:${{ parameters.azcopy_version }}
#                  path: '$(Build.SourcesDirectory)'
#                  dockerfile: docker/Dockerfile