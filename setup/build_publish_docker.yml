parameters:
  - name: jobName
    type: string
  - name: matrix
    type: object
  - name: poolName
    type: string
  - name: demands
    type: object
    default: []
  - name: vmImage
    type: string
  - name: container
    type: string

jobs:
  - job: ${{ parameters.jobName }}
    timeoutInMinutes: 120
    strategy:
      matrix: ${{ parameters.matrix }}
    pool:
      name: ${{ parameters.poolName }}
      vmImage: ${{ parameters.vmImage }}
      demands: ${{ parameters.demands }}

    variables:
    - group: AZCOPY_SECRET_VAULT
    - name: root_dir
      value: '$(System.DefaultWorkingDirectory)'
    - name: work_dir
      value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'

    steps:
      - checkout: none
      - script: |
          git clone https://github.com/Azure/azure-storage-azcopy
        displayName: 'Checkout Code'
        workingDirectory: $(root_dir)

      - script: |
          git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
        displayName: 'Checkout branch'
        workingDirectory: $(work_dir)

      - ${{ if eq(parameters.jobName, 'Set_2_Ubuntu_Mariner_ARM64') }}:
        - task: ShellScript@2
          inputs:
            scriptPath: "$(work_dir)/go_installer.sh"
            args: "$(root_dir)/ $(AZCOPY_GOLANG_VERSION)"
          displayName: "Installing Go tools"

      - ${{ if eq(parameters.jobName, 'Set_2_Ubuntu_Mariner_ARM64') }}:
        - script: |
            sudo apt update
            sudo apt --fix-broken install
          displayName: "Install dependencies"

      - script: |
          chmod 777 *.sh
          ./dockerinstall.sh

          # Build and publish Docker containers
          ./buildcontainer.sh Dockerfile $DOCKER_TAG
          ./publishcontainer.sh $(AZCOPY_DOCKER_REG_USER) $(AZCOPY_DOCKER_REG_PWD) $DOCKER_TAG

          ./buildcontainer.sh DockerfileMariner $MARINER_TAG
          ./publishcontainer.sh $(AZCOPY_DOCKER_REG_USER) $(AZCOPY_DOCKER_REG_PWD) $MARINER_TAG
        displayName: "Create docker image and push to the containers registry"
        workingDirectory: $(work_dir)/docker
        env:
          DOCKER_TAG: ${{ if eq(parameters.jobName, 'Set_1_Ubuntu_Mariner_AMD64') }}ubuntu-x86_64${{ else }}ubuntu-arm64
          MARINER_TAG: ${{ if eq(parameters.jobName, 'Set_1_Ubuntu_Mariner_AMD64') }}mariner-x86_64${{ else }}mariner-arm64
