parameters:
  working_dir: ''
  build_dir: ''

steps:
- script: |
    # Check if running on WSL
    if grep -q Microsoft /proc/version; then
        echo "Running on WSL."
    else
        echo "This script is intended to be run in a WSL environment or a compatible Linux environment on Windows."
        exit 1
    fi

    # Step 0: Install Chocolatey
    echo "Checking if Chocolatey is installed..."
    if ! command -v choco &> /dev/null; then
        echo "Installing Chocolatey..."
        
        # Set Execution Policy and install Chocolatey
        powershell.exe -Command "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
    else
        echo "Chocolatey is already installed."
    fi

    # Step 1: Install WiX Toolset using Chocolatey
    echo "Installing WiX Toolset..."
    choco install wixtoolset --version 3.11.2 -y  # Ensure the correct WiX version is installed

    # Verify installation
    if command -v candle &> /dev/null && command -v light &> /dev/null; then
        echo "WiX Toolset installed successfully."
    else
        echo "WiX Toolset installation failed."
        exit 1
    fi

    echo "Installation of Chocolatey and WiX Toolset completed successfully!"
  displayName: 'Install Chocolatey and WiX Toolset'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # PowerShell Script to create MSI in an Azure Pipeline

      # Step 1: Set Variables
      $workDir = ${{ parameters.working_dir }}
      $wixToolsPath = (where.exe candle.exe)  # Path to WiX toolset binaries
      $wxsFilePath = "$workDir\azcopy.wxs"
      $wixObjPath = "$workDir\azcopy.wixobj"
      $outputMsi = "${{ parameters.build_dir }}\azcopy.msi"

      cd $workDir

      # Step 2: Update the UpgradeCode in the .wxs file
      Write-Host "Updating Uuid in .wxs file..."
      $uuid = [guid]::NewGuid().Guid
      $fileContent = Get-Content $wxsFilePath
      $updatedContent = $fileContent -replace 'UpgradeCode="[^"]+"', "UpgradeCode=`"$uuid`""
      $updatedContent | Set-Content $wxsFilePath
      Write-Host "New UpgradeCode: $uuid"

      $fileContent = Get-Content $wxsFilePath
      $updatedContent = $fileContent -replace 'Guid="[^"]+"', "Guid=`"$uuid`""
      $updatedContent | Set-Content $wxsFilePath
      Write-Host "New UpgradeCode: $uuid"

      # Step 3: Compile the .wxs file using Candle
      Write-Host "Compiling .wxs file..."
      & "$wixToolsPath\candle.exe" -out $wixObjPath $wxsFilePath

      # Step 4: Link the .wixobj to create the MSI using Light
      Write-Host "Linking to create MSI..."
      & "$wixToolsPath\light.exe" -out $outputMsi $wixObjPath

      Write-Host "MSI creation process completed!"
