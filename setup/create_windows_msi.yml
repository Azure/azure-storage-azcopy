parameters:
  working_dir: ''
  build_dir: ''
  msi_dir: ''

steps:
- powershell: |
    # Check if Chocolatey is installed
    if (!(Get-Command choco.exe -ErrorAction SilentlyContinue)) {
        Write-Host "Chocolatey is not installed. Installing Chocolatey..."
        Set-ExecutionPolicy Bypass -Scope Process -Force; 
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; 
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    } else {
        Write-Host "Chocolatey is already installed."
    }

    # Install WiX Toolset using Chocolatey
    Write-Host "Installing WiX Toolset via Chocolatey..."
    choco install wixtoolset -y
    Write-Host "WiX Toolset installation completed."
  displayName: 'Install Chocolatey and WiX Toolset'

- powershell: |
    # PowerShell Script to create MSI in an Azure Pipeline

    # Step 1: Set Variables
    $msiDir = "${{ parameters.msi_dir }}"
    $workDir = "${{ parameters.working_dir }}"
    $wixToolsPath = (where.exe candle.exe)  # Path to WiX toolset binaries
    $wxsFilePath = "$workDir\azcopy.wxs"
    $wixObjPath = "$msiDir\azcopy.wixobj"
    $outputMsi = "${{ parameters.build_dir }}\azcopy.msi"

    Write-Host "Work dir: $workDir  $wixToolsPath"
    cd $msiDir

    # Step 2: Update the UpgradeCode in the .wxs file
    Write-Host "Updating Uuid in .wxs file..."
    $uuid = [guid]::NewGuid().Guid
    $fileContent = Get-Content $wxsFilePath
    $updatedContent = $fileContent -replace 'UpgradeCode="[^"]+"', "UpgradeCode=`"$uuid`""
    $updatedContent | Set-Content $wxsFilePath
    Write-Host "New UpgradeCode: $uuid"

    $fileContent = Get-Content $wxsFilePath
    $updatedContent = $fileContent -replace 'Guid="[^"]+"', "Guid=`"$uuid`""
    $updatedContent | Set-Content $wxsFilePath
    Write-Host "New UpgradeCode: $uuid"

    # Step 3: Compile the .wxs file using Candle
    Write-Host "Compiling .wxs file..."
    & "$wixToolsPath\candle.exe" -out $wixObjPath $wxsFilePath

    # Step 4: Link the .wixobj to create the MSI using Light
    Write-Host "Linking to create MSI..."
    & "$wixToolsPath\light.exe" -out $outputMsi $wixObjPath

    Write-Host "MSI creation process completed!"
  displayName: 'Create MSI using WiX Toolset'
