
parameters:
  remove_packages: ''
  package_format: ''
steps:
            - checkout: none

            - task: PipAuthenticate@1
              inputs:
                artifactFeeds: 'DevExGlobalFeed'
              displayName: 'Connect to PMC artifact'

            - script: |
                sudo apt-get clean
                sudo apt-get update --fix-missing
                sudo apt-get install -y tree
              displayName: 'Install Dependencies'

            - script: |
                pip install pmc-cli
                echo '##vso[task.prependpath]$(HOME)/.local/bin'
              displayName: 'Install pmc-cli'

            - task: DownloadSecureFile@1
              name: pmcCertificate
              displayName: 'Download pmc pem file'
              inputs:
                secureFile: 'blobfusebuildvault-blobfuse-release-pmc1-20230911.pem'

            - task: DownloadSecureFile@1
              name: settings
              displayName: 'Download settings.toml file'
              inputs:
                secureFile: 'settings.toml'

            - script: |
                pmc --version
                pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo list --limit 1
                if [ $? -ne 0 ]; then
                  exit 1
                fi
              displayName: 'Test PMC installation'
            
            - script: |
                pkg_id_list=$(pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) package ${{parameters.package_format}} list --name azcopy --version ${{parameters.remove_packages}})

                # Loop over all the results and extract the package id for each one
                for PKG_ID in $(echo "$pkg_id_list" | jq -r '.results[].id'); do
                    echo "Processing Package ID: $PKG_ID"  # Debugging line
                    pkg_repo_names=$(pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo list --package "$PKG_ID")

                    for REPO_NAME in $(echo "$pkg_repo_names" | jq -r '.results[].name'); do
                        echo "Found repo: $REPO_NAME $PKG_ID" # Debugging line
                        #pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo package update --remove-packages $PKG_ID $REPO_NAME
                        #pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo publish $REPO_NAME
                    done
                done
              displayName: 'Remove the packages from the repository'