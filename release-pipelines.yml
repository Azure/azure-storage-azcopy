variables:
  AZCOPY_GOLANG_VERSION: '1.21.8'
  AZCOPY_GOLANG_VERSION_COVERAGE: '1.21.8'

parameters:
  - name: tag
    displayName: 'New Release Tag'
    type: string
    default: 'azcopy-'
  
  - name: unit_test
    displayName: 'Execute Unit Tests'
    type: boolean
    default: false

  - name: post_release
    displayName: 'Post Release on Github'
    type: boolean
    default: false

  - name: publish_artifacts
    displayName: 'Publish Artifacts to Linux Repos'
    type: boolean
    default: false

  - name: draft
    displayName: 'Post as Draft Release'
    type: boolean
    default: false

  - name: prerelease
    displayName: 'Post as PreRelease'
    type: boolean
    default: false

  - name: update_version
    displayName: 'Update Version'
    type: boolean
    default: false

# Do not trigger this pipeline automatically
trigger: none
pr: none

stages:
  - stage: BuildArtifacts
    jobs:
      - job: Set_1
        timeoutInMinutes: 120
        strategy:
          matrix:
            Linux_amd64:
              imageName: 'ubuntu-20.04'
              type: 'linux_amd64'
              tags: 'tags'
              depends: 'depends'
              container: 'test-cnt-ubn-20'
              AgentName: "blobfuse-ubuntu20"
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'

        steps:
          - task: GoTool@0
            env:
              GO111MODULE: 'on'
            inputs:
              version: $(AZCOPY_GOLANG_VERSION)

          - script: |
              echo 'Running GO Vet'
              go vet 
            displayName: 'Golang Vet - Linux'
            workingDirectory: $(root_dir)

          # install dependencies required for compiling azcopy
          - script: |
              sudo apt-get update --fix-missing
              sudo apt-get install ruby ruby-dev rubygems build-essential rpm -y
              sudo gem install dotenv -v 2.8.1
              sudo gem install fpm -V
            displayName: "Installing Dependencies"

          - script: |
              GOARCH=amd64 GOOS=linux go build -tags "netgo" -o "$(work_dir)/azcopy_linux_amd64"
            displayName: 'Generate Linux AMD64'

          - script: |
              cp NOTICE.txt $(work_dir)
            displayName: 'Copy NOTICE.txt'
            condition: eq(variables.type, 'linux')

          # place the generated binary files & any additional files in appropriate locations
          - script: |
              mkdir -p pkgDir/usr/bin/
              cp -r $(work_dir) pkgDir/usr/bin/
            displayName: 'Accumulate pkg files'

          - script: |
              sudo ls -lRt pkgDir/usr/bin/
            displayName: 'List the binaries'
            workingDirectory: $(root_dir)
            
          
          # using fpm tool for packaging of our binary & performing post-install operations
          # for additional information about fpm refer https://fpm.readthedocs.io/en/v1.13.1/
          # TODO: Add description
          - script: |
              fpm -s dir -t deb -n azcopy -C pkgDir/ \
              -v `./pkgDir/usr/bin/azure-storage-azcopy/azcopy_linux_amd64 --version | cut -d " " -f 3` \
              --maintainer "AzCopy v-Team <azcopyvteam@microsoft.com>" \
              --url "https://github.com/Azure/azure-storage-azcopy" \
              --description "Add description" 
              mv ./azcopy*.deb ./azcopy-`./pkgDir/usr/bin/azure-storage-azcopy/azcopy_linux_amd64 --version | cut -d " " -f 3`-$(tags).x86_64.deb
              cp ./azcopy*.deb $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make deb Package'
            
          - script: |
              fpm -s dir -t rpm -n azcopy --rpm-digest sha256 -C pkgDir/ \
              -v `./pkgDir/usr/bin/azure-storage-azcopy/azcopy_linux_amd64 --version | cut -d " " -f 3` \
              --maintainer "Azcopy v-Team <azcopyvteam@microsoft.com>" \
              --url "https://github.com/Azure/azure-storage-azcopy" \
              --description "Add description" 
              mv ./azcopy*.rpm ./azcopy-`./pkgDir/usr/bin/azure-storage-azcopy/azcopy_linux_amd64 --version | cut -d " " -f 3`-$(tags).x86_64.rpm
              cp ./azcopy*.rpm $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make rpm Package'

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-temp'
            displayName: 'Publish Artifacts'
            condition: succeededOrFailed()
        
          - task: ComponentGovernanceComponentDetection@0
            inputs:
              scanType: 'Register'
              verbosity: 'Verbose'
              alertWarningLevel: 'High'

      - job: Set_2
        timeoutInMinutes: 120
        strategy:
          matrix:
            Linux_arm64:
              vmImage: 'ubuntu-22.04'
              container: 'test-cnt-ubn-22-arm64'
              AgentName: 'blobfuse-ubn22-arm64'

        pool:
          name: "blobfuse-ubn-arm64-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'

        steps:
          - task: GoTool@0
            env:
              GO111MODULE: 'on'
            inputs:
              version: $(AZCOPY_GOLANG_VERSION)

          - script: |
              echo 'Running GO Vet'
              go vet 
            displayName: 'Golang Vet - Linux'
            workingDirectory: $(root_dir)

          # install dependencies required for compiling azcopy
          - script: |
              sudo apt-get update --fix-missing
              sudo apt-get install ruby ruby-dev rubygems build-essential rpm -y
              sudo gem install dotenv -v 2.8.1
              sudo gem install fpm -V
            displayName: "Installing Dependencies"

          - script: |
              GOARCH=arm64 GOOS=linux go build -tags "netgo" -o "$(work_dir)/azcopy_linux_arm64"
            displayName: 'Generate Linux ARM64'

          - script: |
              cp NOTICE.txt $(work_dir)
            displayName: 'Copy NOTICE.txt'

          # place the generated binary files & any additional files in appropriate locations
          - script: |
              mkdir -p pkgDir/usr/bin/
              cp -r $(work_dir) pkgDir/usr/bin/
            displayName: 'Accumulate pkg files'

          # TODO: remove after testing
          - script: |
              sudo ls -lRt pkgDir/usr/bin/
            displayName: 'List the binaries'
            workingDirectory: $(root_dir)
            
          
          # using fpm tool for packaging of our binary & performing post-install operations
          # for additional information about fpm refer https://fpm.readthedocs.io/en/v1.13.1/
          - script: |
              fpm -s dir -t deb -n azcopy -C pkgDir/ \
              -v `./pkgDir/usr/bin/azure-storage-azcopy/azcopy_linux_arm64 --version | cut -d " " -f 3` \
              --maintainer "AzCopy v-Team <azcopyvteam@microsoft.com>" \
              --url "https://github.com/Azure/azure-storage-azcopy" \
              --description "Add description" 
              mv ./azcopy*.deb ./azcopy-`./pkgDir/usr/bin/azure-storage-azcopy/azcopy_linux_arm64 --version | cut -d " " -f 3`-$(tags).x86_64.deb
              cp ./azcopy*.deb $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make deb Package'
            
          - script: |
              fpm -s dir -t rpm -n azcopy --rpm-digest sha256 -C pkgDir/ \
              -v `./pkgDir/usr/bin/azure-storage-azcopy/azcopy_linux_arm64 --version | cut -d " " -f 3` \
              --maintainer "Azcopy v-Team <azcopyvteam@microsoft.com>" \
              --url "https://github.com/Azure/azure-storage-azcopy" \
              --description "Add description" 
              mv ./azcopy*.rpm ./azcopy-`./pkgDir/usr/bin/azure-storage-azcopy/azcopy_linux_arm64 --version | cut -d " " -f 3`-$(tags).x86_64.rpm
              cp ./azcopy*.rpm $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make rpm Package'

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-temp'
            displayName: 'Publish Artifacts'
            condition: succeededOrFailed()
        
          - task: ComponentGovernanceComponentDetection@0
            inputs:
              scanType: 'Register'
              verbosity: 'Verbose'
              alertWarningLevel: 'High'
 
# BuildArtifacts end here

  - stage: SignArtifacts
    dependsOn: BuildArtifacts
    condition: succeeded('BuildArtifacts')
    jobs:
      - job: SignAzCopy
        timeoutInMinutes: 120
        strategy:
          matrix:
            Ubuntu-22:
              vmImage: 'Ubuntu-20.04'
              AgentName: "blobfuse-ubuntu20"
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:
          - group: AZCOPY_ESRP_SECRET

        steps:
          - checkout: none
          
          - script: |
              echo ${{ parameters.tag }}
            displayName: 'Tag Name'
          
          # download artifacts that need to be published
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-temp'
              downloadPath: $(Build.ArtifactStagingDirectory)
          
          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/azCopy-temp/*
            displayName: 'List Artifacts'

          - script: |
              mkdir mariner && chmod 755 mariner
              cp azCopy-temp/* mariner
              sudo ls -lRt mariner
              md5sum mariner/*
            displayName: 'Copy artifacts for Mariner'
            workingDirectory: $(Build.ArtifactStagingDirectory)
          
          - script: |
              sudo apt-get update
              wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb 
              sudo dpkg -i packages-microsoft-prod.deb 
              sudo apt update 
              sudo apt install apt-transport-https -y
              sudo apt install dotnet-sdk-3.1 -y
            displayName: "Update dependencies"
            
          # Send images for signing
          - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
            displayName: 'ESRP CodeSigning azCopy'
            inputs:
              ConnectedServiceName: 'PMC ESRP AzCopy Signing'
              FolderPath: '$(Build.ArtifactStagingDirectory)/azCopy-temp'
              Pattern: '*.rpm, *.deb'
              signConfigType: inlineSignParams
              VerboseLogin: true
              inlineOperation: |
                [
                  {
                    "KeyCode" : "$(ESRP_AZCOPY_KEY_CODE)",
                    "OperationCode" : "LinuxSign",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                  }
                ]

          - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
            displayName: 'ESRP CodeSigning azCopy mariner'
            inputs:
              ConnectedServiceName: 'PMC ESRP azCopy Signing'
              FolderPath: '$(Build.ArtifactStagingDirectory)/mariner'
              Pattern: '*.rpm, *.deb'
              signConfigType: inlineSignParams
              VerboseLogin: true
              inlineOperation: |
                [
                  {
                    "KeyCode" : "$(ESRP_AZCOPY_MARINER_KEY_CODE)",
                    "OperationCode" : "LinuxSign",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                  }
                ]

          # Validate signed images have md5sum changed
          - script: |
              chmod 755 $(Build.ArtifactStagingDirectory)/azCopy-temp/*
              chmod 755 $(Build.ArtifactStagingDirectory)/mariner/*
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-temp/*.md
              rm -rf $(Build.ArtifactStagingDirectory)/mariner/*.md
              mv $(Build.ArtifactStagingDirectory)/azCopy-temp/* $(Build.ArtifactStagingDirectory)/
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-temp/
            displayName: 'Make Artifacts executable'

          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/*
              md5sum $(Build.ArtifactStagingDirectory)/mariner/*
            displayName: 'List Signed Artifacts'
          
          # Push signed images to artifact directory
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-signed'
            displayName: 'Publish Signed Artifacts'
  # SignArtifacts end here

  - stage: TestArtifacts
    dependsOn: SignArtifacts
    condition: succeeded('SignArtifacts')
    jobs:
      - job: Set_1
        timeoutInMinutes: 120
        strategy:
          matrix:
            Ubuntu-22:
              agentName: "blobfuse-ubuntu22"
              vmImage: 'Ubuntu-22.04'
              container: 'test-cnt-ubn-22'
              tags: 'tags'
        pool:
          vmImage: $(vmImage)

        variables:
          - group: AZCOPY_ESRP_SECRET
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'
          - name: mount_dir
            value: '$(System.DefaultWorkingDirectory)/azcopy-temp'
          - name: temp_dir
            value: '$(System.DefaultWorkingDirectory)/azcopytmpcache'

        steps:
          - checkout: none

          - script: |
              git clone https://github.com/Azure/azure-storage-azcopy
            displayName: 'Checkout Code'
            workingDirectory: $(root_dir)
          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-azcopy

          # Custom script to install Go-lang
          - task: GoTool@0
            env:
              GO111MODULE: 'on'
            inputs:
              version: $(AZCOPY_GOLANG_VERSION)
            displayName: "Install Go"
            
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-signed'
              downloadPath: $(root_dir)
              itemPattern: azCopy-signed/azcopy*$(tags)*x86_64.deb

          - script: |
              ls -l
              result=$(ls -1 | wc -l)
              if [ $result -ne 1 ]; then
                exit 1
              fi
            displayName: 'List Downloaded Package'
            workingDirectory: $(root_dir)/azCopy-signed      

          - script: |
              for f in ./azcopy*$(tags)*.deb; do mv -v "$f" "${f/-$(tags)./-$(vmImage).}"; done;
              cp ./azcopy*$(vmImage)*.deb $(Build.ArtifactStagingDirectory)
            displayName: 'Rename Package'
            workingDirectory: $(root_dir)/azCopy-signed
            
          - script: |
              sudo dpkg --info azcopy*.deb
              sudo dpkg -i azcopy*.deb
              sudo apt-get install build-essential -y
            displayName: 'Install Package'
            workingDirectory: $(Build.ArtifactStagingDirectory)
          # - template: 'azure-pipeline-templates/release-distro-tests.yml'
          #   parameters:
          #     root_dir: $(root_dir)
          #     work_dir: $(work_dir)
          #     mount_dir: $(mount_dir)
          #     temp_dir: $(temp_dir)
          #     container: $(container)

          - script: | 
              azcopy --version
            displayName: 'Check Version'

          - script: | 
              azcopy --help
            displayName: 'Check Help'

          # # publishing the artifacts generated
          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     artifactName: 'blobfuse2'
          #   displayName: 'Publish Artifacts' 

  #     - job: Set_1
  #       timeoutInMinutes: 120
  #       strategy:
  #         matrix:
  #           Ubuntu-18:
  #             vmImage: 'Ubuntu-18.04'
  #             fuselib: 'libfuse-dev'
  #             fuse-version: 'fuse'
  #             tags: 'fuse2'
  #             container: 'test-cnt-ubn-18'
  #             AgentName: "blobfuse-ubuntu18"
  #           Ubuntu-20:
  #             vmImage: 'Ubuntu-20.04'
  #             fuse-version: 'fuse3'
  #             fuselib: 'libfuse3-dev'
  #             tags: 'fuse3'
  #             container: 'test-cnt-ubn-20'
  #             AgentName: "blobfuse-ubuntu20"
  #       pool:
  #         name: "blobfuse-ubuntu-pool"
  #         demands:
  #           - ImageOverride -equals $(AgentName)

  #       variables:
  #         - group: NightlyBlobFuse
  #         - name: root_dir
  #           value: '$(System.DefaultWorkingDirectory)'
  #         - name: work_dir
  #           value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
  #         - name: mount_dir
  #           value: '$(System.DefaultWorkingDirectory)/fusetmp'
  #         - name: temp_dir
  #           value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

  #       steps:
  #         - checkout: none

  #         - script: |
  #             git clone https://github.com/Azure/azure-storage-fuse
  #           displayName: 'Checkout Code'
  #           workingDirectory: $(root_dir)
      
  #         - script: |
  #             git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
  #           displayName: 'Checkout Branch'
  #           workingDirectory: $(root_dir)/azure-storage-fuse
          
  #         # Custom script to install Go-lang
  #         - task: ShellScript@2
  #           inputs:
  #             scriptPath: "$(work_dir)/go_installer.sh"
  #             args: "$(root_dir)/"
  #           displayName: "GoTool Custom Setup"

  #         # get glibc version with which build is done
  #         - script: |
  #            sudo apt update
  #            sudo apt --fix-broken install
  #            ldd --version
  #           displayName: "GLIBC Version"

  #         - task: DownloadBuildArtifacts@0
  #           displayName: 'Download Build Artifacts'
  #           inputs:
  #             artifactName: 'blobfuse2-signed'
  #             downloadPath: $(root_dir)
  #             itemPattern: blobfuse2-signed/blobfuse2*$(tags)*x86_64.deb

  #         - script: |
  #             ls -l
  #             result=$(ls -1 | wc -l)
  #             if [ $result -ne 1 ]; then
  #               exit 1
  #             fi
  #           displayName: 'List Downloaded Package'
  #           workingDirectory: $(root_dir)/blobfuse2-signed

  #         - script: |
  #             for f in ./blobfuse2*$(tags)*.deb; do mv -v "$f" "${f/-$(tags)./-$(vmImage).}"; done;
  #             cp ./blobfuse2*$(vmImage)*.deb $(Build.ArtifactStagingDirectory)
  #             if [ $(AgentName) == "blobfuse-ubuntu18" ]; then
  #               echo "Generating for Debian 9/10"
  #               f=`ls ./blobfuse2*$(vmImage)*.deb`
  #               cp "$f" $(sed 's:Ubuntu-18.04:Debian-9.0:' <<< "$f")
  #               cp "$f" $(sed 's:Ubuntu-18.04:Debian-10.0:' <<< "$f")
  #               cp ./blobfuse2*Debian-*.deb $(Build.ArtifactStagingDirectory)
  #               ls -l $(Build.ArtifactStagingDirectory)
  #               rm -rf ./blobfuse2*Debian-*.deb
  #             else
  #               echo "Generating for Debian 11"
  #               f=`ls ./blobfuse2*$(vmImage)*.deb`
  #               cp "$f" $(sed 's:Ubuntu-20.04:Debian-11.0:' <<< "$f")
  #               cp ./blobfuse2*Debian-*.deb $(Build.ArtifactStagingDirectory)
  #               ls -l $(Build.ArtifactStagingDirectory)
  #               rm -rf ./blobfuse2*Debian-*.deb
  #             fi
  #           displayName: 'Rename Package'
  #           workingDirectory: $(root_dir)/blobfuse2-signed

  #         - script: |
  #             sudo dpkg --info blobfuse2*.deb
  #             sudo apt-get install $(fuse-version) build-essential -y
  #             sudo dpkg -i blobfuse2*.deb
  #           displayName: 'Install Package'
  #           workingDirectory: $(Build.ArtifactStagingDirectory)

  #         - template: 'azure-pipeline-templates/release-distro-tests.yml'
  #           parameters:
  #             root_dir: $(root_dir)
  #             work_dir: $(work_dir)
  #             mount_dir: $(mount_dir)
  #             temp_dir: $(temp_dir)
  #             container: $(container)

  #         # publishing the artifacts generated
  #         - task: PublishBuildArtifacts@1
  #           inputs:
  #             artifactName: 'blobfuse2'
  #           displayName: 'Publish Artifacts' 

  #     - job: Set_2_ARM
  #       timeoutInMinutes: 120
  #       strategy:
  #         matrix:
  #           Ubuntu-22-ARM64:
  #             vmImage: 'Ubuntu-22.04'
  #             fuse-version: 'fuse3'
  #             fuselib: 'libfuse3-dev'
  #             tags: 'fuse3'
  #             container: 'test-cnt-ubn-22-arm64'
  #             AgentName: "blobfuse-ubn22-arm64"
  #       pool:
  #         name: "blobfuse-ubn-arm64-pool"
  #         demands:
  #           - ImageOverride -equals $(AgentName)

  #       variables:
  #         - group: NightlyBlobFuse
  #         - name: root_dir
  #           value: '$(System.DefaultWorkingDirectory)'
  #         - name: work_dir
  #           value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
  #         - name: mount_dir
  #           value: '$(System.DefaultWorkingDirectory)/fusetmp'
  #         - name: temp_dir
  #           value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

  #       steps:
  #         - checkout: none

  #         - script: |
  #             git clone https://github.com/Azure/azure-storage-fuse
  #           displayName: 'Checkout Code'
  #           workingDirectory: $(root_dir)
      
  #         - script: |
  #             git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
  #           displayName: 'Checkout Branch'
  #           workingDirectory: $(root_dir)/azure-storage-fuse
          
  #         # Custom script to install Go-lang
  #         - task: ShellScript@2
  #           inputs:
  #             scriptPath: "$(work_dir)/go_installer.sh"
  #             args: "$(root_dir)/"
  #           displayName: "GoTool Custom Setup"

  #         # get glibc version with which build is done
  #         - script: |
  #            sudo apt update
  #            sudo apt --fix-broken install
  #            ldd --version
  #           displayName: "GLIBC Version"

  #         - task: DownloadBuildArtifacts@0
  #           displayName: 'Download Build Artifacts'
  #           inputs:
  #             artifactName: 'blobfuse2-signed'
  #             downloadPath: $(root_dir)
  #             itemPattern: blobfuse2-signed/blobfuse2*$(tags)*arm64.deb

  #         - script: |
  #             ls -l
  #             result=$(ls -1 | wc -l)
  #             if [ $result -ne 1 ]; then
  #               exit 1
  #             fi
  #           displayName: 'List Downloaded Package'
  #           workingDirectory: $(root_dir)/blobfuse2-signed

  #         - script: |
  #             for f in ./blobfuse2*$(tags)*.deb; do mv -v "$f" "${f/-$(tags)./-$(vmImage).}"; done;
  #             cp ./blobfuse2*$(vmImage)*.deb $(Build.ArtifactStagingDirectory)
  #           displayName: 'Rename Package'
  #           workingDirectory: $(root_dir)/blobfuse2-signed

  #         - script: |
  #             sudo dpkg --info blobfuse2*.deb
  #             sudo apt-get install $(fuse-version) build-essential -y
  #             sudo dpkg -i blobfuse2*.deb
  #           displayName: 'Install Package'
  #           workingDirectory: $(Build.ArtifactStagingDirectory)

  #         - template: 'azure-pipeline-templates/release-distro-tests.yml'
  #           parameters:
  #             root_dir: $(root_dir)
  #             work_dir: $(work_dir)
  #             mount_dir: $(mount_dir)
  #             temp_dir: $(temp_dir)
  #             container: $(container)
              
  #         # Create container for blobfuse and publish it
  #         - script: |
  #             sudo apt-get install $(tags) $(fuselib) -y
  #             chmod 777 *.sh
  #             ./dockerinstall.sh
  #             ./buildcontainer.sh DockerfileARM arm64
  #             ./publishcontainer.sh $(AZTEST_DOCKER_REG_USER)  $(AZTEST_DOCKER_REG_PWD) arm64
  #           displayName: "Create and publish ARM container"
  #           workingDirectory: $(work_dir)/docker

  #         # publishing the artifacts generated
  #         - task: PublishBuildArtifacts@1
  #           inputs:
  #             artifactName: 'blobfuse2'
  #           displayName: 'Publish Artifacts' 

  #     - job: Set_8
  #       timeoutInMinutes: 120
  #       strategy:
  #         matrix:
  #           Mariner2:
  #             agentName: "blobfuse-mariner2"
  #             DistroVer: "Mariner2"
  #             Description: "CBL-Mariner2 Linux"
  #             fuselib: 'libfuse3-dev'
  #             fuse-version: 'fuse3'
  #             tags: 'fuse3'
  #             container: "test-cnt-mari-2"

  #       pool:
  #         name: "blobfuse-mariner-pool"
  #         demands:
  #           - ImageOverride -equals $(AgentName)

  #       variables:
  #         - group: NightlyBlobFuse
  #         - name: root_dir
  #           value: '$(System.DefaultWorkingDirectory)'
  #         - name: work_dir
  #           value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
  #         - name: mount_dir
  #           value: '$(System.DefaultWorkingDirectory)/fusetmp'
  #         - name: temp_dir
  #           value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

  #       steps:
  #         - checkout: none

  #         - script: |
  #             sudo tdnf update -y
  #             sudo tdnf install git -y
  #           displayName: 'Install Git'

  #         - script: |
  #             git clone https://github.com/Azure/azure-storage-fuse
  #           displayName: 'Checkout Code'
  #           workingDirectory: $(root_dir)

  #         - script: |
  #             git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
  #           displayName: 'Checkout Branch'
  #           workingDirectory: $(root_dir)/azure-storage-fuse

  #         # Custom script to install Go-lang
  #         - task: ShellScript@2
  #           inputs:
  #             scriptPath: "$(work_dir)/go_installer.sh"
  #             args: "$(root_dir)/"
  #           displayName: "GoTool Custom Setup"

  #         # get glibc version with which build is done
  #         - script: |
  #            ldd --version
  #           displayName: "GLIBC Version"

  #         - task: DownloadBuildArtifacts@0
  #           displayName: 'Download Build Artifacts'
  #           inputs:
  #             artifactName: 'blobfuse2-signed'
  #             downloadPath: $(root_dir)
  #             itemPattern: blobfuse2-signed/mariner/blobfuse2*$(tags)*x86_64.rpm

  #         - script: |
  #             ls -l
  #             result=$(ls -1 | wc -l)
  #             if [ $result -ne 1 ]; then
  #               exit 1
  #             fi
  #           displayName: 'List Downloaded Package'
  #           workingDirectory: $(root_dir)/blobfuse2-signed/mariner              

  #         - script: |
  #             sudo rpm -qip blobfuse2*.rpm
  #             sudo tdnf install gcc build-essential fuse3 fuse3-devel -y
  #             sudo rpm -i blobfuse2*.rpm
  #           displayName: 'Install Package'
  #           workingDirectory: $(root_dir)/blobfuse2-signed/mariner

  #         - template: 'azure-pipeline-templates/release-distro-tests.yml'
  #           parameters:
  #             root_dir: $(root_dir)
  #             work_dir: $(work_dir)
  #             mount_dir: $(mount_dir)
  #             temp_dir: $(temp_dir)
  #             container: $(container)

  # # TestArtifacts ends here
  
  - stage: ReleaseArtifacts
    dependsOn: TestArtifacts
    condition: succeeded('TestArtifacts')
    jobs:
      - job: ReleaseBlobfuse
        timeoutInMinutes: 120
        strategy:
          matrix:
            Ubuntu-22:
              vmImage: 'Ubuntu-20.04'
              AgentName: "blobfuse-ubuntu20"
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:
          - group: AZCOPY_ESRP_SECRET

        steps:
          - checkout: none
          
          - script: |
              echo ${{ parameters.tag }}
            displayName: 'Tag Name'
          
          # download artifacts that need to be published
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azcopy'
              downloadPath: $(Build.ArtifactStagingDirectory)
          
          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/azcopy/*.deb
              md5sum $(Build.ArtifactStagingDirectory)/azcopy/*.rpm
            displayName: 'List Artifacts'

          - script: |
              sudo apt-get update
              wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb 
              sudo dpkg -i packages-microsoft-prod.deb 
              sudo apt update 
              sudo apt install apt-transport-https -y
              sudo apt install dotnet-sdk-3.1 -y
            displayName: "Update dependencies"
            
          - ${{ if eq(parameters.post_release, true) }}:
              # add release tags & push to github
              - task: GithubRelease@1
                inputs:
                  githubConnection: 'blobfuse-git-rel'
                  repositoryName: 'Azure/azure-storage-fuse'
                  action: 'edit'

                  target: '$(Build.SourceVersion)'
                  tagSource: 'userSpecifiedTag'

                  title: ${{ parameters.tag }}
                  tag: ${{ parameters.tag }}

                  assets: |
                    $(Build.ArtifactStagingDirectory)/azcopy/*
                  changeLogCompareToRelease: 'lastFullRelease'
                  changeLogType: 'commitBased'
                  isDraft: ${{ parameters.draft }}
                  isPreRelease: ${{ parameters.prerelease }}
                  assetUploadMode: replace

  - ${{ if eq(parameters.publish_artifacts, true) }}:
    - stage: PublishArtifacts
      dependsOn: ReleaseArtifacts
      condition: succeeded('ReleaseArtifacts')
      jobs:
        - job: PublishArtifacts
          timeoutInMinutes: 120
          pool:
            vmImage: 'ubuntu-22.04'
          variables:
            - group: AZURE_ESRP_SECRET
            - name: root_dir
              value: '$(System.DefaultWorkingDirectory)'
          
          steps:
            - checkout: none

            - task: PipAuthenticate@1
              inputs:
                artifactFeeds: 'BlobFuse/Blobfuse'
              displayName: 'Connect to PMC artifact'

            - script: |
                pip install pmc-cli
              displayName: 'Install pmc-cli'

            - task: DownloadSecureFile@1
              name: pmcCertificate
              displayName: 'Download pmc pem file'
              inputs:
                secureFile: 'blobfusebuildvault-blobfuse-release-pmc1-20230911.pem'

            - task: DownloadSecureFile@1
              name: settings
              displayName: 'Download settings.toml file'
              inputs:
                secureFile: 'settings.toml'

            - script: |
                pmc --version
                pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo list --limit 1
                if [ $? -ne 0 ]; then
                  exit 1
                fi
              displayName: 'Test PMC installation'

            # download artifacts that need to be published
            - task: DownloadBuildArtifacts@0
              displayName: 'Download Signed Artifacts'
              inputs:
                artifactName: 'azCopy-signed'
                downloadPath: $(Build.ArtifactStagingDirectory)

            - script: |
                cd mariner
                for f in ./azcopy*.rpm; do mv -v "$f" "${f/-fuse3./-cm2.}"; done
                ls -lRt
                mv blobfuse2*.rpm ..
                cd ..
                rm -r mariner/
              displayName: 'Rename Mariner binaries'
              workingDirectory: $(Build.ArtifactStagingDirectory)/azCopy-signed/

            - script: |
                sudo ls -lRt $(Build.ArtifactStagingDirectory)
              displayName: 'List Artifacts'

            - script: |
                pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) package upload azCopy-signed
              displayName: 'Upload packages'
              workingDirectory: $(Build.ArtifactStagingDirectory)/

            - script: |
                wget https://raw.githubusercontent.com/Azure/azure-storage-azcopy/`echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`/setup/packages.csv -O packages.csv
                cat ./packages.csv
              displayName: 'Fetch packages.csv'
              workingDirectory: $(Build.ArtifactStagingDirectory)/

            - script: |
                fuse3AmdDeb=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload blobfuse2*fuse3.x86_64.deb`
                echo "Fuse3 AMD DEB ID: $fuse3AmdDeb"

                fuse3ArmDeb=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload blobfuse2*fuse3.arm64.deb`
                echo "Fuse3 ARM DEB ID: $fuse3ArmDeb"

                fuse3AmdRpm=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload blobfuse2*fuse3.x86_64.rpm`
                echo "Fuse3 AMD RPM ID: $fuse3AmdRpm"

                fuse3ArmRpm=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload blobfuse2*fuse3.aarch64.rpm`
                echo "Fuse3 ARM RPM ID: $fuse3ArmRpm"

                fuse2AmdDeb=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload blobfuse2*fuse2.x86_64.deb`
                echo "Fuse2 AMD DEB ID: $fuse2AmdDeb"

                fuse2AmdRpm=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload blobfuse2*fuse2.x86_64.rpm`
                echo "Fuse2 AMD RPM ID: $fuse2AmdRpm"

                marinerFuse3AmdRpm=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload blobfuse2*cm2.x86_64.rpm`
                echo "Mariner fuse3 AMD RPM ID: $marinerFuse3AmdRpm"

                marinerFuse3AarchRpm=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload blobfuse2*cm2.aarch64.rpm`
                echo "Mariner fuse3 ARM RPM ID: $marinerFuse3AarchRpm"

                while IFS=, read -r distro fuseArchType repoName releaseName; do
                  echo "Uploading packages for $distro"
                  pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo package update --add-packages ${!fuseArchType} $repoName $releaseName
                done < <(tail -n +3 ../packages.csv)
              displayName: 'Add uploaded packages to repository'
              workingDirectory: $(Build.ArtifactStagingDirectory)/blobfuse2-signed/

            - script: |
                while IFS=, read -r distro fuseArchType repoName releaseName; do
                  if [[ $fuseArchType == *"Arm"* ]] 
                  then
                    echo "Skipping for ARM type on $distro"
                  else
                    echo "Publishing for $distro"
                    pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo publish $repoName
                  fi
                done < <(tail -n +3 ../packages.csv)
              displayName: 'Publish the repository'
              workingDirectory: $(Build.ArtifactStagingDirectory)/blobfuse2-signed/
            
  # - stage: UpdateLatestVersion
  #   dependsOn: ReleaseArtifacts
  #   condition: succeeded('ReleaseArtifacts')
  #   jobs:
  #     - job: UpdateVersion
  #       pool:
  #         vmImage: 'ubuntu-20.04'
  #       variables:
  #         - group: NightlyBlobFuse
  #         - name: root_dir
  #           value: '$(System.DefaultWorkingDirectory)'
        
  #       steps:
  #         - checkout: none

  #         - ${{ if eq(parameters.update_version, true) }}:
  #             - script: |
  #                 sudo apt-get install python3 -y
  #                 python3 --version
  #               displayName: 'Installing Python'

  #             # download artifacts that need to be published
  #             - task: DownloadBuildArtifacts@0
  #               displayName: 'Download Build Artifacts'
  #               inputs:
  #                 artifactName: 'blobfuse2'
  #                 downloadPath: $(Build.ArtifactStagingDirectory)
              
  #             # install blobfuse2
  #             - script: |
  #                 cd $(Build.ArtifactStagingDirectory)/blobfuse2
  #                 ls | grep -i ubuntu-20.04
  #                 sudo apt-get install ./`ls | grep -i ubuntu-20.04` -y
  #                 blobfuse2 version
  #               displayName: 'Installing blobfuse2'

  #             - script: |
  #                 wget https://raw.githubusercontent.com/Azure/azure-storage-fuse/`echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`/releaseVersionUpdate.py
  #                 ls -l
  #               displayName: 'Getting Python script'
  #               workingDirectory: $(root_dir)

  #             - script: |
  #                 python3 releaseVersionUpdate.py "$(VERSION_CNT_SAS_URL)" "`blobfuse2 version`"
  #               displayName: 'Updating version number'
  #               workingDirectory: $(root_dir)

