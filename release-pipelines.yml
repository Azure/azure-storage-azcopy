variables:
  AZCOPY_GOLANG_VERSION: '1.21.8'
  AZCOPY_GOLANG_VERSION_COVERAGE: '1.21.8'
  AZCOPY_VERSION: '0.0.0'

parameters:
  - name: tag
    displayName: 'New Release Tag'
    type: string
    default: 'azcopy-'

  - name: test_mode
    displayName: 'Test Mode'
    type: boolean
    default: false
  
  # - name: unit_test
  #   displayName: 'Execute Unit Tests'
  #   type: boolean
  #   default: false

  - name: post_release
    displayName: 'Post Release on Github'
    type: boolean
    default: false

  - name: publish_artifacts
    displayName: 'Publish Artifacts to Linux Repos'
    type: boolean
    default: false

  - name: draft
    displayName: 'Post as Draft Release'
    type: boolean
    default: false

  - name: prerelease
    displayName: 'Post as PreRelease'
    type: boolean
    default: false

  - name: update_version
    displayName: 'Update Version'
    type: boolean
    default: false

# Do not trigger this pipeline automatically
trigger: none
pr: none

stages:
  # - stage: RunTests
  #   jobs:
  #     - job: UT_On_Ubuntu
  #       variables:
  #         group: AZCOPY_TESTS_VAR
  #         isMutexSet: 'false'
  #       # allow maximum build time, in case we have build congestion
  #       timeoutInMinutes: 360
  #       pool:
  #         vmImage: 'ubuntu-20.04'
  #       steps:
  #         - task: UsePythonVersion@0
  #           name: 'Set_up_Python'
  #           inputs:
  #             versionSpec: '3.7'

  #         - task: GoTool@0
  #           name: 'Set_up_Golang'
  #           inputs:
  #             version: $(AZCOPY_GOLANG_VERSION_COVERAGE)

  #         - task: DownloadSecureFile@1
  #           name: ciGCSServiceAccountKey
  #           displayName: 'Download GCS Service Account Key'
  #           inputs:
  #             secureFile: 'ci-gcs-dev.json'

  #         - script: |
  #             go install github.com/jstemmer/go-junit-report@v0.9.1
  #             go install github.com/axw/gocov/gocov@v1.1.0
  #             go install github.com/AlekSi/gocov-xml@v1.0.0
  #             go install github.com/matm/gocov-html@v0.0.0-20200509184451-71874e2e203b
  #           displayName: 'Install dependencies'

  #         - script: |
  #             pip install azure-storage-blob==12.12.0
  #             # set the variable to indicate that the mutex is being acquired
  #             # note: we set it before acquiring the mutex to ensure we release the mutex. 
  #             # setting this after can result in an un-broken mutex if someone cancels the pipeline after we acquire the 
  #             # mutex but before we set this variable.
  #             # setting this before will always work since it is valid to break an un-acquired mutex.
  #             echo '##vso[task.setvariable variable=isMutexSet]true'
  #             # acquire the mutex before running live tests to avoid conflicts
  #             python ./tool_distributed_mutex.py lock "$(MUTEX_URL)"
  #           name: 'Acquire_the_distributed_mutex'
  #         - template: azurePipelineTemplates/run-ut.yml
  #           parameters:
  #             directory: 'cmd'
  #             coverage_name: 'cmd'

  #         - template: azurePipelineTemplates/run-ut.yml
  #           parameters:
  #             directory: 'common'
  #             coverage_name: 'common'

  #         - template: azurePipelineTemplates/run-ut.yml
  #           parameters:
  #             directory: 'common/parallel'
  #             coverage_name: 'parallel'

  #         - template: azurePipelineTemplates/run-ut.yml
  #           parameters:
  #             directory: 'ste'
  #             coverage_name: 'ste'

  #         - template: azurePipelineTemplates/run-ut.yml
  #           parameters:
  #             directory: 'sddl'
  #             coverage_name: 'sddl'

  #         - script: |
  #             GOARCH=amd64 GOOS=linux go build -cover -tags "netgo" -o azcopy_linux_amd64 
  #             go build -tags "netgo" -o test-validator ./testSuite/
  #             mkdir test-temp
  #             mkdir coverage
  #             export AZCOPY_EXECUTABLE_PATH=$(pwd)/azcopy_linux_amd64
  #             export TEST_SUITE_EXECUTABLE_LOCATION=$(pwd)/test-validator
  #             export TEST_DIRECTORY_PATH=$(pwd)/test-temp

  #             keyctl session test python ./testSuite/scripts/run.py
          
  #             echo 'Formatting coverage directory to legacy txt format'
  #             go tool covdata textfmt -i=coverage -o smoke_coverage.txt
  #             echo 'Formatting coverage to json format'
  #             $(go env GOPATH)/bin/gocov convert smoke_coverage.txt > smoke_coverage.json
  #             echo 'Formatting coverage to xml format'
  #             $(go env GOPATH)/bin/gocov-xml < smoke_coverage.json > smoke_coverage.xml
  #           name: 'Run_smoke_tests'
  #           env:
  #             ACCOUNT_NAME: $(ACCOUNT_NAME)
  #             ACCOUNT_KEY: $(ACCOUNT_KEY)
  #             AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
  #             AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  #             GOOGLE_CLOUD_PROJECT: $(GOOGLE_CLOUD_PROJECT)
  #             GOOGLE_APPLICATION_CREDENTIALS: $(ciGCSServiceAccountKey.secureFilePath)
  #             ACTIVE_DIRECTORY_APPLICATION_ID: $(ACTIVE_DIRECTORY_APPLICATION_ID)
  #             AZCOPY_SPA_CLIENT_SECRET: $(AZCOPY_SPA_CLIENT_SECRET)
  #             CONTAINER_OAUTH_URL: $(CONTAINER_OAUTH_URL)
  #             CONTAINER_OAUTH_VALIDATE_SAS_URL: $(CONTAINER_OAUTH_VALIDATE_SAS_URL)
  #             CONTAINER_SAS_URL: $(CONTAINER_SAS_URL)
  #             FILESYSTEM_SAS_URL: $(FILESYSTEM_SAS_URL)
  #             FILESYSTEM_URL: $(FILESYSTEM_URL)
  #             OAUTH_AAD_ENDPOINT: $(OAUTH_AAD_ENDPOINT)
  #             OAUTH_TENANT_ID: $(OAUTH_TENANT_ID)
  #             PREMIUM_CONTAINER_SAS_URL: $(PREMIUM_CONTAINER_SAS_URL)
  #             S2S_DST_BLOB_ACCOUNT_SAS_URL: $(S2S_DST_BLOB_ACCOUNT_SAS_URL)
  #             S2S_SRC_BLOB_ACCOUNT_SAS_URL: $(S2S_SRC_BLOB_ACCOUNT_SAS_URL)
  #             S2S_SRC_FILE_ACCOUNT_SAS_URL: $(S2S_SRC_FILE_ACCOUNT_SAS_URL)
  #             S2S_SRC_S3_SERVICE_URL: $(S2S_SRC_S3_SERVICE_URL)
  #             S2S_SRC_GCP_SERVICE_URL: $(S2S_SRC_GCP_SERVICE_URL)
  #             SHARE_SAS_URL: $(SHARE_SAS_URL)
  #             GOCOVERDIR: '$(System.DefaultWorkingDirectory)/coverage'
  #           condition: succeededOrFailed()
  #         # Smoke Tests Publishing
  #         - task: PublishCodeCoverageResults@1
  #           condition: succeededOrFailed()
  #           inputs:
  #             codeCoverageTool: Cobertura
  #             summaryFileLocation: $(System.DefaultWorkingDirectory)/**/smoke_coverage.xml
  #         - script: |
  #             pip install azure-storage-blob==12.12.0
  #             python ./tool_distributed_mutex.py unlock "$(MUTEX_URL)"
  #           name: 'Release_the_distributed_mutex'
  #           # this runs even if the job was canceled (only if the mutex was acquired by this job)
  #           condition: and(always(), eq(variables['isMutexSet'], 'true'))
  #     - job: E2E_Test
  #       timeoutInMinutes: 360
  #       # Creating strategies for GOOS: Windows Server 2019 /macOS X Mojave 10.15/Ubuntu 20.04
  #       strategy:
  #         matrix:
  #           Ubuntu-20:
  #             imageName: 'ubuntu-20.04'
  #             build_name: 'azcopy_linux_amd64'
  #             display_name: "Linux"
  #             go_path: '$(go env GOPATH)/bin/'
  #             suffix: ''
  #             run_e2e: 'go test -timeout=2h -v ./e2etest | tee test.txt'
  #             output_test_logs: ''
  #             save_exit_code: 'exit_code=${PIPESTATUS[0]}'
  #             return_exit_code: 'exit "$exit_code"'
  #             go_build: 'GOARCH=amd64 GOOS=linux go build -tags "netgo" -o $(build_name)'
  #           Windows:
  #             imageName: 'windows-2019'
  #             build_name: 'azcopy_windows_amd64.exe'
  #             display_name: "Windows"
  #             type: 'windows'
  #             go_path: 'C:\Users\VssAdministrator\go\bin\'
  #             suffix: '.exe'
  #             run_e2e: 'go test -timeout=2h -v ./e2etest > test.txt'
  #             output_test_logs: 'cat test.txt'
  #             save_exit_code: 'set exit_code=%errorlevel%'
  #             return_exit_code: 'exit %exit_code%'
  #             go_build: 'go build -cover -o $(build_name)'
  #           MacOS:
  #             imageName: 'macos-11'
  #             build_name: 'azcopy_darwin_amd64'
  #             display_name: "MacOS"
  #             go_path: '$(go env GOPATH)/bin/'
  #             suffix: ''
  #             run_e2e: 'go test -timeout=2h -v ./e2etest | tee test.txt'
  #             output_test_logs: ''
  #             save_exit_code: 'exit_code=${PIPESTATUS[0]}'
  #             return_exit_code: 'exit "$exit_code"'
  #             go_build: 'CGO_ENABLED=1 go build -cover -o $(build_name)'
  #       pool:
  #         vmImage: $(imageName)
  #       variables:
  #         - group: AZCOPY_TESTS_VAR

  #       steps:
  #         - task: PowerShell@2
  #           inputs: 
  #             targetType: 'inline'
  #             script: 'Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -AllowClobber -Force'
  #             pwsh: 'true'
  #           displayName: 'Install Powershell Az Module'
  #         - task: GoTool@0
  #           inputs:
  #             version: $(AZCOPY_GOLANG_VERSION_COVERAGE)
  #         - script: |
  #             go install github.com/jstemmer/go-junit-report@v0.9.1
  #             go install github.com/axw/gocov/gocov@v1.1.0
  #             go install github.com/AlekSi/gocov-xml@v1.0.0
  #             go install github.com/matm/gocov-html@v0.0.0-20200509184451-71874e2e203b
  #           displayName: 'Installing dependencies'
  #         - bash: |
  #             echo "##vso[task.setvariable variable=CGO_ENABLED]0"
  #           displayName: 'Set CGO_ENABLED for Windows'
  #           condition: eq(variables.type, 'windows')
  #         - bash: |
  #             npm install -g azurite
  #             mkdir azurite
  #             azurite --silent --location azurite --debug azurite\debug.log &
  #           displayName: 'Install and Run Azurite'
  #         # Running E2E Tests on AMD64
  #         - script: |
  #             mkdir coverage
  #             echo 'Building executable'
  #             $(go_build)
  #             echo 'Running tests'
  #             $(run_e2e)
  #             $(save_exit_code)
  #             echo "Generating junit report"
  #             cat test.txt | $(go_path)go-junit-report$(suffix) > $(display_name)_report.xml
  #             echo 'Formatting coverage directory to legacy txt format'
  #             go tool covdata textfmt -i=coverage -o $(display_name)_coverage.txt
  #             $(output_test_logs)
  #             echo 'Formatting coverage to json format'
  #             $(go_path)gocov$(suffix) convert $(display_name)_coverage.txt > $(display_name)_coverage.json
  #             echo 'Formatting coverage to xml format'
  #             $(go_path)gocov-xml$(suffix) < $(display_name)_coverage.json > $(display_name)_coverage.xml
  #             $(return_exit_code)
  #           env:
  #             AZCOPY_E2E_ACCOUNT_KEY: $(AZCOPY_E2E_ACCOUNT_KEY)
  #             AZCOPY_E2E_ACCOUNT_NAME: $(AZCOPY_E2E_ACCOUNT_NAME)
  #             AZCOPY_E2E_ACCOUNT_KEY_HNS: $(AZCOPY_E2E_ACCOUNT_KEY_HNS)
  #             AZCOPY_E2E_ACCOUNT_NAME_HNS: $(AZCOPY_E2E_ACCOUNT_NAME_HNS)
  #             AZCOPY_E2E_TENANT_ID: $(OAUTH_TENANT_ID)
  #             AZCOPY_E2E_APPLICATION_ID: $(ACTIVE_DIRECTORY_APPLICATION_ID)
  #             AZCOPY_E2E_CLIENT_SECRET: $(AZCOPY_SPA_CLIENT_SECRET)
  #             AZCOPY_E2E_CLASSIC_ACCOUNT_NAME: $(AZCOPY_E2E_CLASSIC_ACCOUNT_NAME)
  #             AZCOPY_E2E_CLASSIC_ACCOUNT_KEY: $(AZCOPY_E2E_CLASSIC_ACCOUNT_KEY)
  #             AZCOPY_E2E_LOG_OUTPUT: '$(System.DefaultWorkingDirectory)/logs'
  #             AZCOPY_E2E_OAUTH_MANAGED_DISK_CONFIG: $(AZCOPY_E2E_OAUTH_MANAGED_DISK_CONFIG)
  #             AZCOPY_E2E_OAUTH_MANAGED_DISK_SNAPSHOT_CONFIG: $(AZCOPY_E2E_OAUTH_MANAGED_DISK_SNAPSHOT_CONFIG)
  #             AZCOPY_E2E_STD_MANAGED_DISK_CONFIG: $(AZCOPY_E2E_STD_MANAGED_DISK_CONFIG)
  #             AZCOPY_E2E_STD_MANAGED_DISK_SNAPSHOT_CONFIG: $(AZCOPY_E2E_STD_MANAGED_DISK_SNAPSHOT_CONFIG)
  #             CPK_ENCRYPTION_KEY: $(CPK_ENCRYPTION_KEY)
  #             CPK_ENCRYPTION_KEY_SHA256: $(CPK_ENCRYPTION_KEY_SHA256)
  #             AZCOPY_E2E_EXECUTABLE_PATH: $(System.DefaultWorkingDirectory)/$(build_name)
  #             GOCOVERDIR: '$(System.DefaultWorkingDirectory)/coverage'
  #             NEW_E2E_SUBSCRIPTION_ID: $(AZCOPY_NEW_E2E_SUBSCRIPTION_ID)
  #             NEW_E2E_APPLICATION_ID: $(AZCOPY_NEW_E2E_APPLICATION_ID)
  #             NEW_E2E_CLIENT_SECRET: $(AZCOPY_NEW_E2E_CLIENT_SECRET)
  #             NEW_E2E_TENANT_ID: $(OAUTH_TENANT_ID)
  #             NEW_E2E_AZCOPY_PATH: $(System.DefaultWorkingDirectory)/$(build_name)
  #           displayName: 'E2E Test $(display_name) - AMD64'

  #         - task: PublishBuildArtifacts@1
  #           displayName: 'Publish logs'
  #           condition: succeededOrFailed()
  #           inputs:
  #             pathToPublish: '$(System.DefaultWorkingDirectory)/logs'
  #             artifactName: logs

  #         - task: PublishTestResults@2
  #           condition: succeededOrFailed()
  #           inputs:
  #             testRunner: JUnit
  #             testResultsFiles: $(System.DefaultWorkingDirectory)/**/$(display_name)_report.xml
  #             testRunTitle: 'Go on $(display_name)'

  #         - task: PublishCodeCoverageResults@1
  #           condition: succeededOrFailed()
  #           inputs:
  #             codeCoverageTool: Cobertura
  #             summaryFileLocation: $(System.DefaultWorkingDirectory)/**/$(display_name)_coverage.xml
  #             additionalCodeCoverageFiles: $(System.DefaultWorkingDirectory)/**/$(display_name)_coverage.html

  - stage: BuildArtifacts
    #dependsOn: RunTests
    #condition: succeeded('RunTests')
    jobs:
      - job: Set_1
        timeoutInMinutes: 120
        strategy:
          matrix:
            Ubuntu_amd64:
              imageName: 'ubuntu-20.04'
              container: 'test-cnt-ubn-20'
              AgentName: "blobfuse-ubuntu20"
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'
          - name: archives
            value: $(root_dir)/archives
          - name: linux_amd64
            value: $(work_dir)/linux_amd64
          - name: linux_se_amd64
            value: $(work_dir)/linux_se_amd64

        steps:
          #TODO: remove this after merging to main
          - script: |
              wget https://raw.githubusercontent.com/dphulkar-msft/azure-storage-azcopy/az-pipelineTest/go_installer.sh -P $(work_dir)/
              chmod 777 $(work_dir)/go_installer.sh
              sudo ls -lRt $(work_dir)/
            displayName: 'list'

          # Custom script to install Go-lang
          - task: ShellScript@2
            inputs:
              scriptPath: "$(work_dir)/go_installer.sh"
              args: "$(root_dir)/"
            displayName: "Installing Go tools"

          - script: |
              echo 'Running GO Vet'
              go vet 
            displayName: 'Golang Vet - Linux'
            workingDirectory: $(root_dir)

          # install dependencies required for compiling azcopy
          - script: |
              sudo apt-get clean
              sudo apt-get update --fix-missing
              sudo apt-get install pkg-config libsecret-1-dev -y
              sudo apt-get install ruby ruby-dev rubygems libglib2.0-dev build-essential rpm -y
              sudo gem install dotenv -v 2.8.1
              sudo gem install fpm -V
            displayName: "Installing Dependencies"

          # get glibc version with which build is done
          - script: |
             ldd --version
            displayName: "GLIBC Version"

          - script: |
              mkdir $(linux_amd64)
              mkdir $(linux_se_amd64)
              mkdir $(archives)
            displayName: "Create required directories"

          - script: |
              GOARCH=amd64 GOOS=linux go build -tags "netgo" -o "$(linux_amd64)/azcopy_linux_amd64"
            displayName: 'Generate Linux AMD64'

          - script: |
              GOARCH=amd64 GOOS=linux go build -tags "netgo,se_integration" -o "$(linux_se_amd64)/azcopy_linux_se_amd64"
            displayName: 'Generate Linux AMD64 SE Integration'

          - script: |
              sudo ls -lRt $(linux_amd64)/
              sudo ls -lRt $(linux_se_amd64)/
              cp $(linux_se_amd64)/azcopy_linux_se* $(Build.ArtifactStagingDirectory)
              cp $(linux_amd64)/azcopy_linux_amd64 $(Build.ArtifactStagingDirectory)
            displayName: 'List the binaries and add to staging directory'
            workingDirectory: $(root_dir)

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-binaries'
            displayName: 'Publish binaries'
            condition: succeededOrFailed()
          
          - script: |
              rm -rf $(Build.ArtifactStagingDirectory)/azcopy*
            displayName: "Remove binaries from staging directory"

          - script: |
              mkdir -p pkgDir/usr/bin/
              cp NOTICE.txt pkgDir/usr/bin/
              cp $(linux_amd64)/azcopy_linux_amd64 pkgDir/usr/bin/
              cp NOTICE.txt $(linux_amd64)/
              cp NOTICE.txt $(linux_se_amd64)/
            displayName: 'Copy required files for packaging'

          - script: |
              sudo ls -lRt pkgDir/usr/bin/
            displayName: 'List the files'

          - script: |
              export GOARCH=amd64
              export GOOS=linux
              $(linux_amd64)/azcopy_linux_amd64 --version
              azcopyOutput=$($(linux_amd64)/azcopy_linux_amd64 --version)

              # Run azcopy --version and capture the output
              azcopyOutput=$($(linux_amd64)/azcopy_linux_amd64 --version)

              # Extract the version part using grep and sed
              if echo "$azcopyOutput" | grep -q "azcopy version"; then
                version=$(echo "$azcopyOutput" | sed -n 's/^azcopy version \([0-9]*\.[0-9]*\.[0-9]*[^ ]*\).*/\1/p')
                if [[ -n "$version" ]]; then
                  echo "Extracted version: $version"
                  
                  # Set the pipeline variable (for Azure DevOps)
                  echo "##vso[task.setvariable variable=azcopy_version]$version"
                else
                  echo "Unable to extract version from azcopy output"
                  exit 1
                fi
              else
                echo "azcopy version string not found in output"
                exit 1
              fi
            displayName: 'Verify and extract the generated build version'
            
          # using fpm tool for packaging of our binary & performing post-install operations
          # for additional information about fpm refer https://fpm.readthedocs.io/en/v1.13.1/
          - script: |
              fpm -s dir -t deb -n azcopy -C pkgDir/ \
              -v `./pkgDir/usr/bin/azcopy_linux_amd64 --version | cut -d " " -f 3` \
              --maintainer "Azcopy v-Team <azcopyvteam@microsoft.com>" \
              --url "https://github.com/Azure/azure-storage-azcopy" \
              --description "A command-line utility that is used to copy data to and from containers and file shares in Azure Storage accounts" 
              mv ./azcopy*.deb ./azcopy-`./pkgDir/usr/bin/azcopy_linux_amd64 --version | cut -d " " -f 3`.x86_64.deb
              cp ./azcopy*.deb $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make AMD64 deb Package'
            
          - script: |
              fpm -s dir -t rpm -n azcopy --rpm-digest sha256 -C pkgDir/ \
              -v `./pkgDir/usr/bin/azcopy_linux_amd64 --version | cut -d " " -f 3` \
              --maintainer "Azcopy v-Team <azcopyvteam@microsoft.com>" \
              --url "https://github.com/Azure/azure-storage-azcopy" \
              --description "A command-line utility that is used to copy data to and from containers and file shares in Azure Storage accounts" 
              mv ./azcopy*.rpm ./azcopy-`./pkgDir/usr/bin/azcopy_linux_amd64 --version | cut -d " " -f 3`.x86_64.rpm
              cp ./azcopy*.rpm $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make AMD64 rpm Package'

          - task: ArchiveFiles@2
            displayName: 'Archive Partner(SE) Linux Build'
            inputs:
              rootFolderOrFile: '$(linux_se_amd64)/azcopy_linux_se_amd64'
              archiveType: tar
              archiveFile: '$(archives)/azcopy_linux_se_amd64_$(azcopy_version).tar.gz'
            continueOnError: true

          - task: ArchiveFiles@2
            displayName: 'Archive Amd Linux Build'
            inputs:
              rootFolderOrFile: '$(linux_amd64)/azcopy_linux_amd64'
              archiveType: tar
              archiveFile: '$(archives)/azcopy_linux_amd64_$(azcopy_version).tar.gz'
            continueOnError: true

          - script: |
              cp -r $(archives)/* $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Add tar.gz to signing stage'

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-linux-temp'
            displayName: 'Publish Artifacts'
            condition: succeededOrFailed()
        
          - task: ComponentGovernanceComponentDetection@0
            inputs:
              scanType: 'Register'
              verbosity: 'Verbose'
              alertWarningLevel: 'High'

      - job: Set_2
        timeoutInMinutes: 120
        strategy:
          matrix:
            Ubuntu_arm64:
              vmImage: 'ubuntu-20.04'
              container: 'test-cnt-ubn-20'
              AgentName: 'blobfuse-ubn20-arm64'

        pool:
          name: "blobfuse-ubn-arm64-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'
          - name: archives
            value: $(root_dir)/archives
          - name: linux_arm64
            value: $(work_dir)/linux_arm64
          - name: linux_se_arm64
            value: $(work_dir)/linux_se_arm64

        steps:
          #TODO: remove this after merging to main
          - script: |
              wget https://raw.githubusercontent.com/dphulkar-msft/azure-storage-azcopy/az-pipelineTest/go_installer.sh -P $(work_dir)/
              chmod 777 $(work_dir)/go_installer.sh
              sudo ls -lRt $(work_dir)/
            displayName: 'list'

          # Custom script to install Go-lang
          - task: ShellScript@2
            inputs:
              scriptPath: "$(work_dir)/go_installer.sh"
              args: "$(root_dir)/"
            displayName: "Installing Go tools"

          - script: |
              echo 'Running GO Vet'
              go vet 
            displayName: 'Golang Vet - Linux'
            workingDirectory: $(root_dir)

          # install dependencies required for compiling azcopy
          - script: |
              sudo apt-get clean
              sudo apt-get update --fix-missing
              sudo apt-get install pkg-config libsecret-1-dev wget -y
              sudo apt-get install ruby ruby-dev rubygems libglib2.0-dev build-essential rpm -y
              sudo gem install dotenv -v 2.8.1
              sudo gem install fpm -V
            displayName: "Installing Dependencies"

          # get glibc version with which build is done
          - script: |
             ldd --version
            displayName: "GLIBC Version"

          - script: |
              mkdir $(linux_arm64)
              mkdir $(linux_se_arm64)
              mkdir $(archives)
            displayName: "Create required directories"

          - script: |
              GOARCH=arm64 GOOS=linux go build -tags "netgo" -o "$(linux_arm64)/azcopy_linux_arm64"
            displayName: 'Generate Linux ARM64'
          
          - script: |
              GOARCH=arm64 GOOS=linux go build -tags "netgo,se_integration" -o "$(linux_se_arm64)/azcopy_linux_se_arm64"
            displayName: 'Generate Linux ARM64 SE Integration'

          - script: |
              sudo ls -lRt $(linux_arm64)/
              sudo ls -lRt $(linux_se_arm64)/
              cp -r $(linux_se_arm64)/azcopy_linux_se* $(Build.ArtifactStagingDirectory)
              cp -r $(linux_arm64)/azcopy_linux_arm64 $(Build.ArtifactStagingDirectory)
            displayName: 'List the binaries and add to staging directory'
            workingDirectory: $(root_dir)

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-binaries'
            displayName: 'Publish binaries'
            condition: succeededOrFailed()
          
          - script: |
              rm -rf $(Build.ArtifactStagingDirectory)/azcopy*
            displayName: "Remove binaries from staging directory"

          - script: |
              mkdir -p pkgDir/usr/bin/
              cp NOTICE.txt pkgDir/usr/bin/
              cp $(linux_arm64)/azcopy_linux_arm64 pkgDir/usr/bin/
              cp NOTICE.txt $(linux_se_arm64)/
            displayName: 'Copy required files'

          - script: |
              export GOARCH=arm64
              export GOOS=linux
              $(linux_arm64)/azcopy_linux_arm64 --version
              azcopyOutput=$($(linux_arm64)/azcopy_linux_arm64 --version)

                # Extract the version part using grep and sed
                if echo "$azcopyOutput" | grep -q "azcopy version"; then
                  version=$(echo "$azcopyOutput" | sed -n 's/^azcopy version \([0-9]*\.[0-9]*\.[0-9]*[^ ]*\).*/\1/p')
                  if [[ -n "$version" ]]; then
                    echo "Extracted version: $version"
                    
                    # Set the pipeline variable (for Azure DevOps)
                    echo "##vso[task.setvariable variable=azcopy_version]$version"
                  else
                    echo "Unable to extract version from azcopy output"
                    exit 1
                  fi
                else
                  echo "azcopy version string not found in output"
                  exit 1
                fi
            displayName: 'Verify and extract the generated build version'

          # using fpm tool for packaging of our binary & performing post-install operations
          # for additional information about fpm refer https://fpm.readthedocs.io/en/v1.13.1/
          # TODO: Add description
          - script: |
              fpm -s dir -t deb -n azcopy -C pkgDir/ \
              -v `./pkgDir/usr/bin/azcopy_linux_arm64 --version | cut -d " " -f 3` \
              --maintainer "Azcopy v-Team <azcopyvteam@microsoft.com>" \
              --url "https://github.com/Azure/azure-storage-azcopy" \
              --description "A command-line utility that is used to copy data to and from containers and file shares in Azure Storage accounts" 
              mv ./azcopy*.deb ./azcopy-`./pkgDir/usr/bin/azcopy_linux_arm64 --version | cut -d " " -f 3`.arm64.deb
              cp ./azcopy*.deb $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make ARM64 deb Package'
            
          - script: |
              fpm -s dir -t rpm -n azcopy --rpm-digest sha256 -C pkgDir/ \
              -v `./pkgDir/usr/bin/azcopy_linux_arm64 --version | cut -d " " -f 3` \
              --maintainer "Azcopy v-Team <azcopyvteam@microsoft.com>" \
              --url "https://github.com/Azure/azure-storage-azcopy" \
              --description "A command-line utility that is used to copy data to and from containers and file shares in Azure Storage accounts" 
              mv ./azcopy*.rpm ./azcopy-`./pkgDir/usr/bin/azcopy_linux_arm64 --version | cut -d " " -f 3`.arm64.rpm
              cp ./azcopy*.rpm $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make ARM64 rpm Package'

          - task: ArchiveFiles@2
            displayName: 'Archive Standard Linux Build'
            inputs:
              rootFolderOrFile: '$(linux_arm64)'
              archiveType: tar
              archiveFile: '$(archives)/azcopy_linux_arm64_$(azcopy_version).tar.gz'
            continueOnError: true

          - task: ArchiveFiles@2
            displayName: 'Archive Partner(SE) Linux Build'
            inputs:
              rootFolderOrFile: '$(linux_se_arm64)/azcopy_linux_se_arm64'
              archiveType: tar
              archiveFile: '$(archives)/azcopy_linux_se_arm64_$(azcopy_version).tar.gz'
            continueOnError: true
          
          - script: |
              cp -r $(archives)/* $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Add tar.gz to signing stage'

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-linux-temp'
            displayName: 'Publish Artifacts'
            condition: succeededOrFailed()
        
          - task: ComponentGovernanceComponentDetection@0
            inputs:
              scanType: 'Register'
              verbosity: 'Verbose'
              alertWarningLevel: 'High'
      
      - job: Set_3
        timeoutInMinutes: 120
        strategy:
          matrix:
            Windows:
              imageName: 'windows-2019'
              type: 'windows'
        pool:
          vmImage: $(imageName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          
        steps:
          - task: GoTool@0
            env:
              GO111MODULE: 'on'
            inputs:
              version: $(AZCOPY_GOLANG_VERSION)

          - script: |
              echo 'Running GO Vet'
              go vet 
            displayName: 'Golang Vet - Windows'
            workingDirectory: $(root_dir)

          - script: |
              go build -o "$(Build.ArtifactStagingDirectory)\azcopy_windows_amd64.exe"
            displayName: 'Generate Windows AMD64'
            env:
              GOARCH: amd64
              GOOS: windows
              CGO_ENABLED: 0

          - script: |
              go build -o "$(Build.ArtifactStagingDirectory)\azcopy_windows_386.exe"
            displayName: 'Generate Windows i386'
            env:
              GOARCH: 386
              GOOS: windows
              CGO_ENABLED: 0

          - script: |
              go build -o "$(Build.ArtifactStagingDirectory)\azcopy_windows_v7_arm.exe"
            displayName: 'Generate Windows ARM'
            env:
              GOARCH: arm
              GOARM: 7
              GOOS: windows
              CGO_ENABLED: 0
          
          - script: |
              go build -o "$(Build.ArtifactStagingDirectory)\azcopy_windows_arm64.exe"
            displayName: 'Generate Windows ARM'
            env:
              GOARCH: arm64
              GOOS: windows
              CGO_ENABLED: 0

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-binaries'
            displayName: 'Publish binaries'
            condition: succeededOrFailed()

          - script: |
              rm -rf $(Build.ArtifactStagingDirectory)\azcopy_windows_v7_arm.exe
            displayName: 'Remove arm7 binary from staging directory'

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-windows-temp'
            displayName: 'Publish Artifacts'
            condition: succeededOrFailed()
        
          - task: ComponentGovernanceComponentDetection@0
            inputs:
              scanType: 'Register'
              verbosity: 'Verbose'
              alertWarningLevel: 'High'

      - job: Set_4
        timeoutInMinutes: 360
        strategy:
          matrix:
            MacOS:
              imageName: 'macos-13'
              type: 'mac-os'
        pool:
          vmImage: $(imageName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'
          - name: darwin_amd_dir
            value: '$(work_dir)/azcopy_darwin_amd64'
          - name: darwin_arm_dir
            value: '$(work_dir)/azcopy_darwin_arm64'
          - name: archives
            value: $(root_dir)/archives

        steps:
          - task: GoTool@0
            env:
              GO111MODULE: 'on'
            inputs:
              version: $(AZCOPY_GOLANG_VERSION)

          - script: |
              echo 'Running GO Vet'
              go vet 
            displayName: 'Golang Vet - Linux'
            workingDirectory: $(System.DefaultWorkingDirectory)

          - script: |
              mkdir $(darwin_amd_dir)
              mkdir $(darwin_arm_dir)
              mkdir $(archives)
            displayName: 'Create required directories'

          - script: |
              CGO_ENABLED=1 go build -o "$(darwin_amd_dir)/azcopy_darwin_amd64"
            displayName: 'Generate MacOS Build with AMD64'
           
          - script: |
              GOARCH=arm64 CGO_ENABLED=1 go build -o "$(darwin_arm_dir)/azcopy_darwin_arm64"
            displayName: 'Test Cross-compiled MacOS Build with ARM64'
          
          - script: |
              cp $(darwin_amd_dir)/azcopy_darwin_amd64 $(Build.ArtifactStagingDirectory)
              cp $(darwin_arm_dir)/azcopy_darwin_arm64 $(Build.ArtifactStagingDirectory)
            displayName: "Copy binaries to staging directory"

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-binaries'
            displayName: 'Publish binaries'
            condition: succeededOrFailed()

          - script: |
              rm -rf $(Build.ArtifactStagingDirectory)/*
            displayName: "Remove binaries from staging directory"

          - task: Bash@3
            displayName: 'Extract AZCopy version'
            inputs:
              targetType: 'inline'
              script: |
                azcopy_version=$($(darwin_amd_dir)/azcopy_darwin_amd64 --version | awk '{print $3}' | cut -d'-' -f1)
                echo "##vso[task.setvariable variable=azcopy_version]$azcopy_version" 

          - script: |
              cp NOTICE.txt $(darwin_amd_dir)
              cp NOTICE.txt $(darwin_arm_dir)
            displayName: 'Copy NOTICE file'

          - task: ArchiveFiles@2
            displayName: 'Archive MacOS AMD64 Build (must happen before signing/notarization)'
            inputs:
              rootFolderOrFile: '$(darwin_amd_dir)'
              archiveFile: '$(archives)/azcopy_darwin_amd64_$(azcopy_version).zip'
            continueOnError: true

          - task: ArchiveFiles@2
            displayName: 'Archive MacOS ARM64 Build (must happen before signing/notarization)'
            inputs:
              rootFolderOrFile: '$(darwin_arm_dir)'
              archiveFile: '$(archives)/azcopy_darwin_arm64_$(azcopy_version).zip'
            continueOnError: true

          - script: |
              cp $(archives)/azcopy_darwin_amd64_$(azcopy_version).zip $(Build.ArtifactStagingDirectory)
              cp $(archives)/azcopy_darwin_arm64_$(azcopy_version).zip $(Build.ArtifactStagingDirectory)
            displayName: 'Copy zip to staging directory'

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-mac-temp'
            displayName: 'Publish Artifacts'
            condition: succeededOrFailed()
        
          - task: ComponentGovernanceComponentDetection@0
            inputs:
              scanType: 'Register'
              verbosity: 'Verbose'
              alertWarningLevel: 'High'
    # BuildArtifacts end here
      
  - stage: SignArtifacts
    dependsOn: BuildArtifacts
    condition: succeeded('BuildArtifacts')
    jobs:
      - job: Set_1
        timeoutInMinutes: 120
        strategy:
          matrix:
            Linux-Signing:
              vmImage: 'Ubuntu-20.04'
              AgentName: "blobfuse-ubuntu20"
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:
          - group: AZCOPY_ESRP_SECRET

        steps:
          - checkout: none
          
          - script: |
              echo ${{ parameters.tag }}
            displayName: 'Tag Name'
          
          # download artifacts that need to be published
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-linux-temp'
              downloadPath: $(Build.ArtifactStagingDirectory)
          
          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/azCopy-linux-temp/*
            displayName: 'List Artifacts'

          - script: |
              mkdir mariner && chmod 755 mariner
              cp azCopy-linux-temp/*arm64.rpm mariner
              cp azCopy-linux-temp/*x86_64.rpm mariner
              sudo ls -lRt mariner
              md5sum mariner/*
            displayName: 'Copy artifacts for Mariner'
            workingDirectory: $(Build.ArtifactStagingDirectory)
          
          - script: |
              sudo apt-get clean
              sudo apt-get update
              sudo apt-get upgrade -y
              sudo apt-get install -f --fix-missing
              wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb 
              sudo dpkg -i packages-microsoft-prod.deb 
              sudo apt install apt-transport-https -y
              sudo apt install dotnet-sdk-3.1 -y
            displayName: "Update dependencies"

          - template: setup/esrp_sign_linux.yml
            parameters:
              FolderPath: $(Build.ArtifactStagingDirectory)/azCopy-linux-temp
              ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_KEY_CODE)
              Pattern: '*.rpm, *.deb, *tar.gz'
              DisplayName: 'ESRP CodeSigning azCopy linux'
          
          - template: setup/esrp_sign_linux.yml
            parameters:
              FolderPath: $(Build.ArtifactStagingDirectory)/mariner
              ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_MARINER_KEY_CODE)
              Pattern: '*.rpm, *.deb'
              DisplayName: 'ESRP CodeSigning azCopy mariner'

          # Validate signed images have md5sum changed
          - script: |
              chmod 755 $(Build.ArtifactStagingDirectory)/azCopy-linux-temp/*
              chmod 755 $(Build.ArtifactStagingDirectory)/mariner/*
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-linux-temp/*.md
              rm -rf $(Build.ArtifactStagingDirectory)/mariner/*.md
              mv $(Build.ArtifactStagingDirectory)/azCopy-linux-temp/* $(Build.ArtifactStagingDirectory)/
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-linux-temp/
            displayName: 'Make Artifacts executable'

          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/*
              md5sum $(Build.ArtifactStagingDirectory)/mariner/*
            displayName: 'List Signed Artifacts'
          
          # Push signed images to artifact directory
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-linux-signed'
            displayName: 'Publish Signed Artifacts'

      - job: Set_2
        timeoutInMinutes: 120
        strategy:
          matrix:
            Windows-Signing:
              vmImage: 'Ubuntu-20.04'
              AgentName: "blobfuse-ubuntu20"
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:
          - group: AZCOPY_ESRP_SECRET
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'
          - name: windows_amd64
            value: '$(work_dir)/azcopy_windows_amd64'
          - name: windows_arm64
            value: '$(work_dir)/azcopy_windows_arm64'
          - name: windows_386
            value: '$(work_dir)/azcopy_windows_386'
          - name: archives
            value: '$(work_dir)/archives'
          
        steps:
          - script: |
              echo ${{ parameters.tag }}
            displayName: 'Tag Name'
          
          # download artifacts that need to be published
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-windows-temp'
              downloadPath: $(Build.ArtifactStagingDirectory)

          - task: DownloadBuildArtifacts@0
            displayName: 'Download linux binary for extracting version'
            inputs:
              artifactName: 'azCopy-binaries'
              downloadPath: $(work_dir)/
              itemPattern: 'azCopy-binaries/azcopy_linux_amd64'
          
          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/azCopy-windows-temp/*
            displayName: 'List Artifacts'

          - script: |
              mkdir -p $(windows_amd64)
              mkdir -p $(windows_arm64)
              mkdir -p $(windows_386)
              mkdir -p $(archives)
            displayName: 'Create required directories'
          
          - script: |
              sudo apt-get clean
              sudo apt-get update
              sudo apt-get upgrade -y
              sudo apt-get install -f --fix-missing
              wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb 
              sudo dpkg -i packages-microsoft-prod.deb 
              sudo apt install apt-transport-https -y
              sudo apt install dotnet-sdk-6.0 -y
              sudo apt-get install -y zip
            displayName: "Update dependencies"

          - template: setup/esrp_sign_windows.yml
            parameters:
              FolderPath: $(Build.ArtifactStagingDirectory)/azCopy-windows-temp
              ESRP_AZCOPY_WIN_KEY_CODE: $(ESRP_AZCOPY_WIN_KEY_CODE)
              Pattern: '*.exe'

          # Validate signed images have md5sum changed
          - script: |
              chmod 755 $(Build.ArtifactStagingDirectory)/azCopy-windows-temp/*
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-windows-temp/*.md
            displayName: 'Make Artifacts executable'

          - script: |
              chmod 755 $(work_dir)/azCopy-binaries/azcopy_linux_amd64
              # Run azcopy --version and capture the output
              azcopyOutput=$($(work_dir)/azCopy-binaries/azcopy_linux_amd64 --version)

              if echo "$azcopyOutput" | grep -q "azcopy version"; then
                version=$(echo "$azcopyOutput" | sed -n 's/^azcopy version \([0-9]*\.[0-9]*\.[0-9]*[^ ]*\).*/\1/p')
                if [[ -n "$version" ]]; then
                  echo "Extracted version: $version"
                  echo "##vso[task.setvariable variable=azcopy_version]$version"
                fi
              fi
            displayName: 'Extract the generated build version'

          - script: |
              cp $(Build.ArtifactStagingDirectory)/azCopy-windows-temp/azcopy_windows_amd64.exe $(windows_amd64)
              cp $(Build.ArtifactStagingDirectory)/azCopy-windows-temp/azcopy_windows_arm64.exe $(windows_arm64)
              cp $(Build.ArtifactStagingDirectory)/azCopy-windows-temp/azcopy_windows_386.exe $(windows_386)
              cp NOTICE.txt $(windows_amd64)
              cp NOTICE.txt $(windows_arm64)
              cp NOTICE.txt $(windows_386)
              zip -r $(archives)/azcopy_windows_amd64_$(azcopy_version).zip .
              zip -r $(archives)/azcopy_windows_arm64_$(azcopy_version).zip .
              zip -r $(archives)/azcopy_windows_386_$(azcopy_version).zip .
            displayName: 'Copy required files'
          
          - task: ArchiveFiles@2
            displayName: 'Archive Windows 64 bit AMD Build'
            inputs:
              rootFolderOrFile: '$(windows_amd64)'
              archiveFile: '$(archives)/azcopy_windows_amd64_$(azcopy_version).zip'
            continueOnError: true

          - task: ArchiveFiles@2
            displayName: 'Archive Windows 64 bit ARM Build'
            inputs:
              rootFolderOrFile: '$(windows_arm64)'
              archiveFile: '$(archives)/azcopy_windows_arm64_$(azcopy_version).zip'
            continueOnError: true

          - task: ArchiveFiles@2
            displayName: 'Archive Windows 32 bit Build'
            inputs:
              rootFolderOrFile: '$(windows_386)'
              archiveFile: '$(archives)/azcopy_windows_386_$(azcopy_version).zip'
            continueOnError: true

          - script: |
              cp $(archives)/azcopy_windows_amd64_$(AZCOPY_VERSION).zip $(Build.ArtifactStagingDirectory)
              cp $(archives)/azcopy_windows_arm64_$(AZCOPY_VERSION).zip $(Build.ArtifactStagingDirectory)
              cp $(archives)/azcopy_windows_386_$(AZCOPY_VERSION).zip $(Build.ArtifactStagingDirectory)
            displayName: 'Copy zip to staging directory'

          - script: |
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-windows-temp
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/*
            displayName: 'List Signed Artifacts'
          
          # Push signed images to artifact directory
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-windows-signed'
            displayName: 'Publish Signed Artifacts'

      - job: Set_3
        timeoutInMinutes: 120
        strategy:
          matrix:
            Mac-Signing:
              vmImage: 'Ubuntu-20.04'
              AgentName: "blobfuse-ubuntu20"
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:
          - group: AZCOPY_ESRP_SECRET

        steps:
          - checkout: none
          
          - script: |
              echo ${{ parameters.tag }}
            displayName: 'Tag Name'
          
          # download artifacts that need to be published
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-mac-temp'
              downloadPath: $(Build.ArtifactStagingDirectory)
          
          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/azCopy-mac-temp/*
            displayName: 'List Artifacts'
          
          - script: |
              sudo apt-get clean
              sudo apt-get update
              sudo apt-get upgrade -y
              sudo apt-get install -f --fix-missing
              wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb 
              sudo dpkg -i packages-microsoft-prod.deb 
              sudo apt update 
              sudo apt install apt-transport-https -y
              sudo apt install dotnet-sdk-6.0 -y
            displayName: "Update dependencies"

          - template: setup/esrp_sign_notarize_macos.yml
            parameters:
              FolderPath: $(Build.ArtifactStagingDirectory)/azCopy-mac-temp
              ESRP_AZCOPY_MAC_KEY_CODE: $(ESRP_AZCOPY_MAC_KEY_CODE)
              Pattern: '*.zip'

          # Validate signed images have md5sum changed
          - script: |
              chmod 755 $(Build.ArtifactStagingDirectory)/azCopy-mac-temp/*
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-mac-temp/*.md
              mv $(Build.ArtifactStagingDirectory)/azCopy-mac-temp/* $(Build.ArtifactStagingDirectory)/
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-mac-temp/
            displayName: 'Make Artifacts executable'

          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/*
            displayName: 'List Signed Artifacts'
          
          # Push signed images to artifact directory
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-mac-signed'
            displayName: 'Publish Signed Artifacts'

          - script: |
              rm -rf $(Build.ArtifactStagingDirectory)/*.zip
              mkdir -p $(Build.ArtifactStagingDirectory)/unzipped
              unzip -o $(Build.ArtifactStagingDirectory)/*.zip -d $(Build.ArtifactStagingDirectory)/unzipped
              mv $(Build.ArtifactStagingDirectory)/unzipped/azcopy_darwin* $(Build.ArtifactStagingDirectory)/
              rm -rf $(Build.ArtifactStagingDirectory)/unzipped
              sudo ls -ltR $(Build.ArtifactStagingDirectory)
            displayName:  'Copy signed mac binary to staging directory'

          # Push signed images to artifact directory
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-binaries-signed'
            displayName: 'Publish Signed Mac Binary'

      - job: Set_4
        timeoutInMinutes: 120
        strategy:
          matrix:
            Binaries-Signing:
              vmImage: 'Ubuntu-20.04'
              AgentName: "blobfuse-ubuntu20"
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:
          - group: AZCOPY_ESRP_SECRET

        steps:
          - checkout: none
          
          - script: |
              echo ${{ parameters.tag }}
            displayName: 'Tag Name'
          
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-binaries'
              downloadPath: $(Build.ArtifactStagingDirectory)
          
          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/azCopy-binaries/*
            displayName: 'List Artifacts'
          
          - script: |
              sudo apt-get clean
              sudo apt-get update
              sudo apt-get upgrade -y
              sudo apt-get install -f --fix-missing
              wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb 
              sudo dpkg -i packages-microsoft-prod.deb 
              sudo apt install apt-transport-https -y
              sudo apt install dotnet-sdk-6.0 -y
            displayName: "Update dependencies"

          - template: setup/esrp_sign_linux.yml
            parameters:
              FolderPath: '$(Build.ArtifactStagingDirectory)/azCopy-binaries'
              ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_KEY_CODE)
              Pattern: 'azcopy_linux*'
              DisplayName: 'ESRP CodeSigning azCopy linux binaries'

          - template: setup/esrp_sign_windows.yml
            parameters:
              FolderPath: '$(Build.ArtifactStagingDirectory)/azCopy-binaries'
              ESRP_AZCOPY_KEY_CODE: $(ESRP_AZCOPY_WIN_KEY_CODE)
              Pattern: '*.exe'
          
          # Validate signed images have md5sum changed
          - script: |
              chmod 755 $(Build.ArtifactStagingDirectory)/azCopy-binaries/*
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-binaries/*.md
              mv $(Build.ArtifactStagingDirectory)/azCopy-binaries/* $(Build.ArtifactStagingDirectory)/
              rm -rf $(Build.ArtifactStagingDirectory)/azCopy-binaries/
            displayName: 'Make Artifacts executable'

          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/*
            displayName: 'List Signed Artifacts'
          
          # Push signed images to artifact directory
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'azCopy-binaries-signed'
            displayName: 'Publish Signed Artifacts'

  # SignArtifacts end here

  - stage: TestArtifacts
    dependsOn: SignArtifacts
    condition: succeeded('SignArtifacts')
    jobs:
      - job: Set_1
        timeoutInMinutes: 120
        strategy:
          matrix:
            Ubuntu_amd64:
              agentName: "blobfuse-ubuntu22"
              vmImage: 'Ubuntu-22.04'
              container: 'test-cnt-ubn-22'
        pool:
          vmImage: $(vmImage)

        variables:
          - group: AZCOPY_ESRP_SECRET
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'

        steps:
          #TODO: remove this after merging to main
          - script: |
              wget https://raw.githubusercontent.com/dphulkar-msft/azure-storage-azcopy/az-pipelineTest/go_installer.sh -P $(work_dir)/
              chmod 777 $(work_dir)/go_installer.sh
              sudo ls -lRt $(work_dir)/
            displayName: 'list'

          # Custom script to install Go-lang
          - task: ShellScript@2
            inputs:
              scriptPath: "$(work_dir)/go_installer.sh"
              args: "$(root_dir)/"
            displayName: "GoTool Custom Setup"
            
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-linux-signed'
              downloadPath: $(root_dir)
              itemPattern: azCopy-linux-signed/azcopy-*x86_64.deb

          - script: |
              ls -l
              result=$(ls -1 | wc -l)
              if [ $result -ne 1 ]; then
                exit 1
              fi
            displayName: 'List Downloaded Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed
            
          - script: |
              sudo dpkg --info azcopy-*x86_64.deb
              sudo dpkg -i azcopy-*x86_64.deb
              sudo apt-get install build-essential -y
            displayName: 'Install deb Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed

          - script: | 
              azcopy_linux_amd64 --version
            displayName: 'Check Version'

          - script: | 
              azcopy_linux_amd64 --help
            displayName: 'Check Help'

      - job: Set_2
        timeoutInMinutes: 120
        strategy:
          matrix:
            Ubuntu_arm64:
              vmImage: 'Ubuntu-22.04'
              container: 'test-cnt-ubn-22-arm64'
              AgentName: "blobfuse-ubn22-arm64"
        pool:
          name: "blobfuse-ubn-arm64-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:  
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'

        steps:
          #TODO: remove this after merging to main
          - script: |
              wget https://raw.githubusercontent.com/dphulkar-msft/azure-storage-azcopy/az-pipelineTest/go_installer.sh -P $(work_dir)/
              chmod 777 $(work_dir)/go_installer.sh
              sudo ls -lRt $(work_dir)/
            displayName: 'list'
      
          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-azcopy
          
          # Custom script to install Go-lang
          - task: ShellScript@2
            inputs:
              scriptPath: "$(work_dir)/go_installer.sh"
              args: "$(root_dir)/"
            displayName: "GoTool Custom Setup"

          - script: |
             sudo apt update
             sudo apt --fix-broken install
             ldd --version
            displayName: "GLIBC Version"

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-linux-signed'
              downloadPath: $(root_dir)
              itemPattern: azCopy-linux-signed/azcopy-*arm64.deb

          - script: |
              ls -l
              result=$(ls -1 | wc -l)
              if [ $result -ne 1 ]; then
                exit 1
              fi
            displayName: 'List Downloaded Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed

          - script: |
              sudo dpkg --info azcopy-*arm64.deb
              sudo dpkg -i azcopy-*arm64.deb
            displayName: 'Install Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed

          - script: | 
              azcopy_linux_arm64 --version
            displayName: 'Check Version'

          - script: | 
              azcopy_linux_arm64 --help
            displayName: 'Check Help'

      - job: Set_3
        timeoutInMinutes: 120
        strategy:
          matrix:
            Rhel_Arm64:
              agentName: "blobfuse-rhel9-arm64"
              vmImage: 'RHEL-9.0'
              container: 'test-cnt-rhel-9-arm64'
              
        pool:
          name: "blobfuse-ubn-arm64-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'

        steps:
            #TODO: remove this after merging to main
          - script: |
              wget https://raw.githubusercontent.com/dphulkar-msft/azure-storage-azcopy/az-pipelineTest/go_installer.sh -P $(work_dir)/
              chmod 777 $(work_dir)/go_installer.sh
              sudo ls -lRt $(work_dir)/
            displayName: 'list'
          
          - script: |
              sudo yum update -y
              sudo yum install git -y
            displayName: 'Install Git'

          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-azcopy
          
          # Custom script to install Go-lang
          - task: ShellScript@2
            inputs:
              scriptPath: "$(work_dir)/go_installer.sh"
              args: "$(root_dir)/"
            displayName: "GoTool Custom Setup"

          # get glibc version with which build is done
          - script: |
             ldd --version
            displayName: "GLIBC Version"

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-linux-signed'
              downloadPath: $(root_dir)
              itemPattern: azCopy-linux-signed/azcopy-*arm64.rpm

          - script: |
              ls -l
              result=$(ls -1 | wc -l)
              if [ $result -ne 1 ]; then
                exit 1
              fi
            displayName: 'List Downloaded Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed

          - script: |
              sudo sed -i '/^failovermethod=/d' /etc/yum.repos.d/*.repo
              sudo rpm -qip azcopy-*.arm64.rpm
              sudo yum groupinstall "Development Tools" -y              
              sudo rpm -i azcopy-*.arm64.rpm
            displayName: 'Install Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed

          - script: | 
              azcopy_linux_arm64 --version
            displayName: 'Check Version'

          - script: | 
              azcopy_linux_arm64 --help
            displayName: 'Check Help'
      
      - job: Set_4
        timeoutInMinutes: 120
        strategy:
          matrix:
            Rhel_Amd64:
              agentName: "blobfuse-rhel9"
              vmImage: 'RHEL-9.0'
              container: 'test-cnt-rhel-9'
              
        pool:
          name: "blobfuse-rhel-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'

        steps:
          - script: |
              sudo yum update -y
              sudo yum install git -y
            displayName: 'Install Git'

           #TODO: remove this after merging to main
          - script: |
              wget https://raw.githubusercontent.com/dphulkar-msft/azure-storage-azcopy/az-pipelineTest/go_installer.sh -P $(work_dir)/
              chmod 777 $(work_dir)/go_installer.sh
              sudo ls -lRt $(work_dir)/
            displayName: 'list'

          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-azcopy

          # Custom script to install Go-lang
          - task: ShellScript@2
            inputs:
              scriptPath: "$(work_dir)/go_installer.sh"
              args: "$(root_dir)/"
            displayName: "GoTool Custom Setup"

          # get glibc version with which build is done
          - script: |
             ldd --version
            displayName: "GLIBC Version"

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-linux-signed'
              downloadPath: $(root_dir)
              itemPattern: azCopy-linux-signed/azcopy-*x86_64.rpm

          - script: |
              ls -l
              result=$(ls -1 | wc -l)
              if [ $result -ne 1 ]; then
                exit 1
              fi
            displayName: 'List Downloaded Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed

          - script: |
              sudo sed -i '/^failovermethod=/d' /etc/yum.repos.d/*.repo
              sudo rpm -qip azcopy-*x86_64.rpm
              sudo yum groupinstall "Development Tools" -y
              sudo rpm -i azcopy-*x86_64.rpm
            displayName: 'Install Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed

          - script: | 
              azcopy_linux_amd64 --version
            displayName: 'Check Version'

          - script: | 
              azcopy_linux_amd64 --help
            displayName: 'Check Help'

      - job: Set_5
        timeoutInMinutes: 120
        strategy:
          matrix:
            Mariner2:
              agentName: "blobfuse-mariner2"
              DistroVer: "Mariner2"
              Description: "CBL-Mariner2 Linux"
              container: "test-cnt-mari-2"

        pool:
          name: "blobfuse-mariner-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'

        steps:
          - script: |
              sudo tdnf update -y
              sudo tdnf install git -y
            displayName: 'Install Git'

          #TODO: remove this after merging to main
          - script: |
              wget https://raw.githubusercontent.com/dphulkar-msft/azure-storage-azcopy/az-pipelineTest/go_installer.sh -P $(work_dir)/
              chmod 777 $(work_dir)/go_installer.sh
              sudo ls -lRt $(work_dir)/
            displayName: 'list'

          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-azcopy

          # Custom script to install Go-lang
          - task: ShellScript@2
            inputs:
              scriptPath: "$(work_dir)/go_installer.sh"
              args: "$(root_dir)/"
            displayName: "GoTool Custom Setup"

          # get glibc version with which build is done
          - script: |
             ldd --version
            displayName: "GLIBC Version"

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-linux-signed'
              downloadPath: $(root_dir)
              itemPattern: azCopy-linux-signed/mariner/azcopy*x86_64.rpm

          - script: |
              ls -l
              result=$(ls -1 | wc -l)
              if [ $result -ne 1 ]; then
                exit 1
              fi
            displayName: 'List Downloaded Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed/mariner              

          - script: |
              sudo rpm -qip azcopy*x86_64.rpm
              sudo rpm -i azcopy*x86_64.rpm
            displayName: 'Install Package'
            workingDirectory: $(root_dir)/azCopy-linux-signed/mariner

          - script: | 
              azcopy_linux_amd64 --version
            displayName: 'Check Version'

          - script: | 
              azcopy_linux_amd64 --help
            displayName: 'Check Help'

      - job: Set_6
        timeoutInMinutes: 360
        strategy:
          matrix:
            MacOS:
              imageName: 'macos-13'
              type: 'mac-os'
        pool:
          vmImage: $(imageName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-azcopy'

        steps:
          - task: GoTool@0
            env:
              GO111MODULE: 'on'
            inputs:
              version: $(AZCOPY_GOLANG_VERSION)

          - script: |
              echo 'Running GO Vet'
              go vet 
            displayName: 'Golang Vet - Linux'
            workingDirectory: $(System.DefaultWorkingDirectory)

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-mac-signed'
              downloadPath: $(Build.ArtifactStagingDirectory)
              itemPattern: azCopy-mac-signed/azcopy*amd64*.zip

          - script: |
              # Install Homebrew if not already installed
              if ! command -v brew &> /dev/null
              then
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/$(whoami)/.zprofile
                eval "$(/opt/homebrew/bin/brew shellenv)"
              fi

              # Define variables
              ZIP_FILE_PATH=$(ls $(Build.ArtifactStagingDirectory)/azCopy-mac-signed/azcopy*amd64*.zip)
              EXTRACT_DIR="$(Build.ArtifactStagingDirectory)/extracted"

              # Create extraction directory
              mkdir -p $EXTRACT_DIR

              # Extract the zip file
              unzip $ZIP_FILE_PATH -d $EXTRACT_DIR

              # Change to the directory containing azcopy
              cd $EXTRACT_DIR/azcopy_darwin_amd64

              # Run the azcopy version command
              ./azcopy_darwin_amd64 --version
            displayName: 'Install Zip, Extract Files, and Run Version Command'
      
      - job: Set_7
        timeoutInMinutes: 120
        strategy:
          matrix:
            Windows:
              imageName: 'windows-2019'
              type: 'windows'
        pool:
          vmImage: $(imageName)

        variables:
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          
        steps:
          - task: GoTool@0
            env:
              GO111MODULE: 'on'
            inputs:
              version: $(AZCOPY_GOLANG_VERSION)

          - script: |
              echo 'Running GO Vet'
              go vet 
            displayName: 'Golang Vet - Windows'
            workingDirectory: $(root_dir)

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'azCopy-windows-signed'
              downloadPath: $(Build.ArtifactStagingDirectory)
              itemPattern: azCopy-windows-signed/azcopy*amd64*.zip
          
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $artifactDir = "$(Build.ArtifactStagingDirectory)\azCopy-windows-signed"
                $extractDir = "$(Build.ArtifactStagingDirectory)\extracted"
                
                # Find the zip file matching the pattern
                $zipFile = Get-ChildItem -Path $artifactDir -Filter "azcopy*amd64*.zip" | Select-Object -First 1

                if ($null -eq $zipFile) {
                  Write-Error "No zip file found matching pattern 'azcopy*amd64*.zip' in directory: $artifactDir"
                  exit 1
                }

                $zipFilePath = $zipFile.FullName

                # Create extraction directory
                New-Item -ItemType Directory -Path $extractDir -Force | Out-Null

                # Extract the zip file
                try {
                  Add-Type -AssemblyName System.IO.Compression.FileSystem
                  [System.IO.Compression.ZipFile]::ExtractToDirectory($zipFilePath, $extractDir)
                } catch {
                  Write-Error "Failed to extract zip file: $_"
                  exit 1
                }

                # Change to the directory containing azcopy
                Set-Location -Path $extractDir

                # Verify that azcopy.exe exists
                if (-Not (Test-Path -Path ".\azcopy_windows_amd64\azcopy_windows_amd64.exe")) {
                  Write-Error "azcopy.exe not found in extraction directory: $extractDir"
                  exit 1
                }

                # Run the azcopy version command
                .\azcopy_windows_amd64\azcopy_windows_amd64.exe --version
            displayName: 'Extract Files and Run Version Command on Windows'

  # TestArtifacts ends here
  
  - stage: ReleaseArtifacts
    dependsOn: TestArtifacts
    condition: succeeded('TestArtifacts')
    jobs:
      - job: ReleaseToContainer
        strategy:
          matrix:
            Ubuntu_amd64:
              agentName: "blobfuse-ubuntu22"
              vmImage: 'Ubuntu-22.04'
              container: 'test-cnt-ubn-22'
        pool:
          vmImage: $(vmImage)
          
        variables:
          - name: Test_Release_Account_Name
            value: 'azcopyprivatedrops'
          - name: Release_Account_Name
            value: 'azcopyvnextrelease'
          - name: Test_Mode
            value: ${{ parameters.test_mode }}

        steps:

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Linux Build Artifacts'
            inputs:
              artifactName: 'azCopy-linux-signed'
              downloadPath: $(Build.ArtifactStagingDirectory)

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Windows Build Artifacts'
            inputs:
              artifactName: 'azCopy-windows-signed'
              downloadPath: $(Build.ArtifactStagingDirectory)

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Mac Build Artifacts'
            inputs:
              artifactName: 'azCopy-mac-signed'
              downloadPath: $(Build.ArtifactStagingDirectory)
          
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Binaries Build Artifacts'
            inputs:
              artifactName: 'azCopy-binaries-signed'
              downloadPath: $(Build.ArtifactStagingDirectory)

          - script: |
              sudo apt-get install -y zip
              zip -r $(Build.ArtifactStagingDirectory)/drop.zip .
              cp $(Build.ArtifactStagingDirectory)/azCopy-linux-signed/azcopy-*x86_64.deb .
              sudo dpkg --info azcopy-*x86_64.deb
              sudo dpkg -i azcopy-*x86_64.deb
              sudo apt-get install build-essential -y
            displayName: 'Create drop.zip file and install azcopy deb package'
            workingDirectory: $(Build.ArtifactStagingDirectory)

          - task: ArchiveFiles@2
            displayName: 'Archive all binaries to drop.zip'
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/azCopy-binaries-signed'
              archiveFile: '$(Build.ArtifactStagingDirectory)/drop.zip'
            continueOnError: true

          - task: Bash@3
            displayName: 'Install Azure CLI'
            inputs:
              targetType: 'inline'
              script: |
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

          - task: AzureCLI@2
            displayName: 'Azure CLI'
            inputs:
              azureSubscription: 'ESRP KeyVault identity'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # Find the current version
                raw_version_output=$(azcopy_linux_amd64 --version)
                azcopy_version=$(echo $raw_version_output | awk '{print $3}')
                
                today=$(date +"%Y%m%d")
                
                if [ "$(Test_Mode)" = "true" ]; then
                  container_url="https://$(Test_Release_Account_Name).blob.core.windows.net/releases/release-$azcopy_version-$today"
                else
                  container_url="https://$(Release_Account_Name).blob.core.windows.net/releases/release-$azcopy_version-$today"
                fi
                echo "Artifacts will be uploaded to: $container_url"
                
                executable_name=azcopy_linux_amd64
                
                # Upload the archived builds
                AZCOPY_AUTO_LOGIN_TYPE=AzCLI $executable_name cp "$(Build.ArtifactStagingDirectory)/azCopy-windows-signed/*" "$container_url" --recursive --put-md5=true
                AZCOPY_AUTO_LOGIN_TYPE=AzCLI $executable_name cp "$(Build.ArtifactStagingDirectory)/azCopy-linux-signed/*.tar.gz" "$container_url" --recursive --put-md5=true
                AZCOPY_AUTO_LOGIN_TYPE=AzCLI $executable_name cp "$(Build.ArtifactStagingDirectory)/azCopy-mac-signed/*" "$container_url" --recursive --put-md5=true
                AZCOPY_AUTO_LOGIN_TYPE=AzCLI $executable_name cp "$(Build.ArtifactStagingDirectory)/drop.zip" "$container_url" --recursive --put-md5=true

      - job: ReleaseAzcopy
        timeoutInMinutes: 120
        strategy:
          matrix:
            Ubuntu-22:
              vmImage: 'Ubuntu-20.04'
              AgentName: "blobfuse-ubuntu20"
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        steps:
          - checkout: none
          
          - script: |
              echo ${{ parameters.tag }}
            displayName: 'Tag Name'
          
          # download artifacts that need to be published
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Linux Build Artifacts'
            inputs:
              artifactName: 'azCopy-linux-signed'
              downloadPath: $(Build.ArtifactStagingDirectory)

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Windows Build Artifacts'
            inputs:
              artifactName: 'azCopy-windows-signed'
              downloadPath: $(Build.ArtifactStagingDirectory)

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Mac Build Artifacts'
            inputs:
              artifactName: 'azCopy-mac-signed'
              downloadPath: $(Build.ArtifactStagingDirectory)
          
          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
              md5sum $(Build.ArtifactStagingDirectory)/azCopy-linux-signed/*.deb
              md5sum $(Build.ArtifactStagingDirectory)/azCopy-linux-signed/*.rpm
              md5sum $(Build.ArtifactStagingDirectory)/azCopy-windows-signed/*.zip
              md5sum $(Build.ArtifactStagingDirectory)/azCopy-mac-signed/*.zip
            displayName: 'List Artifacts'

          - script: |
              sudo apt-get clean
              sudo apt-get update --fix-missing
              wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb 
              sudo dpkg -i packages-microsoft-prod.deb 
              sudo apt update 
              sudo apt install apt-transport-https -y
              sudo apt install dotnet-sdk-3.1 -y
            displayName: "Update dependencies"
            
          - ${{ if eq(parameters.post_release, true) }}:

              # add release tags & push to github
              #TODO: update github connection and repo name while merging to main
              - task: GithubRelease@1
                inputs:
                  githubConnection: 'dphulkar-msft-github-rel'
                  repositoryName: 'dphulkar-msft/azure-storage-azcopy'
                  action: 'edit'

                  target: '$(Build.SourceVersion)'
                  tagSource: 'userSpecifiedTag'

                  title: 'azcopy-10.25.0'
                  tag: 'azcopy-10.25.0'
                  
                  assets: |
                    $(Build.ArtifactStagingDirectory)/azCopy-linux-signed/*
                    $(Build.ArtifactStagingDirectory)/azCopy-mac-signed/*
                    $(Build.ArtifactStagingDirectory)/azCopy-windows-signed/*
                  changeLogCompareToRelease: 'lastFullRelease'
                  changeLogType: 'commitBased'
                  isDraft: ${{ parameters.draft }}
                  isPreRelease: ${{ parameters.prerelease }}
                  assetUploadMode: replace

  - ${{ if eq(parameters.publish_artifacts, true) }}:
    - stage: PublishArtifacts
      dependsOn: ReleaseArtifacts
      condition: succeeded('ReleaseArtifacts')
      jobs:
        - job: PublishArtifacts
          timeoutInMinutes: 120
          pool:
            vmImage: 'ubuntu-22.04'
          variables:
            - group: AZCOPY_ESRP_SECRET
            - name: root_dir
              value: '$(System.DefaultWorkingDirectory)'
          
          steps:
            - checkout: none

            - task: PipAuthenticate@1
              inputs:
                artifactFeeds: 'DevExGlobalFeed'
              displayName: 'Connect to PMC artifact'

            - script: |
                pip install pmc-cli
              displayName: 'Install pmc-cli'

            - task: DownloadSecureFile@1
              name: pmcCertificate
              displayName: 'Download pmc pem file'
              inputs:
                secureFile: 'blobfusebuildvault-blobfuse-release-pmc1-20230911.pem'

            - task: DownloadSecureFile@1
              name: settings
              displayName: 'Download settings.toml file'
              inputs:
                secureFile: 'settings.toml'

            - script: |
                pmc --version
                pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo list --limit 1
                if [ $? -ne 0 ]; then
                  exit 1
                fi
              displayName: 'Test PMC installation'

            # download artifacts that need to be published
            - task: DownloadBuildArtifacts@0
              displayName: 'Download Signed Artifacts'
              inputs:
                artifactName: 'azCopy-linux-signed'
                downloadPath: $(Build.ArtifactStagingDirectory)
                
            - script: |
                cd mariner
                arm64file=$(ls azcopy*.arm64.rpm)
                amd64file=$(ls azcopy*.x86_64.rpm)
                marinerArmFileName="${arm64file/.arm64.rpm/-cm2.arm64.rpm}"
                marinerAmdFileName="${amd64file/.x86_64.rpm/-cm2.x86_64.rpm}"
                mv -v ./azcopy*.arm64.rpm "$marinerArmFileName"
                mv -v ./azcopy*.x86_64.rpm "$marinerAmdFileName"
                ls -lRt
                mv azcopy*.rpm ..
                cd ..
                rm -r mariner/
              displayName: 'Rename Mariner binaries'
              workingDirectory: $(Build.ArtifactStagingDirectory)/azCopy-linux-signed/

            - script: |
                sudo ls -lRt $(Build.ArtifactStagingDirectory)
              displayName: 'List Artifacts'

            - script: |
                pmc package upload azCopy-linux-signed
              displayName: 'Upload files'
              workingDirectory: $(Build.ArtifactStagingDirectory)

            - script: |
                wget https://raw.githubusercontent.com/dphulkar-msft/azure-storage-azcopy/`echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`/packages.csv -O packages.csv
                cat ./packages.csv
              displayName: 'Fetch packages.csv'
              workingDirectory: $(Build.ArtifactStagingDirectory)/

            - script: |
                for file in "$(Build.ArtifactStagingDirectory)/azCopy-linux-signed"/*; 
                do
                  if [ -f "$file" ]; then
                    fileID=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload $file`
                    echo "File: $file and File ID: $fileID"
                  fi
                done

                # marinerArmRpm=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload azcopy*-cm2.arm64.rpm`
                # echo "Azcopy mariner AMD DEB ID: $marinerArmRpm"

                # marinerAmdRpm=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload azcopy*-cm2.x86_64.rpm`
                # echo "Azcopy mariner AMD DEB ID: $marinerAmdRpm"

                # azcopyAmdDeb=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload azcopy*.x86_64.deb`
                # echo "Azcopy AMD DEB ID: $azcopyAmdDeb"

                # azcopyAmdRpm=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload azcopy*.x86_64.rpm`
                # echo "Azcopy AMD DEB ID: $azcopyAmdRpm"

                # azcopyArmDeb=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload azcopy*.arm64.deb`
                # echo "Azcopy AMD DEB ID: $azcopyArmDeb"

                # azcopyArmRpm=`pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) --id-only package upload azcopy*.arm64.rpm`
                # echo "Azcopy AMD DEB ID: $azcopyArmRpm"

                while IFS=, read -r distro fuseArchType repoName releaseName; do
                  echo "Uploading packages for $distro"
                  pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo package update --add-packages ${!fuseArchType} $repoName $releaseName
                done < <(tail -n +3 ../packages.csv)
              displayName: 'Add uploaded packages to repository'
              workingDirectory: $(Build.ArtifactStagingDirectory)/azCopy-linux-signed/

            - script: |
                while IFS=, read -r distro fuseArchType repoName releaseName; do
                  if [[ $fuseArchType == *"Arm"* ]] 
                  then
                    echo "Skipping for ARM type on $distro"
                  else
                    echo "Publishing for $distro"
                    pmc --msal-cert-path $(pmcCertificate.secureFilePath) --config $(settings.secureFilePath) repo publish $repoName
                  fi
                done < <(tail -n +3 ../packages.csv)
              displayName: 'Publish the repository'
              workingDirectory: $(Build.ArtifactStagingDirectory)/azCopy-linux-signed/
            
  - stage: UpdateLatestVersion
    dependsOn: ReleaseArtifacts
    condition: succeeded('ReleaseArtifacts')
    jobs:
      - job: UpdateVersion
        pool:
          vmImage: 'ubuntu-20.04'
        variables:
          - group: AZCOPY_TESTS_VAR
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
        
        steps:
          - checkout: none

          - ${{ if eq(parameters.update_version, true) }}:
              - script: |
                  sudo apt-get install python3 -y
                  python3 --version
                displayName: 'Installing Python'

              # download artifacts that need to be published
              - task: DownloadBuildArtifacts@0
                displayName: 'Download Build Artifacts'
                inputs:
                  artifactName: 'azCopy-linux-signed'
                  downloadPath: $(Build.ArtifactStagingDirectory)
              
              # install azcopy
              - script: |
                  cd $(Build.ArtifactStagingDirectory)/azCopy-linux-signed
                  ls azcopy*.arm64.rpm
                  sudo apt-get install ./`ls azcopy*.arm64.rpm` -y
                  azcopy --version
                displayName: 'Installing azcopy'

              - script: |
                  wget https://raw.githubusercontent.com/Azure/azure-storage-storage/`echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`/releaseVersionUpdate.py
                  ls -l
                displayName: 'Getting Python script'
                workingDirectory: $(root_dir)

              - script: |
                  python3 setup/releaseVersionUpdate.py "$(VERSION_CNT_SAS_URL)" "`azcopy --version`"
                displayName: 'Updating version number'
                workingDirectory: $(root_dir)

